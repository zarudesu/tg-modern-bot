#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º app –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "app"))

from app.config import settings
from app.database.database import init_db, close_db
from app.services.netbox_service import NetBoxService
from app.utils.logger import bot_logger


async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        await close_db()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_netbox_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NetBox API"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NetBox API...")
    
    try:
        netbox = NetBoxService()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = await netbox.get_devices(limit=1)
        print(f"‚úÖ NetBox API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {devices.get('count', 0)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        search_results = await netbox.search_global("server")
        total_found = sum(len(items) for items in search_results.values())
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_found}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤
        sites = await netbox.get_sites(limit=5)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ: {sites.get('count', 0)}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ NetBox API: {e}")
        return False


async def test_telegram_token():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        import aiohttp
        
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{settings.telegram_token}/getMe"
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    bot_info = data.get('result', {})
                    print(f"‚úÖ Telegram —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
                    print(f"   –ë–æ—Ç: @{bot_info.get('username', 'unknown')}")
                    print(f"   ID: {bot_info.get('id', 'unknown')}")
                    return True
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram —Ç–æ–∫–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞: {e}")
        return False


def test_environment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        "TELEGRAM_TOKEN",
        "ADMIN_USER_ID", 
        "DATABASE_URL",
        "NETBOX_URL",
        "NETBOX_TOKEN"
    ]
    
    missing_vars = []
    
    for var in required_vars:
        value = getattr(settings, var.lower(), None)
        if not value:
            missing_vars.append(var)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if "token" in var.lower():
                display_value = f"{str(value)[:10]}..."
            elif "url" in var.lower():
                display_value = value
            else:
                display_value = value
            print(f"  ‚úÖ {var}: {display_value}")
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True


def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        "app/main.py",
        "app/config.py",
        "app/database/models.py",
        "app/database/database.py",
        "app/services/netbox_service.py",
        "app/handlers/start.py",
        "app/handlers/search.py",
        "app/middleware/auth.py",
        "app/middleware/logging.py",
        "app/utils/logger.py",
        "app/utils/formatters.py",
        "requirements.txt",
        "Dockerfile",
        "docker-compose.yml",
        ".env"
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"  ‚úÖ {file_path}")
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    return True


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HHIVP Telegram Bot")
    print("=" * 50)
    
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("NetBox API", test_netbox_api),
        ("Telegram —Ç–æ–∫–µ–Ω", test_telegram_token)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await run_all_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
