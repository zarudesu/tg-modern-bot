"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
"""
import asyncio
from datetime import date

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É —Å JSON –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
try:
    import json
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è JSON –º–∞—Å—Å–∏–≤–∞
    workers = ["–¢–∏–º–æ—Ñ–µ–π", "–î–∏–º–∞", "–ö–æ—Å—Ç—è"]
    json_workers = json.dumps(workers, ensure_ascii=False)
    print(f"   ‚úÖ JSON —Å–æ–∑–¥–∞–Ω: {json_workers}")
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–∞—Å—Å–∏–≤–∞
    parsed_workers = json.loads(json_workers)
    print(f"   ‚úÖ JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {parsed_workers}")
    print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(parsed_workers)}")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    workers_text = ", ".join(parsed_workers)
    print(f"   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {workers_text}")
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤...")
try:
    from app.utils.work_journal_formatters import escape_markdown_v2
    
    # –°–æ–∑–¥–∞–µ–º mock-–æ–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    class MockEntry:
        def __init__(self):
            self.id = 123
            self.work_date = date.today()
            self.company = "–¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è"
            self.work_duration = "1 —á–∞—Å"
            self.work_description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"
            self.is_travel = True
            self.worker_names = '["–¢–∏–º–æ—Ñ–µ–π", "–î–∏–º–∞", "–ö–æ—Å—Ç—è"]'  # JSON —Å—Ç—Ä–æ–∫–∞
            self.created_by_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            self.created_at = date.today()
    
    mock_entry = MockEntry()
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –∑–∞–ø–∏—Å–∏
    import json
    workers = json.loads(mock_entry.worker_names)
    workers_text = ", ".join(workers)
    
    print(f"   ‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∏–∑ –∑–∞–ø–∏—Å–∏: {workers_text}")
    print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(workers)}")
    print(f"   ‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å: {mock_entry.created_by_name}")
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞...")
try:
    from app.utils.work_journal_keyboards import create_worker_selection_keyboard
    from app.utils.work_journal_constants import DEFAULT_WORKERS
    
    # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    keyboard1 = create_worker_selection_keyboard(DEFAULT_WORKERS, [])
    print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞: {len(keyboard1.inline_keyboard)} —Ä—è–¥–æ–≤")
    
    # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    selected = ["–¢–∏–º–æ—Ñ–µ–π", "–î–∏–º–∞"]
    keyboard2 = create_worker_selection_keyboard(DEFAULT_WORKERS, selected)
    print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º: {len(keyboard2.inline_keyboard)} —Ä—è–¥–æ–≤")
    print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(selected)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    has_confirm = any("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä" in str(row) for row in keyboard2.inline_keyboard)
    print(f"   ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {'–ï—Å—Ç—å' if has_confirm else '–ù–µ—Ç'}")
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –¥–µ–π—Å—Ç–≤–∏–π...")
try:
    from app.utils.work_journal_constants import CallbackAction
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    new_actions = [
        CallbackAction.TOGGLE_WORKER,
        CallbackAction.CONFIRM_WORKERS
    ]
    
    for action in new_actions:
        print(f"   ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {action.name}: {action.value}")
    
    print(f"   ‚úÖ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(CallbackAction)}")
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É n8n webhook
print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã n8n webhook...")
try:
    from app.services.n8n_integration_service import N8nIntegrationService
    
    # –°–æ–∑–¥–∞–µ–º mock-–æ–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏
    class MockEntryV2:
        def __init__(self):
            self.id = 456
            self.telegram_user_id = 123456789
            self.user_email = "test@example.com"
            self.work_date = date.today()
            self.company = "–¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è V2"
            self.work_duration = "2 —á–∞—Å–∞"
            self.work_description = "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ò–¢-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
            self.is_travel = False
            self.worker_names = '["–¢–∏–º–æ—Ñ–µ–π", "–î–∏–º–∞", "–ö–æ—Å—Ç—è"]'
            self.created_by_user_id = 123456789
            self.created_by_name = "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            self.created_at = date.today()
            self.n8n_sync_attempts = 0
    
    n8n_service = N8nIntegrationService()
    mock_entry = MockEntryV2()
    mock_user_data = {"first_name": "–¢–µ—Å—Ç", "username": "test_user"}
    
    webhook_data = n8n_service._prepare_webhook_data(mock_entry, mock_user_data)
    
    print(f"   ‚úÖ Webhook –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
    print(f"   ‚úÖ Entry ID: {webhook_data['data']['entry_id']}")
    print(f"   ‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {webhook_data['data']['work_entry']['workers']}")
    print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {webhook_data['data']['work_entry']['workers_count']}")
    print(f"   ‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å: {webhook_data['data']['creator']['name']}")
    print(f"   ‚úÖ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {webhook_data['data']['metadata']['bot_version']}")
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

print("\n" + "="*70)
print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ú–û–î–£–õ–Ø")
print("="*70)
print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
print("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç") 
print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä")
print("‚úÖ –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (toggle, confirm) –¥–æ–±–∞–≤–ª–µ–Ω—ã")
print("‚úÖ n8n webhook –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
print("\nüìã –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–û–î–£–õ–Ø –ñ–£–†–ù–ê–õ–ê –†–ê–ë–û–¢ –ó–ê–í–ï–†–®–ï–ù–´!")
print("\nüöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
print("   ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ‚úì")
print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å ‚úì") 
print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ ‚úì")
print("   ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è n8n ‚úì")
