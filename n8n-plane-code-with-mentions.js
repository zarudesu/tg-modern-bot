// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É–∑–ª–æ–≤
const webhookData = $node["Parse Webhook"].json;
const issue = $node["Get Issue Details"].json;
const project = $node["Get Project Details"].json;
const projectStates = $node["Get Project States"].json;

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
function escapeMarkdown(text) {
  if (!text) return '';
  return text.toString()
    .replace(/([_*\[\]()~`>#+=|{}.!\\-])/g, '\\$1');
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ HTML
function cleanHtml(html) {
  if (!html) return '';
  return html
    .replace(/<[^>]*>/g, '')
    .replace(/&nbsp;/g, ' ')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&')
    .replace(/\r\n/g, '\n')
    .replace(/\r/g, '\n')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Plane –Ω–∞ Telegram —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
function mapPlaneUserToMention(fullName) {
  const mapping = {
    // –î–º–∏—Ç—Ä–∏–π –ì—É—Å–µ–≤
    'Dmitriy Gusev': '@strikerstr',
    'Dmitry Gusev': '@strikerstr', 
    'Dima Gusev': '@strikerstr',
    '–ì—É—Å–µ–≤ –î–º–∏—Ç—Ä–∏–π': '@strikerstr',
    '–î–º–∏—Ç—Ä–∏–π –ì—É—Å–µ–≤': '@strikerstr',
    
    // –¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤
    '–¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤': '@spiritphoto',
    'Timofeij Batyrev': '@spiritphoto',
    'Timofey Batyrev': '@spiritphoto',
    '–ë–∞—Ç—ã—Ä–µ–≤ –¢–∏–º–æ—Ñ–µ–π': '@spiritphoto',
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ú–∞–∫–µ–π–∫–∏–Ω
    'Konstantin Makeykin': '@your-username',
    'Kostya Makeykin': '@your-username', 
    '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ú–∞–∫–µ–π–∫–∏–Ω': '@your-username',
    '–ú–∞–∫–µ–π–∫–∏–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω': '@your-username'
  };
  
  // –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
  if (mapping[fullName]) {
    return mapping[fullName];
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (—Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –∏–º—è)
  const nameLower = fullName.toLowerCase();
  for (const [planeName, mention] of Object.entries(mapping)) {
    if (nameLower.includes('gusev') || nameLower.includes('–≥—É—Å–µ–≤') || nameLower.includes('dmitr')) {
      return '@strikerstr';
    }
    if (nameLower.includes('batyrev') || nameLower.includes('–±–∞—Ç—ã—Ä–µ–≤') || nameLower.includes('timof')) {
      return '@spiritphoto';
    }
    if (nameLower.includes('makeykin') || nameLower.includes('–º–∞–∫–µ–π–∫–∏–Ω') || nameLower.includes('konst')) {
      return '@your-username';
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∫—É—Ä—Å–∏–≤–æ–º
  return `_${fullName}_`;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (—Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏)
function getAssigneesList(assignees) {
  if (!assignees || !Array.isArray(assignees) || assignees.length === 0) {
    return '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã';
  }
  
  const names = assignees.map(a => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    let fullName = '';
    if (a.first_name && a.last_name) {
      fullName = `${a.first_name} ${a.last_name}`;
    } else {
      fullName = a.display_name || a.first_name || a.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    return mapPlaneUserToMention(fullName);
    
  }).filter(name => name);
  
  return names.length > 0 ? names.join(', ') : `–Ω–∞–∑–Ω–∞—á–µ–Ω–æ: ${assignees.length} —á–µ–ª.`;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (—Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏)
function getUserNameById(userId, assignees) {
  if (!assignees || !Array.isArray(assignees) || !userId) {
    return null;
  }
  
  const user = assignees.find(a => a.id === userId);
  if (user) {
    let fullName = '';
    if (user.first_name && user.last_name) {
      fullName = `${user.first_name} ${user.last_name}`;
    } else {
      fullName = user.display_name || user.first_name || user.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    return mapPlaneUserToMention(fullName);
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID
function getStateNameById(stateId, statesData) {
  if (!statesData || !stateId) {
    return null;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ results
  const states = statesData.results || [];
  
  if (!Array.isArray(states)) {
    return null;
  }
  
  const state = states.find(s => s.id === stateId);
  return state ? state.name : null;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
function formatAssigneeChange(oldValue, newValue, assignees) {
  const oldStr = oldValue ? String(oldValue) : '';
  const newStr = newValue ? String(newValue) : '';
  
  if (!oldStr && !newStr) return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
  
  const oldIds = oldStr ? oldStr.split(',').filter(id => id.trim()) : [];
  const newIds = newStr ? newStr.split(',').filter(id => id.trim()) : [];
  
  const added = newIds.filter(id => !oldIds.includes(id));
  const removed = oldIds.filter(id => !newIds.includes(id));
  
  let changeText = '';
  
  if (added.length > 0) {
    const addedNames = added.map(id => getUserNameById(id, assignees)).filter(name => name);
    if (addedNames.length > 0) {
      changeText += `\\+ ${addedNames.join(', ')}`;
    } else {
      changeText += `\\+${added.length} –Ω–∞–∑–Ω–∞—á–µ–Ω${added.length > 1 ? '–æ' : ''}`;
    }
  }
  
  if (removed.length > 0) {
    if (changeText) changeText += ' ';
    const removedNames = removed.map(id => getUserNameById(id, assignees)).filter(name => name);
    if (removedNames.length > 0) {
      changeText += `\\- ${removedNames.join(', ')}`;
    } else {
      changeText += `\\-${removed.length} —É–¥–∞–ª–µ–Ω${removed.length > 1 ? '–æ' : ''}`;
    }
  }
  
  return changeText || '–∏–∑–º–µ–Ω–µ–Ω—ã';
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
function formatFieldChange(field, oldValue, newValue, issue, states) {
  const oldStr = oldValue ? String(oldValue) : '';
  const newStr = newValue ? String(newValue) : '';
  
  if (field === 'assignee_ids') {
    return formatAssigneeChange(oldStr, newStr, issue.assignees);
  } else if (field === 'state_id' || field === 'state') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    const oldStateName = getStateNameById(oldStr, states) || oldStr || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const newStateName = getStateNameById(newStr, states) || newStr || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    return `${oldStateName} ‚Üí ${newStateName}`;
  } else if (field === 'parent_id') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    if (!oldStr && newStr) {
      return '–Ω–µ—Ç —Å–≤—è–∑–∏ ‚Üí —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞';
    } else if (oldStr && !newStr) {
      return '—É–¥–∞–ª–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ ‚Üí –Ω–µ—Ç —Å–≤—è–∑–∏';
    } else if (oldStr && newStr) {
      return '–∏–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞';
    } else {
      return '–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π';
    }
  } else if (field === 'priority') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const oldPriority = priorityMap[oldStr.toLowerCase()] || oldStr || '–Ω–µ —É–∫–∞–∑–∞–Ω';
    const newPriority = priorityMap[newStr.toLowerCase()] || newStr || '–Ω–µ —É–∫–∞–∑–∞–Ω';
    return `${oldPriority} ‚Üí ${newPriority}`;
  } else if (field === 'target_date') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
    const oldDate = oldStr ? formatDate(oldStr) : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    const newDate = newStr ? formatDate(newStr) : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    return `${oldDate} ‚Üí ${newDate}`;
  } else {
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    return `${oldStr || '–ø—É—Å—Ç–æ'} ‚Üí ${newStr || '–ø—É—Å—Ç–æ'}`;
  }
}

// –ö–∞—Ä—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const priorityMap = {
  urgent: 'üî• –°—Ä–æ—á–Ω—ã–π',
  high: '‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π', 
  medium: 'üìç –°—Ä–µ–¥–Ω–∏–π',
  low: 'üìù –ù–∏–∑–∫–∏–π',
  none: '‚ö™ –ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞'
};

const actionMap = {
  created: '—Å–æ–∑–¥–∞–Ω–∞',
  updated: '–æ–±–Ω–æ–≤–ª–µ–Ω–∞',
  deleted: '—É–¥–∞–ª–µ–Ω–∞',
  commented: '–ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞'
};

const eventEmojis = {
  created: 'üÜï',
  updated: 'üìù', 
  deleted: 'üóëÔ∏è',
  commented: 'üí¨',
  assigned: 'üë§',
  state_changed: 'üîÑ'
};

const fieldTranslations = {
  'assignee_ids': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏',
  'state': '–°—Ç–∞—Ç—É—Å',
  'state_id': '–°—Ç–∞—Ç—É—Å',
  'priority': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
  'target_date': '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
  'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
  'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
  'parent_id': '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞'
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(value) {
  if (!value) return '‚Äî';
  const d = new Date(value);
  return `${d.getDate().toString().padStart(2, '0')}.${(d.getMonth() + 1).toString().padStart(2, '0')}.${d.getFullYear()} ${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}`;
}

// –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
let text = '';

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –∏–∑ webhook
if (webhookData && webhookData.event) {
  if (webhookData.event === 'issue_comment') {
    // –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    text += `üí¨ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n\n`;
  } else if (webhookData.event === 'issue' && webhookData.action === 'created') {
    // –≠—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    text += `üÜï –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞\n\n`;
  } else if (webhookData.event === 'issue' && webhookData.action === 'updated') {
    // –≠—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    text += `üìù –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n`;
  } else {
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const action = actionMap[webhookData.action] || webhookData.action;
    const eventEmoji = eventEmojis[webhookData.action] || 'üì¶';
    text += `${eventEmoji} –ó–∞–¥–∞—á–∞ ${escapeMarkdown(action)}\n\n`;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
if (webhookData && webhookData.comment_html && webhookData.comment_html.trim()) {
  const commentText = cleanHtml(webhookData.comment_html);
  const shortComment = commentText.length > 150 ? commentText.slice(0, 150) + '\\.\\.\\.' : commentText;
  text += `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${escapeMarkdown(shortComment)}\n\n`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
if (webhookData && webhookData.field) {
  const fieldName = fieldTranslations[webhookData.field] || webhookData.field;
  
  const changeDescription = formatFieldChange(
    webhookData.field, 
    webhookData.old_value, 
    webhookData.new_value, 
    issue, 
    projectStates
  );
  
  // –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  let emoji = 'üîÑ';
  if (webhookData.field === 'assignee_ids') emoji = 'üë•';
  else if (webhookData.field === 'state_id' || webhookData.field === 'state') emoji = 'üìä';
  else if (webhookData.field === 'priority') emoji = '‚ö†Ô∏è';
  else if (webhookData.field === 'target_date') emoji = '‚è∞';
  else if (webhookData.field === 'parent_id') emoji = 'üîó';
  
  text += `${emoji} *${escapeMarkdown(fieldName)}:* ${escapeMarkdown(changeDescription)}\n\n`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ –≤ –∫–∞—Ä—Ç–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ
if (issue) {
  const projectIdentifier = project?.identifier || 'HHIVP';
  const taskNumber = `${projectIdentifier}\\-${issue.sequence_id}`;
  const title = escapeMarkdown(issue.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
  const priority = priorityMap[(issue.priority || '').toLowerCase()] || '‚ö™ –ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞';
  const createdDate = formatDate(issue.created_at);
  
  text += `‚ï≠‚îÄ üéØ *${taskNumber}*\n`;
  text += `‚îú üìù ${title}\n`;
  
  // –ü—Ä–æ–µ–∫—Ç
  if (project && project.name) {
    text += `‚îú üìÅ ${escapeMarkdown(project.name)}\n`;
  }
  
  text += `‚îú ${priority}\n`;
  text += `‚îú üìÖ ${escapeMarkdown(createdDate)}\n`;
  
  // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (–ò–ó–ú–ï–ù–ï–ù–û!)
  const assigneesList = getAssigneesList(issue.assignees);
  text += `‚îú üë• ${assigneesList}\n`;  // –£–±—Ä–∞–ª–∏ escapeMarkdown –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
  
  // –°—Ç–∞—Ç—É—Å (—Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–º–µ—Å—Ç–æ ID)
  if (issue.state && issue.state.name) {
    text += `‚îú üìä ${escapeMarkdown(issue.state.name)}\n`;
  } else if (issue.state) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ state, –∏—â–µ–º –ø–æ ID –≤ projectStates
    const stateName = getStateNameById(issue.state, projectStates);
    text += `‚îú üìä ${escapeMarkdown(stateName || '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n`;
  } else {
    text += `‚îú üìä –Ω–µ —É–∫–∞–∑–∞–Ω\n`;
  }
  
  // –û–ø–∏—Å–∞–Ω–∏–µ
  if (issue.description_html) {
    const description = cleanHtml(issue.description_html);
    if (description && description.length <= 100) {
      text += `‚îú üí≠ ${escapeMarkdown(description)}\n`;
    } else if (description && description.length > 100) {
      const shortDesc = description.slice(0, 100) + '...';
      text += `‚îú üí≠ ${escapeMarkdown(shortDesc)}\n`;
    }
  }
  
  // –°—Ä–æ–∫–∏
  if (issue.target_date) {
    text += `‚îú ‚è≥ ${escapeMarkdown(formatDate(issue.target_date))}\n`;
  }
  
  // –°—Å—ã–ª–∫–∞
  const projectId = webhookData?.project_id || issue?.project;
  const issueId = webhookData?.issue_id || issue?.id;
  
  if (projectId && issueId) {
    const link = `https://plane.hhivp.com/hhivp/projects/${projectId}/issues/${issueId}`;
    text += `‚ï∞‚îÄ üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Plane](${link})\n`;
  }
  
  text += `\n`;
}

// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Ü–µ
text += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
return {
  chat_id: "YOUR_GROUP_CHAT_ID", 
  message_thread_id: "2231",
  text: text,
  parse_mode: "MarkdownV2",
  disable_web_page_preview: true
};