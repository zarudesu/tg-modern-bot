#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ Plane
"""
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config import settings
from app.integrations.plane_api import plane_api
from app.services.daily_tasks_service import DailyTasksService
from app.database.database import init_db


async def test_plane_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API...")
    
    if not plane_api.configured:
        print("‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env:")
        print("- PLANE_API_URL")
        print("- PLANE_API_TOKEN") 
        print("- PLANE_WORKSPACE_SLUG")
        return False
    
    print(f"‚úÖ Plane API –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
    print(f"  URL: {plane_api.api_url}")
    print(f"  Workspace: {plane_api.workspace_slug}")
    print(f"  Token: {plane_api.api_token[:10]}...")
    
    return True


async def test_admin_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤...")
    
    await init_db()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    class FakeBot:
        async def send_message(self, **kwargs):
            print(f"üì® [–¢–ï–°–¢] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {kwargs['chat_id']}")
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {kwargs['text'][:100]}...")
    
    daily_service = DailyTasksService(FakeBot())
    await daily_service._load_admin_settings_from_db()
    
    print(f"‚úÖ –ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(settings.admin_user_id_list)}")
    
    for admin_id in settings.admin_user_id_list:
        admin_settings = await daily_service.get_admin_settings(admin_id)
        enabled = admin_settings.get('enabled', False)
        time_str = admin_settings.get('time', '09:00')
        timezone_str = admin_settings.get('timezone', 'Europe/Moscow')
        
        status = "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã" if enabled else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        print(f"  üë§ Admin {admin_id}: {status}, –≤—Ä–µ–º—è {time_str} ({timezone_str})")
    
    return daily_service


async def test_get_tasks_for_admin(daily_service, admin_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    print(f"\nüîç –ü–æ–ª—É—á–∞—é –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}...")
    
    try:
        tasks = await plane_api.get_all_assigned_tasks_by_user_id(admin_id)
        
        if not tasks:
            print("‚ö†Ô∏è  –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω email –∞–¥–º–∏–Ω–∞ –≤ –ë–î")
            print("   ‚Ä¢ –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane")
            print("   ‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        overdue = [t for t in tasks if t.is_overdue]
        today = [t for t in tasks if t.is_due_today and not t.is_overdue]
        upcoming = [t for t in tasks if not t.is_overdue and not t.is_due_today]
        
        print(f"  üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {len(overdue)}")
        print(f"  üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today)}")
        print(f"  üìã –í —Ä–∞–±–æ—Ç–µ: {len(upcoming)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if tasks:
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:")
            for i, task in enumerate(tasks[:3]):
                print(f"  {i+1}. {task.priority_emoji} {task.state_emoji} {task.name[:50]}...")
                print(f"     üìÅ {task.project_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        return False


async def test_send_daily_tasks(daily_service, admin_id):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    print(f"\nüì® –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á –∞–¥–º–∏–Ω—É {admin_id}...")
    
    try:
        success = await daily_service.send_daily_tasks_to_admin(admin_id, force=True)
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ Plane\n")
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API
    if not await test_plane_connection():
        return
    
    # –¢–µ—Å—Ç 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤
    daily_service = await test_admin_settings()
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
    working_admins = []
    for admin_id in settings.admin_user_id_list:
        if await test_get_tasks_for_admin(daily_service, admin_id):
            working_admins.append(admin_id)
    
    if not working_admins:
        print("\n‚ö†Ô∏è  –ù–∏ —É –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á.")
        print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ email –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:")
        print("1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /plane_test")
        print("2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å email'")
        print("3. –í–≤–µ–¥–∏—Ç–µ email –∏–∑ Plane")
        return
    
    # –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {len(working_admins)} –∞–¥–º–∏–Ω–æ–≤...")
    for admin_id in working_admins[:1]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        await test_send_daily_tasks(daily_service, admin_id)
    
    print("\n" + "="*50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ DAILY_TASKS_ENABLED=true –≤ .env")
    print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: make dev-restart")
    print("3. –ö–∞–∂–¥—ã–π –∞–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–∏—Ç —Å–≤–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ /daily_settings")


if __name__ == "__main__":
    asyncio.run(main())
