#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n –∏ Google Sheets
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import json
import sys
import aiohttp
from datetime import datetime
from typing import Dict, Any

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
TEST_WEBHOOK_DATA = {
    "source": "telegram_bot",
    "event_type": "work_journal_entry",
    "timestamp": datetime.now().isoformat() + "Z",
    "data": {
        "entry_id": 999,
        "user": {
            "telegram_id": YOUR_TELEGRAM_ID,
            "email": "test@hhivp.com",
            "first_name": "Test",
            "username": "test_user"
        },
        "work_entry": {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "company": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
            "duration": "30 –º–∏–Ω",
            "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n –∏ Google Sheets",
            "is_travel": False,
            "workers": ["–¢–∏–º–æ—Ñ–µ–π", "–î–∏–º–∞"],
            "workers_count": 2
        },
        "creator": {
            "name": "TestUser",
            "telegram_id": YOUR_TELEGRAM_ID
        }
    }
}

async def test_n8n_integration(webhook_url: str, webhook_secret: str = None) -> Dict[str, Any]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å n8n webhook
    """
    print(f"üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    print(f"URL: {webhook_url}")
    
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "HHIVP-Telegram-Bot/1.0"
    }
    
    if webhook_secret:
        headers["X-API-Key"] = webhook_secret
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                webhook_url,
                json=TEST_WEBHOOK_DATA,
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                result = {
                    "success": response.status == 200,
                    "status_code": response.status,
                    "headers": dict(response.headers),
                    "response_text": await response.text()
                }
                
                if response.content_type == "application/json":
                    try:
                        result["response_json"] = await response.json()
                    except:
                        pass
                
                return result
                
    except asyncio.TimeoutError:
        return {
            "success": False,
            "error": "Timeout - n8n –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥"
        }
    except aiohttp.ClientError as e:
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        }

def print_test_results(results: Dict[str, Any]):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    if results["success"]:
        print("‚úÖ –°—Ç–∞—Ç—É—Å: –£–°–ü–ï–®–ù–û")
        print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {results['status_code']}")
        
        if "response_json" in results:
            print("üìÑ –û—Ç–≤–µ—Ç –æ—Ç n8n:")
            print(json.dumps(results["response_json"], indent=2, ensure_ascii=False))
        else:
            print("üìÑ –û—Ç–≤–µ—Ç –æ—Ç n8n (—Ç–µ–∫—Å—Ç):")
            print(results["response_text"][:500])
            
    else:
        print("‚ùå –°—Ç–∞—Ç—É—Å: –û–®–ò–ë–ö–ê")
        if "status_code" in results:
            print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {results['status_code']}")
        print(f"üö® –û—à–∏–±–∫–∞: {results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        if "response_text" in results:
            print("üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
            print(results["response_text"][:500])
    
    print("="*60)

def print_test_data():
    """
    –í—ã–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    print("üìã –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï")
    print("="*40)
    print(json.dumps(TEST_WEBHOOK_DATA, indent=2, ensure_ascii=False))
    print("="*40)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò N8N –ò GOOGLE SHEETS")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) < 2:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω URL webhook")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python3 {sys.argv[0]} <WEBHOOK_URL> [SECRET_KEY]")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print(f"  python3 {sys.argv[0]} https://your-n8n-instance.com/webhook/work-journal")
        return
    
    webhook_url = sys.argv[1]
    webhook_secret = sys.argv[2] if len(sys.argv) > 2 else None
    
    print_test_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    results = await test_n8n_integration(webhook_url, webhook_secret)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_test_results(results)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if results["success"]:
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Sheets - –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ n8n workflow –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL webhook")
        print("  ‚Ä¢ n8n workflow –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("  ‚Ä¢ –û—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Google Sheets API")
        print("  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
        print("  ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
    print("\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ n8n workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Sheets ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Service Account –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
    print("4. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ n8n –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    asyncio.run(main())
