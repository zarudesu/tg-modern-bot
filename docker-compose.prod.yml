services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hhivp-bot-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: hhivp_bot
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: hhivp_bot_prod
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hhivp_bot -d hhivp_bot_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - hhivp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hhivp-bot-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - hhivp-network

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hhivp-bot-app-prod
    restart: unless-stopped
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - hhivp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 60s
      timeout: 30s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  hhivp-network:
    driver: bridge
