# Полный стек: бот + база данных
# Для простого запуска всего приложения

services:
  # База данных
  postgres:
    image: postgres:15-alpine
    container_name: telegram-bot-postgres-full
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=telegram_bot
      - POSTGRES_USER=bot_user
      - POSTGRES_PASSWORD=bot_password_2024
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    
    networks:
      - bot-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d telegram_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis-full
    restart: unless-stopped
    
    command: redis-server --requirepass redis_password_2024
    
    volumes:
      - redis_data:/data
    
    networks:
      - bot-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Telegram Bot
  telegram-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: telegram-bot-app-full
    restart: unless-stopped
    
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - ADMIN_USER_ID=${ADMIN_USER_ID}
      - DATABASE_URL=postgresql+asyncpg://bot_user:bot_password_2024@postgres:5432/telegram_bot
      - REDIS_URL=redis://:redis_password_2024@redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    ports:
      - "8080:8080"  # Webhook server for n8n and Plane integrations

    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    
    networks:
      - bot-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "python", "-c", "print('Bot is running')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  bot-network:
    driver: bridge
