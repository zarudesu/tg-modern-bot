#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö Plane
"""
import asyncio
import aiohttp
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def analyze_plane_assignees():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö"""
    base_url = "https://plane.hhivp.com"
    api_token = "plane_api_15504fe9f81f4a819a79ff8409135447"
    workspace_slug = "hhivp"
    
    headers = {
        'X-API-Key': api_token,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    async with aiohttp.ClientSession() as session:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        projects_url = f"{base_url}/api/v1/workspaces/{workspace_slug}/projects/"
        
        async with session.get(projects_url, headers=headers) as response:
            projects_data = await response.json()
            
            projects = []
            if 'results' in projects_data:
                projects = projects_data['results']
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –ø–µ—Ä–≤—ã—Ö 3 –ø—Ä–æ–µ–∫—Ç–∞—Ö
            all_assignees = set()
            
            for i, project in enumerate(projects[:3], 1):
                project_id = project.get('id')
                project_name = project.get('name')
                print(f"\nüè¢ –ü—Ä–æ–µ–∫—Ç {i}: {project_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
                issues_url = f"{base_url}/api/v1/workspaces/{workspace_slug}/projects/{project_id}/issues/"
                
                async with session.get(issues_url, headers=headers) as issues_response:
                    if issues_response.status == 200:
                        issues_data = await issues_response.json()
                        
                        issues = []
                        if 'results' in issues_data:
                            issues = issues_data['results']
                        elif 'grouped_by' in issues_data:
                            for group in issues_data['grouped_by'].values():
                                if isinstance(group, list):
                                    issues.extend(group)
                        
                        print(f"   üìã –ó–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ: {len(issues)}")
                        
                        project_assignees = set()
                        for issue in issues:
                            assignee_details = issue.get('assignee_details')
                            if assignee_details:
                                email = assignee_details.get('email', 'N/A')
                                name = assignee_details.get('display_name', 'N/A')
                                project_assignees.add(f"{name} ({email})")
                                all_assignees.add(f"{name} ({email})")
                        
                        if project_assignees:
                            print("   üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
                            for assignee in sorted(project_assignees):
                                print(f"      ‚Ä¢ {assignee}")
                        else:
                            print("   üì≠ –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö")
            
            print(f"\nüë• –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã:")
            print("=" * 50)
            if all_assignees:
                for assignee in sorted(all_assignees):
                    print(f"‚Ä¢ {assignee}")
            else:
                print("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            print(f"\nüìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(all_assignees)}")

if __name__ == "__main__":
    asyncio.run(analyze_plane_assignees())