#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Plane API
"""
import asyncio
import aiohttp
import json
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_plane_projects():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç—ã"""
    base_url = "https://plane.hhivp.com"
    api_token = "plane_api_15504fe9f81f4a819a79ff8409135447"
    workspace_slug = "hhivp"
    
    headers = {
        'X-API-Key': api_token,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    async with aiohttp.ClientSession() as session:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        print("üîç –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        projects_url = f"{base_url}/api/v1/workspaces/{workspace_slug}/projects/"
        
        try:
            async with session.get(projects_url, headers=headers) as response:
                if response.status == 200:
                    projects_data = await response.json()
                    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(projects_data.keys())}")
                    
                    # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
                    projects = None
                    if 'results' in projects_data:
                        projects = projects_data['results']
                    elif isinstance(projects_data, list):
                        projects = projects_data
                    elif 'grouped_by' in projects_data:
                        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã, —Å–æ–±–µ—Ä–µ–º –≤—Å–µ
                        projects = []
                        for group in projects_data['grouped_by'].values():
                            if isinstance(group, list):
                                projects.extend(group)
                    
                    if projects:
                        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
                        
                        for i, project in enumerate(projects[:3], 1):  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–µ–∫—Ç–∞
                            project_id = project.get('id')
                            project_name = project.get('name', 'N/A')
                            print(f"   {i}. üè¢ {project_name} (ID: {project_id})")
                        
                        # 2. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                        if projects:
                            first_project_id = projects[0].get('id')
                            print(f"\nüîç –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {first_project_id}...")
                            
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
                            issue_endpoints = [
                                f"{base_url}/api/v1/workspaces/{workspace_slug}/projects/{first_project_id}/issues/",
                                f"{base_url}/api/v1/workspaces/{workspace_slug}/projects/{first_project_id}/issues/list/",
                                f"{base_url}/api/v1/projects/{first_project_id}/issues/",
                            ]
                            
                            for endpoint in issue_endpoints:
                                try:
                                    print(f"   üîÑ {endpoint}")
                                    
                                    async with session.get(endpoint, headers=headers) as issues_response:
                                        if issues_response.status == 200:
                                            issues_data = await issues_response.json()
                                            print(f"   ‚úÖ SUCCESS! –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                                            
                                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
                                            issues = None
                                            if 'results' in issues_data:
                                                issues = issues_data['results']
                                            elif isinstance(issues_data, list):
                                                issues = issues_data
                                            elif 'grouped_by' in issues_data:
                                                issues = []
                                                for group in issues_data['grouped_by'].values():
                                                    if isinstance(group, list):
                                                        issues.extend(group)
                                            
                                            if issues:
                                                print(f"      üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(issues)}")
                                                
                                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
                                                if issues:
                                                    first_issue = issues[0]
                                                    print(f"      üìù –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞:")
                                                    print(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {first_issue.get('name', 'N/A')}")
                                                    print(f"         ID: {first_issue.get('id', 'N/A')}")
                                                    if 'assignee_details' in first_issue:
                                                        assignee = first_issue['assignee_details']
                                                        if assignee:
                                                            print(f"         –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee.get('display_name', 'N/A')}")
                                                    if 'state_detail' in first_issue:
                                                        state = first_issue['state_detail']
                                                        print(f"         –°—Ç–∞—Ç—É—Å: {state.get('name', 'N/A')}")
                                            break  # –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint
                                            
                                        elif issues_response.status == 404:
                                            print(f"   ‚ùå 404 - Not Found")
                                        else:
                                            print(f"   ‚ùå {issues_response.status}")
                                            
                                except Exception as e:
                                    print(f"   üí• Error: {str(e)}")
                    else:
                        print("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
                        print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(projects_data, indent=2)[:500]}...")
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status}")
                    
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
        
        # 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –ø—É—Ç–∏
        print(f"\nüîç –®–∞–≥ 3: –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏...")
        
        member_endpoints = [
            f"{base_url}/api/v1/workspaces/{workspace_slug}/workspace-members/",
            f"{base_url}/api/v1/users/workspaces/{workspace_slug}/",
            f"{base_url}/api/v1/workspaces/{workspace_slug}/users/",
        ]
        
        for endpoint in member_endpoints:
            try:
                print(f"   üîÑ {endpoint}")
                
                async with session.get(endpoint, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"   ‚úÖ SUCCESS!")
                        
                        if isinstance(data, list):
                            print(f"      üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(data)}")
                            for i, member in enumerate(data[:2], 1):
                                member_info = member.get('member', member)
                                email = member_info.get('email', 'N/A')
                                name = member_info.get('display_name', member_info.get('first_name', 'N/A'))
                                print(f"         {i}. üë§ {name} ({email})")
                        else:
                            print(f"      üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                        break
                    else:
                        print(f"   ‚ùå {response.status}")
                        
            except Exception as e:
                print(f"   üí• Error: {str(e)}")

if __name__ == "__main__":
    asyncio.run(test_plane_projects())