#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê - –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:
1. –°—Ç–∞—Ä—ã–µ handlers –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
2. –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ main.py  
3. Email –∏–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (daily_tasks)
4. Work journal —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import asyncio
import sys
import os
from pathlib import Path

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´")
    print("-" * 30)
    
    base = Path(__file__).parent
    
    # –°—Ç–∞—Ä—ã–µ files –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ archive
    old_gone = not (base / "app/handlers/daily_tasks.py").exists()
    old_gone &= not (base / "app/handlers/work_journal.py").exists()
    
    # –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    modules_exist = (base / "app/modules/daily_tasks/router.py").exists()
    modules_exist &= (base / "app/modules/work_journal/router.py").exists()
    
    print(f"  ‚úÖ –°—Ç–∞—Ä—ã–µ handlers –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: {old_gone}")
    print(f"  ‚úÖ –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {modules_exist}")
    
    return old_gone and modules_exist

def test_main_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ main.py"""
    print("\nüöÄ –¢–ï–°–¢ MAIN.PY")
    print("-" * 30)
    
    try:
        with open("app/main.py", "r") as f:
            content = f.read()
        
        # –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        has_new = "from .modules.daily_tasks.router import" in content
        has_new &= "from .modules.work_journal.router import" in content
        
        # –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        no_old = "from .handlers import daily_tasks" not in content
        no_old &= "from .handlers import work_journal" not in content
        
        print(f"  ‚úÖ –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {has_new}")
        print(f"  ‚úÖ –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã: {no_old}")
        
        return has_new and no_old
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –º–æ–¥—É–ª–µ–π"""
    print("\nüîí –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò")
    print("-" * 30)
    
    try:
        from app.modules.daily_tasks.filters import IsAdminEmailFilter
        from app.modules.work_journal.filters import IsWorkJournalActiveFilter
        
        # –ú–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        class MockUser:
            def __init__(self, user_id):
                self.id = user_id
        
        class MockMessage:
            def __init__(self, text, user_id):
                self.text = text
                self.from_user = MockUser(user_id)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        email_msg = MockMessage("zarudesu@gmail.com", 28795547)
        text_msg = MockMessage("–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", 28795547)
        
        # –§–∏–ª—å—Ç—Ä—ã
        email_filter = IsAdminEmailFilter()
        wj_filter = IsWorkJournalActiveFilter()
        
        # –¢–µ—Å—Ç—ã
        email_to_daily = await email_filter(email_msg)
        text_to_daily = await email_filter(text_msg)
        email_to_wj = await wj_filter(email_msg)
        text_to_wj = await wj_filter(text_msg)
        
        print(f"  üìß Email ‚Üí daily_tasks: {email_to_daily}")
        print(f"  üìù Text ‚Üí daily_tasks: {text_to_daily}")
        print(f"  üìß Email ‚Üí work_journal: {email_to_wj}")
        print(f"  üìù Text ‚Üí work_journal: {text_to_wj}")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è: email —Ç–æ–ª—å–∫–æ –≤ daily_tasks
        correct = email_to_daily and not text_to_daily and not email_to_wj and not text_to_wj
        
        print(f"  üéØ –ò–∑–æ–ª—è—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è: {correct}")
        return correct
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    print("=" * 40)
    
    tests = [
        test_structure(),
        test_main_imports(),
        await test_isolation()
    ]
    
    passed = sum(tests)
    total = len(tests)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –£–°–ü–ï–®–ï–ù!")
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ:")
        print("  üì¶ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∞")
        print("  üìß Email –∏–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  üìù Work journal —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
        print("  üîß Main.py –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        print("\nüöÄ –ú–æ–∂–Ω–æ:")
        print("  ‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –≤ app/modules/")
        print("  ‚Ä¢ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏—á–∏")
        print("  ‚Ä¢ –î–µ–ø–ª–æ–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
        
        print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("  ‚Ä¢ DEV_GUIDE_NEW.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
        print("  ‚Ä¢ MODULAR_QUICK_REF.md - –±—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞")
        
        return True
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    print(f"\n{'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
    sys.exit(0 if success else 1)
