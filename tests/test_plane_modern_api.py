#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Plane API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
"""
import asyncio
import aiohttp
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_modern_plane_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö API –ø—É—Ç–µ–π Plane"""
    base_url = "https://plane.hhivp.com"
    api_token = "plane_api_15504fe9f81f4a819a79ff8409135447"
    workspace_slug = "hhivp"
    
    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Plane API –ø—É—Ç–∏ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    test_endpoints = [
        # Workspace info
        f"{base_url}/api/v1/workspaces/{workspace_slug}/",
        f"{base_url}/api/workspaces/{workspace_slug}/",
        
        # Members/Users
        f"{base_url}/api/v1/workspaces/{workspace_slug}/workspace-members/",
        f"{base_url}/api/workspaces/{workspace_slug}/workspace-members/", 
        f"{base_url}/api/v1/workspaces/{workspace_slug}/members/",
        f"{base_url}/api/workspaces/{workspace_slug}/members/",
        
        # Issues/Tasks  
        f"{base_url}/api/v1/workspaces/{workspace_slug}/issues/",
        f"{base_url}/api/workspaces/{workspace_slug}/issues/",
        f"{base_url}/api/v1/workspaces/{workspace_slug}/my-issues/",
        f"{base_url}/api/workspaces/{workspace_slug}/my-issues/",
        
        # Projects
        f"{base_url}/api/v1/workspaces/{workspace_slug}/projects/",
        f"{base_url}/api/workspaces/{workspace_slug}/projects/",
        
        # User profile endpoints
        f"{base_url}/api/v1/users/me/",
        f"{base_url}/api/users/me/",
        
        # General endpoints
        f"{base_url}/api/v1/workspaces/",
        f"{base_url}/api/workspaces/",
    ]
    
    headers = {
        'X-API-Key': api_token,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    async with aiohttp.ClientSession() as session:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ Plane API endpoints...")
        print("=" * 60)
        
        for endpoint in test_endpoints:
            try:
                print(f"üîÑ {endpoint}")
                
                async with session.get(endpoint, headers=headers) as response:
                    status = response.status
                    content_type = response.headers.get('content-type', '')
                    
                    if status == 200:
                        try:
                            data = await response.json()
                            print(f"   ‚úÖ {status} - SUCCESS!")
                            
                            if isinstance(data, dict):
                                keys = list(data.keys())[:10]  # –ü–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
                                print(f"      üìã Keys: {keys}")
                                
                                # –û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è workspace
                                if 'name' in data:
                                    print(f"      üè¢ Name: {data['name']}")
                                if 'id' in data:
                                    print(f"      üÜî ID: {data['id']}")
                                if 'slug' in data:
                                    print(f"      üîó Slug: {data['slug']}")
                                    
                            elif isinstance(data, list):
                                print(f"      üìã List with {len(data)} items")
                                if data and isinstance(data[0], dict):
                                    first_keys = list(data[0].keys())[:5]
                                    print(f"      üìã First item keys: {first_keys}")
                            
                            # –≠—Ç–æ —É—Å–ø–µ—à–Ω—ã–π endpoint - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                            if 'issues' in endpoint.lower():
                                print(f"      üéØ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô ENDPOINT –î–õ–Ø –ó–ê–î–ê–ß!")
                            elif 'members' in endpoint.lower():
                                print(f"      üéØ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô ENDPOINT –î–õ–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í!")
                            elif 'workspaces' in endpoint.lower() and f'/{workspace_slug}/' in endpoint:
                                print(f"      üéØ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô ENDPOINT –î–õ–õ WORKSPACE!")
                                
                        except Exception as e:
                            text = await response.text()
                            print(f"   ‚úÖ {status} - SUCCESS (non-JSON): {text[:100]}...")
                            
                    elif status == 401:
                        print(f"   üîë {status} - Unauthorized (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω)")
                    elif status == 403:
                        print(f"   üö´ {status} - Forbidden (–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞)")
                    elif status == 404:
                        print(f"   ‚ùå {status} - Not Found")
                    elif status == 500:
                        print(f"   üí• {status} - Server Error")
                    else:
                        try:
                            text = await response.text()
                            print(f"   ‚ö†Ô∏è {status} - {text[:50]}...")
                        except:
                            print(f"   ‚ö†Ô∏è {status}")
                            
            except Exception as e:
                print(f"   üí• Connection Error: {str(e)}")
                
        print()
        print("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∞–º—ã–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π endpoint —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        test_endpoint = f"{base_url}/api/v1/users/me/"
        
        alt_headers_list = [
            {'X-API-Key': api_token, 'Content-Type': 'application/json'},
            {'Authorization': f'Bearer {api_token}', 'Content-Type': 'application/json'},
            {'Authorization': f'Token {api_token}', 'Content-Type': 'application/json'},
        ]
        
        for i, alt_headers in enumerate(alt_headers_list, 1):
            try:
                print(f"   üîÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ {i}: {list(alt_headers.keys())}")
                
                async with session.get(test_endpoint, headers=alt_headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"      ‚úÖ SUCCESS! User info: {data.get('email', 'N/A')}")
                        break
                    else:
                        print(f"      ‚ùå {response.status}")
                        
            except Exception as e:
                print(f"      üí• {str(e)}")

if __name__ == "__main__":
    asyncio.run(test_modern_plane_api())