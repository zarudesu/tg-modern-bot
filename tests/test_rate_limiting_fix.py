#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π rate limiting –¥–ª—è Plane API
"""

import asyncio
import time
from app.integrations.plane_api import PlaneAPIClient

async def test_rate_limiting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π rate limiting –¥–ª—è Plane API")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
    client = PlaneAPIClient()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å rate limiting
    print("üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å rate limiting:")
    status = client.get_rate_limit_status()
    for key, value in status.items():
        print(f"  {key}: {value}")
    
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:")
    print(f"  Request delay: {client._request_delay}s (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1.0s –¥–ª—è 60 req/min)")
    print(f"  API configured: {client.configured}")
    
    if not client.configured:
        print("‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    start_time = time.time()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = await client.test_connection()
        end_time = time.time()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f}s")
        
        if result['success']:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"  Workspace: {result.get('workspace')}")
            print(f"  Projects: {result.get('projects_count')}")
            print(f"  API Version: {result.get('api_version')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    print("\nüìä –°—Ç–∞—Ç—É—Å rate limiting –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞:")
    status = client.get_rate_limit_status()
    for key, value in status.items():
        print(f"  {key}: {value}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if client.configured:
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (3 –∑–∞–ø—Ä–æ—Å–∞)...")
        
        for i in range(3):
            start = time.time()
            try:
                result = await client.test_connection()
                end = time.time()
                print(f"  –ó–∞–ø—Ä–æ—Å {i+1}: {end - start:.2f}s - {'‚úÖ' if result['success'] else '‚ùå'}")
                
                status = client.get_rate_limit_status()
                print(f"    Remaining: {status['remaining']}, Reset in: {status['reset_in_seconds']:.1f}s")
                
            except Exception as e:
                print(f"  –ó–∞–ø—Ä–æ—Å {i+1}: ‚ùå –û—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    asyncio.run(test_rate_limiting())