"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç
"""
import asyncio
import sys
from datetime import date, timedelta

# Add project path for module imports
sys.path.append('/path/to/your/project')

from app.database.database import get_async_session, init_db
from app.services.work_journal_service import WorkJournalService, init_default_data
from app.services.n8n_integration_service import N8nIntegrationService
from app.utils.work_journal_constants import WorkJournalState


async def test_work_journal():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥—É–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        
        async for session in get_async_session():
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await init_default_data(session)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            service = WorkJournalService(session)
            
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π
            print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π...")
            companies = await service.get_companies()
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}")
            print(f"   üìã –°–ø–∏—Å–æ–∫: {', '.join(companies[:5])}...")
            
            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
            workers = await service.get_workers()
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(workers)}")
            print(f"   üë• –°–ø–∏—Å–æ–∫: {', '.join(workers)}")
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            test_user_id = 123456789
            
            state = await service.set_user_state(
                test_user_id,
                WorkJournalState.SELECTING_COMPANY,
                draft_date=date.today(),
                draft_company="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
            )
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state.current_state}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            retrieved_state = await service.get_user_state(test_user_id)
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {retrieved_state.current_state}")
            print(f"   üìÖ –î–∞—Ç–∞: {retrieved_state.draft_date}")
            print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {retrieved_state.draft_company}")
            
            # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏...")
            entry = await service.create_work_entry(
                telegram_user_id=test_user_id,
                user_email="test@example.com",
                work_date=date.today(),
                company="–¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è",
                work_duration="30 –º–∏–Ω",
                work_description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                is_travel=True,
                worker_name="–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            )
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å ID: {entry.id}")
            print(f"   üìÖ –î–∞—Ç–∞: {entry.work_date}")
            print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {entry.company}")
            print(f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {entry.work_duration}")
            
            # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
            print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π...")
            entries = await service.get_work_entries(
                telegram_user_id=test_user_id,
                limit=5
            )
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(entries)}")
            
            # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            stats = await service.get_statistics(
                telegram_user_id=test_user_id
            )
            print(f"   ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_entries']}")
            print(f"   üöó –í—ã–µ–∑–¥–æ–≤: {stats['travel_count']}")
            print(f"   üíª –£–¥–∞–ª–µ–Ω–Ω–æ: {stats['remote_count']}")
            
            # –¢–µ—Å—Ç 7: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            cleared = await service.clear_user_state(test_user_id)
            print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ: {cleared}")
            
            # –¢–µ—Å—Ç 8: n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
            print("\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
            n8n_service = N8nIntegrationService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–µ—Å–ª–∏ URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º)
            if hasattr(n8n_service, 'webhook_url') and n8n_service.webhook_url:
                success, message = await n8n_service.test_connection()
                print(f"   üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {'‚úÖ' if success else '‚ùå'}")
                print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            else:
                print("   ‚ö†Ô∏è n8n webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


async def test_formatters():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤...")
    
    try:
        from app.utils.work_journal_formatters import (
            escape_markdown_v2,
            format_date_for_display,
            format_help_message
        )
        
        # –¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        test_text = "–¢–µ—Å—Ç —Å [—Å–∏–º–≤–æ–ª–∞–º–∏] (–¥–ª—è) —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!"
        escaped = escape_markdown_v2(test_text)
        print(f"   ‚úÖ –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {escaped}")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        today = date.today()
        yesterday = today - timedelta(days=1)
        
        today_formatted = format_date_for_display(today)
        yesterday_formatted = format_date_for_display(yesterday)
        
        print(f"   ‚úÖ –°–µ–≥–æ–¥–Ω—è: {today_formatted}")
        print(f"   ‚úÖ –í—á–µ—Ä–∞: {yesterday_formatted}")
        
        # –¢–µ—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
        help_text = format_help_message()
        print(f"   ‚úÖ –°–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {len(help_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤: {e}")


async def test_keyboards():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        from app.utils.work_journal_keyboards import (
            create_date_selection_keyboard,
            create_company_selection_keyboard,
            create_duration_selection_keyboard,
            parse_callback_data,
            build_callback_data
        )
        from app.utils.work_journal_constants import CallbackAction
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è callback –¥–∞–Ω–Ω—ã—Ö
        callback_data = build_callback_data(CallbackAction.SELECT_COMPANY, "–¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è")
        print(f"   ‚úÖ Callback –¥–∞–Ω–Ω—ã–µ: {callback_data}")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö
        action, data = parse_callback_data(callback_data)
        print(f"   ‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ - –¥–µ–π—Å—Ç–≤–∏–µ: {action}, –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        date_keyboard = create_date_selection_keyboard()
        print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞: {len(date_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        companies = ["–ö–æ–º–ø–∞–Ω–∏—è 1", "–ö–æ–º–ø–∞–Ω–∏—è 2", "–ö–æ–º–ø–∞–Ω–∏—è 3"]
        company_keyboard = create_company_selection_keyboard(companies)
        print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞: {len(company_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        duration_keyboard = create_duration_selection_keyboard()
        print(f"   ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞: {len(duration_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç")
    print("=" * 50)
    
    await test_work_journal()
    await test_formatters()
    await test_keyboards()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
