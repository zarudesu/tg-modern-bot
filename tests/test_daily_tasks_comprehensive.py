#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç daily_tasks –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import sys
import asyncio
from datetime import time, datetime

sys.path.append('.')


async def test_daily_tasks_service():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã DailyTasksService"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º DailyTasksService...")
    
    try:
        from app.services.daily_tasks_service import DailyTasksService, daily_tasks_service
        from app.integrations.plane_api import plane_api
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print(f"üìã –ì–ª–æ–±–∞–ª—å–Ω—ã–π daily_tasks_service: {daily_tasks_service}")
        print(f"üìã –¢–∏–ø: {type(daily_tasks_service)}")
        
        if daily_tasks_service is None:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: daily_tasks_service = None")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞
        methods_to_check = ['get_admin_tasks', '_save_admin_settings_to_db', '_load_admin_settings_from_db']
        for method in methods_to_check:
            if hasattr(daily_tasks_service, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        test_admin_id = 28795547
        test_email = "zarudesu@gmail.com"
        test_time = time(10, 0)
        
        print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è admin {test_admin_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if test_admin_id not in daily_tasks_service.admin_settings:
            daily_tasks_service.admin_settings[test_admin_id] = {}
        
        daily_tasks_service.admin_settings[test_admin_id].update({
            'plane_email': test_email,
            'notification_time': test_time,
            'enabled': True
        })
        
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {daily_tasks_service.admin_settings}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º plane_api
        print(f"üõ´ Plane API configured: {plane_api.configured}")
        if plane_api.configured:
            print(f"üåê Base URL: {plane_api.base_url}")
            print(f"üè¢ Workspace: {plane_api.workspace_slug}")
        
        print("‚úÖ DailyTasksService —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DailyTasksService: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_markdown_escaping():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º escape_markdown_v2...")
    
    try:
        from app.modules.daily_tasks.handlers import escape_markdown_v2
        
        test_cases = [
            ("test@example.com", "test\\\\@example\\\\.com"),
            ("user_name", "user\\\\_name"),
            ("Message with (brackets)", "Message with \\\\(brackets\\\\)"),
            ("Text with dots.txt", "Text with dots\\\\.txt"),
            ("Special chars: !@#$%^&*()", "Special chars: \\\\!\\\\@\\\\#\\$\\%\\^\\&\\\\*\\\\(\\\\)"),
            ("", "")
        ]
        
        all_passed = True
        for input_text, expected in test_cases:
            result = escape_markdown_v2(input_text)
            if result == expected:
                print(f"‚úÖ '{input_text}' -> '{result}'")
            else:
                print(f"‚ùå '{input_text}' -> '{result}' (–æ–∂–∏–¥–∞–ª–∏ '{expected}')")
                all_passed = False
                
        if all_passed:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã escape_markdown_v2 –ø—Ä–æ–π–¥–µ–Ω—ã")
            return True
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã escape_markdown_v2 –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è escape_markdown_v2: {e}")
        return False


def test_module_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π daily_tasks...")
    
    modules_to_test = [
        ('app.modules.daily_tasks.handlers', 'router'),
        ('app.modules.daily_tasks.callback_handlers', 'router'), 
        ('app.modules.daily_tasks.email_handlers', 'router'),
        ('app.modules.daily_tasks.filters', 'IsAdminFilter')
    ]
    
    all_passed = True
    for module_name, attr_name in modules_to_test:
        try:
            module = __import__(module_name, fromlist=[attr_name])
            attr = getattr(module, attr_name)
            print(f"‚úÖ {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {e}")
            all_passed = False
            
    return all_passed


def test_time_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏...")
    
    try:
        from datetime import time as time_obj
        
        test_times = ["10:00", "09:30", "15:45", "23:59"]
        
        for time_str in test_times:
            try:
                hour, minute = map(int, time_str.split(':'))
                time_object = time_obj(hour, minute)
                print(f"‚úÖ {time_str} -> {time_object}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {time_str}: {e}")
                return False
                
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢ DAILY_TASKS –ú–û–î–£–õ–Ø")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_module_imports),
        ("MarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", test_markdown_escaping),
        ("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏", test_time_conversion),
        ("DailyTasksService", test_daily_tasks_service)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    failed = 0
    for test_name, result in results:
        if result:
            print(f"‚úÖ {test_name}")
            passed += 1
        else:
            print(f"‚ùå {test_name}")
            failed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    
    if failed == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
        return False


if __name__ == "__main__":
    asyncio.run(main())