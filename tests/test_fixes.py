#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ work_journal
2. –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è  
3. –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
"""
import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.utils.work_journal_constants import WorkJournalState


def test_constants():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–µ—é—Ç .value
    states_to_test = [
        WorkJournalState.ENTERING_CUSTOM_DATE,
        WorkJournalState.ENTERING_CUSTOM_COMPANY,
        WorkJournalState.ENTERING_CUSTOM_DURATION,
        WorkJournalState.ENTERING_DESCRIPTION,
        WorkJournalState.ENTERING_CUSTOM_WORKER,
        WorkJournalState.CONFIRMING_ENTRY
    ]
    
    for state in states_to_test:
        print(f"   {state.name}: '{state.value}'")
    
    print("‚úÖ –í—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")


async def test_text_handler_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    test_states = [
        "entering_custom_date",
        "entering_custom_company", 
        "entering_custom_duration",
        "entering_description",
        "entering_custom_worker",
        "confirming_entry"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—Ä—ã—Ç—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    covered_states = [
        WorkJournalState.ENTERING_CUSTOM_DATE.value,
        WorkJournalState.ENTERING_CUSTOM_COMPANY.value,
        WorkJournalState.ENTERING_CUSTOM_DURATION.value,
        WorkJournalState.ENTERING_DESCRIPTION.value,
        WorkJournalState.ENTERING_CUSTOM_WORKER.value,
    ]
    
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {len(test_states)}")
    print(f"   –ü–æ–∫—Ä—ã—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {len(covered_states)}")
    
    missing_states = set(test_states) - set(covered_states)
    if missing_states:
        print(f"   ‚ùå –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {missing_states}")
    else:
        print("   ‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—Ä—ã—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏!")


def test_markdown_formatting():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    test_message = "üü¢ *–†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–´–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù\\!*\n\nü§ñ *Username:* @test_bot"
    
    if "\\n\\n" in test_message:
        print("   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã \\n\\n")
    elif "\n\n" in test_message:
        print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ \\n")
    else:
        print("   ‚ö†Ô∏è  –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("‚úÖ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–û–°–õ–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    print("=" * 45)
    
    try:
        # –¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        test_constants()
        print()
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await test_text_handler_logic()
        print()
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_markdown_formatting()
        print()
        
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–û–®–õ–ò!")
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        print("‚úÖ Markdown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è")
        print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
