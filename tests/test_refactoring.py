#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram –±–æ—Ç–∞

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ó–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –æ—à–∏–±–æ–∫
2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
3. –ò–∑–æ–ª—è—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ email
4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å work_journal —Å–æ—Å—Ç–æ—è–Ω–∏–π

Admin ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤: 28795547
Test email: zarudesu@gmail.com
"""

import asyncio
import sys
import os
sys.path.append('/Users/zardes/Projects/tg-mordern-bot')

from app.config import settings
from app.utils.logger import bot_logger


async def test_module_imports():
    """–¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    bot_logger.info("üß™ TEST 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        from app.modules.daily_tasks import router as daily_tasks_router
        from app.modules.work_journal import router as work_journal_router
        from app.modules.common import start
        
        bot_logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        return False


async def test_email_filters():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ email —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    bot_logger.info("üß™ TEST 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ email —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
    
    try:
        from app.modules.daily_tasks.filters import IsAdminEmailFilter, IsEmailFilter, IsAdminFilter
        
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        class MockUser:
            def __init__(self, user_id):
                self.id = user_id
        
        class MockMessage:
            def __init__(self, text, user_id):
                self.text = text
                self.from_user = MockUser(user_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        email_filter = IsEmailFilter()
        admin_filter = IsAdminFilter()
        admin_email_filter = IsAdminEmailFilter()
        
        # –¢–µ—Å—Ç email —Ñ–∏–ª—å—Ç—Ä–∞
        test_email_msg = MockMessage("zarudesu@gmail.com", 28795547)
        test_non_email_msg = MockMessage("–Ω–µ email", 28795547)
        
        is_email_valid = await email_filter(test_email_msg)
        is_email_invalid = await email_filter(test_non_email_msg)
        
        # –¢–µ—Å—Ç admin —Ñ–∏–ª—å—Ç—Ä–∞
        admin_msg = MockMessage("test", 28795547)  # ID –∞–¥–º–∏–Ω–∞
        non_admin_msg = MockMessage("test", 12345)  # –Ω–µ –∞–¥–º–∏–Ω
        
        is_admin_valid = await admin_filter(admin_msg)
        is_admin_invalid = await admin_filter(non_admin_msg)
        
        # –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        admin_email_valid = await admin_email_filter(test_email_msg)
        admin_email_invalid = await admin_email_filter(non_admin_msg)
        
        if is_email_valid and not is_email_invalid and is_admin_valid and not is_admin_invalid and admin_email_valid and not admin_email_invalid:
            bot_logger.info("‚úÖ Email —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            bot_logger.info(f"‚úÖ Email 'zarudesu@gmail.com' –æ—Ç –∞–¥–º–∏–Ω–∞ {28795547} –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True
        else:
            bot_logger.error("‚ùå Email —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
            
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return False


async def test_work_journal_filters():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ work_journal —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    bot_logger.info("üß™ TEST 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ work_journal —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
    
    try:
        from app.modules.work_journal.filters import IsWorkJournalActiveFilter
        
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ
        class MockUser:
            def __init__(self, user_id):
                self.id = user_id
        
        class MockMessage:
            def __init__(self, user_id):
                self.from_user = MockUser(user_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä (–æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        active_filter = IsWorkJournalActiveFilter()
        test_msg = MockMessage(28795547)
        
        is_active = await active_filter(test_msg)
        
        bot_logger.info(f"‚úÖ Work Journal —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {is_active} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False)")
        bot_logger.info("‚úÖ Work Journal —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è work_journal —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return False


async def test_router_structure():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    bot_logger.info("üß™ TEST 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    
    try:
        from app.modules.daily_tasks.router import router as dt_router
        from app.modules.work_journal.router import router as wj_router
        from app.modules.common.start import router as common_router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        bot_logger.info("‚úÖ Daily Tasks router —Å–æ–∑–¥–∞–Ω")
        bot_logger.info("‚úÖ Work Journal router —Å–æ–∑–¥–∞–Ω") 
        bot_logger.info("‚úÖ Common router —Å–æ–∑–¥–∞–Ω")
        bot_logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
        return False


async def test_config():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    bot_logger.info("üß™ TEST 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º admin ID
        if 28795547 in settings.admin_user_id_list:
            bot_logger.info(f"‚úÖ Admin ID {28795547} –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            bot_logger.warning(f"‚ö†Ô∏è Admin ID {28795547} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ admin_user_id_list")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞
        if settings.telegram_token:
            bot_logger.info("‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            bot_logger.error("‚ùå Telegram —Ç–æ–∫–µ–Ω –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        bot_logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    bot_logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    bot_logger.info("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_module_imports),
        ("Email —Ñ–∏–ª—å—Ç—Ä—ã", test_email_filters),
        ("Work Journal —Ñ–∏–ª—å—Ç—Ä—ã", test_work_journal_filters),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤", test_router_structure),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        bot_logger.info("-" * 40)
        try:
            result = await test_func()
            if result:
                passed += 1
                bot_logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                failed += 1
                bot_logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            failed += 1
            bot_logger.error(f"üí• {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    bot_logger.info("=" * 60)
    bot_logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    bot_logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    bot_logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    bot_logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        bot_logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        bot_logger.info("üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        bot_logger.info(f"   - Admin ID: 28795547")
        bot_logger.info(f"   - Test email: zarudesu@gmail.com")
        bot_logger.info("üî• Email –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ daily_tasks –º–æ–¥—É–ª–µ")
    else:
        bot_logger.error("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    
    return failed == 0


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)
