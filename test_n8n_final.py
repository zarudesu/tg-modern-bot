#!/usr/bin/env python3
"""
–¢–µ—Å—Ç n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os
from datetime import date
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.n8n_integration_service import N8nIntegrationService
from app.database.work_journal_models import WorkJournalEntry


def create_test_entry():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å"""
    from datetime import datetime
    
    entry = WorkJournalEntry()
    entry.id = 999
    entry.telegram_user_id = 123456789
    entry.user_email = "zardes@hhivp.com"
    entry.work_date = date.today()
    entry.company = "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    entry.work_duration = "1 —á–∞—Å 30 –º–∏–Ω"
    entry.work_description = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    entry.is_travel = True
    entry.worker_names = json.dumps(["–¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤", "–î–º–∏—Ç—Ä–∏–π –ì—É—Å–µ–≤"], ensure_ascii=False)
    entry.created_by_user_id = 123456789
    entry.created_by_name = "@zardes"
    entry.created_at = datetime.now()  # –î–æ–±–∞–≤–ª—è–µ–º created_at
    entry.n8n_sync_attempts = 0
    
    return entry


async def test_n8n_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    n8n_service = N8nIntegrationService()
    
    if not n8n_service.webhook_url:
        print("‚ùå N8n webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"üîó Webhook URL: {n8n_service.webhook_url}")
    
    # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    connection_ok, connection_msg = await n8n_service.test_connection()
    
    if connection_ok:
        print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {connection_msg}")
    else:
        print(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {connection_msg}")
        return False
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏...")
    
    test_entry = create_test_entry()
    user_data = {
        "first_name": "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω",
        "username": "zardes"
    }
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    webhook_data = n8n_service._prepare_webhook_data(test_entry, user_data)
    
    print("üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    print(json.dumps(webhook_data, indent=2, ensure_ascii=False))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    success, error_msg = await n8n_service.send_work_entry(test_entry, user_data)
    
    if success:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ n8n!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
        work_entry = webhook_data["data"]["work_entry"]
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π:")
        print(f"   ‚Ä¢ duration (—á–∏—Å–ª–æ): {work_entry['duration']} –º–∏–Ω—É—Ç")
        print(f"   ‚Ä¢ duration_text (—Ç–µ–∫—Å—Ç): {work_entry['duration_text']}")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {', '.join(work_entry['workers'])}")
        print(f"   ‚Ä¢ –í—ã–µ–∑–¥: {'–î–∞' if work_entry['is_travel'] else '–ù–µ—Ç'}")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True


if __name__ == "__main__":
    try:
        result = asyncio.run(test_n8n_integration())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        sys.exit(1)
