"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
"""
import json
import hmac
import hashlib
from datetime import datetime
from typing import Dict, Any
from aiohttp import web, ClientSession
from aiohttp.web import Request, Response
from aiogram import Bot

from ..utils.logger import bot_logger
# from ..integrations.plane_with_mentions import PlaneNotificationService, PlaneWebhookPayload
# from ..services.plane_n8n_handler import PlaneN8nHandler, PlaneWebhookData
from ..config import settings
from ..database.database import get_async_session


class WebhookServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhooks"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.app = web.Application()
        # plane_service –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
        self.setup_routes()
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        # self.app.router.add_post('/webhooks/plane', self.handle_plane_webhook)
        # self.app.router.add_post('/webhooks/plane-n8n', self.handle_plane_n8n_webhook)
        self.app.router.add_post('/webhooks/task-completed', self.handle_task_completed_webhook)
        self.app.router.add_get('/health', self.health_check)
        self.app.router.add_get('/', self.root_handler)
    
    async def health_check(self, request: Request) -> Response:
        """Health check endpoint"""
        return web.json_response({
            'status': 'ok', 
            'service': 'telegram-bot-webhooks',
            'timestamp': str(datetime.utcnow())
        })
    
    async def root_handler(self, request: Request) -> Response:
        """Root endpoint"""
        return web.json_response({
            'service': 'Telegram Bot Webhooks',
            'endpoints': [
                '/webhooks/task-completed - Task completion reports (from n8n)',
                '/health - Health check'
            ]
        })
    
    async def handle_plane_webhook(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Plane"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await request.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ webhook
            bot_logger.info(f"Received Plane webhook: {data.get('event', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            webhook_secret = getattr(settings, 'plane_webhook_secret', None)
            if webhook_secret:
                signature = request.headers.get('X-Plane-Signature')
                if not self._verify_signature(json.dumps(data), signature, webhook_secret):
                    bot_logger.warning("Invalid Plane webhook signature")
                    return web.json_response({'error': 'Invalid signature'}, status=401)
            
            # –ü–∞—Ä—Å–∏–º payload
            try:
                payload = PlaneWebhookPayload(**data)
            except Exception as e:
                bot_logger.error(f"Invalid Plane webhook payload: {e}")
                return web.json_response({'error': 'Invalid payload format'}, status=400)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            async for session in get_async_session():
                plane_service = PlaneNotificationService(self.bot, session)
                success = await plane_service.process_webhook(payload)
                
                if success:
                    return web.json_response({'status': 'processed'})
                else:
                    return web.json_response({'error': 'Processing failed'}, status=500)
            
        except json.JSONDecodeError:
            bot_logger.error("Invalid JSON in Plane webhook")
            return web.json_response({'error': 'Invalid JSON'}, status=400)
        except Exception as e:
            bot_logger.error(f"Error processing Plane webhook: {e}")
            return web.json_response({'error': 'Internal server error'}, status=500)
    
    async def handle_plane_n8n_webhook(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç n8n —Å –¥–∞–Ω–Ω—ã–º–∏ Plane"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await request.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ webhook
            bot_logger.info(f"Received Plane n8n webhook: {data.get('event_type', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            webhook_secret = getattr(settings, 'plane_webhook_secret', None)
            if webhook_secret:
                signature = request.headers.get('X-N8n-Signature')
                if not self._verify_signature(json.dumps(data), signature, webhook_secret):
                    bot_logger.warning("Invalid n8n webhook signature")
                    return web.json_response({'error': 'Invalid signature'}, status=401)
            
            # –ü–∞—Ä—Å–∏–º payload
            try:
                payload = PlaneWebhookData(**data)
            except Exception as e:
                bot_logger.error(f"Invalid n8n Plane webhook payload: {e}")
                return web.json_response({'error': 'Invalid payload format'}, status=400)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            async for session in get_async_session():
                plane_handler = PlaneN8nHandler(self.bot, session)
                success = await plane_handler.process_plane_webhook(payload)
                
                if success:
                    return web.json_response({'status': 'processed'})
                else:
                    return web.json_response({'error': 'Processing failed'}, status=500)
            
        except json.JSONDecodeError:
            bot_logger.error("Invalid JSON in n8n Plane webhook")
            return web.json_response({'error': 'Invalid JSON'}, status=400)
        except Exception as e:
            bot_logger.error(f"Error processing n8n Plane webhook: {e}")
            return web.json_response({'error': 'Internal server error'}, status=500)
    
    async def handle_task_completed_webhook(self, request: Request) -> Response:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç n8n –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ Plane –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ Done

        –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç n8n:
        {
            "plane_issue_id": "uuid",
            "plane_sequence_id": 123,
            "plane_project_id": "uuid",
            "task_title": "Task name",
            "task_description": "Full description",
            "closed_by": {
                "display_name": "Zardes",
                "first_name": "Zardes",
                "email": "zarudesu@gmail.com"
            },
            "closed_at": "2025-10-07T12:00:00Z",
            "support_request_id": 5  # Optional
        }
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await request.json()

            bot_logger.info(
                f"üì® Received task-completed webhook: "
                f"plane_issue={data.get('plane_issue_id')}, "
                f"seq_id={data.get('plane_sequence_id')}"
            )

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
            from ..services.task_reports_service import task_reports_service
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            async for session in get_async_session():
                # –°–æ–∑–¥–∞–µ–º TaskReport –∏–∑ webhook –¥–∞–Ω–Ω—ã—Ö
                task_report = await task_reports_service.create_task_report_from_webhook(
                    session=session,
                    webhook_data=data
                )

                if not task_report:
                    # None means duplicate (already completed) - return success to prevent retries
                    bot_logger.info(
                        f"‚è≠Ô∏è Skipping notification for duplicate/completed task "
                        f"(plane_issue={data.get('plane_issue_id')})"
                    )
                    return web.json_response(
                        {'status': 'ignored', 'reason': 'Task already completed'},
                        status=200
                    )

                bot_logger.info(
                    f"‚úÖ Created TaskReport #{task_report.id} for "
                    f"Plane issue {task_report.plane_sequence_id}"
                )

                # BUG FIX #4: Refresh task_report from database to get updated description
                # (create_task_report_from_webhook calls fetch_and_generate_report_from_plane
                # which updates task_description from Plane API and commits)
                await session.refresh(task_report)
                bot_logger.info(f"üîÑ Refreshed task_report from DB, description length: {len(task_report.task_description) if task_report.task_description else 0}")

                # ‚úÖ USE DATA FROM task_report (already fetched in create_task_report_from_webhook)
                # No duplicate Plane API calls needed - all data is in task_report

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∫—Ç–æ –∑–∞–∫—Ä—ã–ª)
                admin_to_notify = task_report.closed_by_telegram_id

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫—Ç–æ –∑–∞–∫—Ä—ã–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                admin_list = [admin_to_notify] if admin_to_notify else settings.admin_user_id_list

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                autofill_notice = ""
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ report_text –Ω–µ –ø—É—Å—Ç–æ–π (–º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)
                has_meaningful_content = task_report.report_text and len(task_report.report_text.strip()) > 100

                if task_report.auto_filled_from_journal and has_meaningful_content:
                    autofill_notice = "\n\n‚úÖ _–û—Ç—á—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–∑ work journal_"
                elif task_report.report_text and has_meaningful_content:
                    autofill_notice = "\n\n‚úÖ _–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Plane_"

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
                def escape_md(text: str) -> str:
                    """Escape special characters for MarkdownV2"""
                    if not text:
                        return text
                    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                    for char in special_chars:
                        text = text.replace(char, f'\\{char}')
                    return text

                task_title = escape_md(task_report.task_title or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                closed_by = escape_md(task_report.closed_by_plane_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

                # Project name (from task_report.company - already mapped via COMPANY_MAPPING)
                project_line = ""
                if task_report.company:
                    project_line = f"**–ü—Ä–æ–µ–∫—Ç:** {escape_md(task_report.company)}\n"

                # Workers/Assignees (from task_report.workers - already auto-filled)
                assignees_line = ""
                if task_report.workers:
                    try:
                        workers = json.loads(task_report.workers)
                        if isinstance(workers, list) and workers:
                            workers_text = ", ".join(workers)
                            assignees_line = f"**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:** {escape_md(workers_text)}\n"
                    except:
                        pass

                # Report text preview (if auto-generated)
                report_preview = ""
                if task_report.report_text and len(task_report.report_text.strip()) > 50:
                    report_text = task_report.report_text.strip()
                    # Truncate long reports
                    if len(report_text) > 200:
                        report_text = report_text[:197] + "..."
                    report_preview = f"\n**üìù –û—Ç—á—ë—Ç \\(preview\\):**\n_{escape_md(report_text)}_\n"

                # Build Plane task URL
                plane_url = f"https://plane.hhivp.com/hhivp/projects/{task_report.plane_project_id}/issues/{task_report.plane_issue_id}"
                plane_link = f"[–û—Ç–∫—Ä—ã—Ç—å –≤ Plane]({plane_url})"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
                has_client = bool(task_report.client_chat_id)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                if has_client and task_report.support_request:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ support_request –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞
                    client_info = f"‚úÖ –ö–ª–∏–µ–Ω—Ç: chat\\_id={task_report.client_chat_id}"
                else:
                    client_info = "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–¥–∞—á–µ"

                notification_text = (
                    f"üìã **–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ\\!**\n\n"
                    f"**–ó–∞–¥–∞—á–∞:** \\#{task_report.plane_sequence_id}\n"
                    f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {task_title}\n"
                    f"{project_line}"
                    f"{assignees_line}"
                    f"**–ó–∞–∫—Ä—ã–ª:** {closed_by}\n"
                    f"{client_info}\n"
                    f"{report_preview}"
                    f"\n{plane_link}{autofill_notice}"
                )

                # –ö–Ω–æ–ø–∫–∏ - –í–°–ï–ì–î–ê –≤–∫–ª—é—á–∞—é—Ç –≤—Å–µ –æ–ø—Ü–∏–∏
                keyboard_buttons = [
                    [InlineKeyboardButton(
                        text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç",
                        callback_data=f"fill_report:{task_report.id}"
                    )]
                ]

                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                if task_report.report_text:
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç",
                            callback_data=f"preview_report:{task_report.id}"
                        )
                    ])

                # –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                if has_client:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç - –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                            callback_data=f"approve_send:{task_report.id}"
                        )
                    ])

                # –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–∑–∞–∫—Ä—ã—Ç—å –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏"
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ –æ—Ç—á—ë—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É",
                        callback_data=f"close_no_report:{task_report.id}"
                    )
                ])

                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                from aiogram.types import LinkPreviewOptions

                for admin_id in admin_list:
                    try:
                        await self.bot.send_message(
                            chat_id=admin_id,
                            text=notification_text,
                            reply_markup=keyboard,
                            parse_mode="MarkdownV2",
                            link_preview_options=LinkPreviewOptions(is_disabled=True)
                        )
                        bot_logger.info(
                            f"‚úÖ Notified admin {admin_id} about TaskReport #{task_report.id}"
                        )
                    except Exception as e:
                        bot_logger.warning(
                            f"‚ö†Ô∏è Failed to notify admin {admin_id}: {e}"
                        )

                return web.json_response({
                    'status': 'processed',
                    'task_report_id': task_report.id,
                    'plane_sequence_id': task_report.plane_sequence_id
                })

        except json.JSONDecodeError:
            bot_logger.error("Invalid JSON in task-completed webhook")
            return web.json_response({'error': 'Invalid JSON'}, status=400)
        except Exception as e:
            bot_logger.error(f"Error processing task-completed webhook: {e}")
            import traceback
            bot_logger.error(traceback.format_exc())
            return web.json_response(
                {'error': 'Internal server error', 'details': str(e)},
                status=500
            )

    def _verify_signature(self, payload: str, signature: str, secret: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook"""
        if not signature:
            return False

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
        expected_signature = hmac.new(
            secret.encode(),
            payload.encode(),
            hashlib.sha256
        ).hexdigest()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        return hmac.compare_digest(f"sha256={expected_signature}", signature)
    
    async def start_server(self, host: str = '0.0.0.0', port: int = 8080):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        bot_logger.info(f"Starting webhook server on {host}:{port}")
        
        runner = web.AppRunner(self.app)
        await runner.setup()
        
        site = web.TCPSite(runner, host, port)
        await site.start()
        
        bot_logger.info(f"Webhook server started on http://{host}:{port}")
        return runner
