"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥—É–ª—è task_reports

–£–¥–æ–±–Ω—ã–π UI —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–∫ –≤ work_journal
"""
from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ work_journal)
DEFAULT_DURATIONS = [
    "5 –º–∏–Ω",
    "10 –º–∏–Ω",
    "15 –º–∏–Ω",
    "30 –º–∏–Ω",
    "45 –º–∏–Ω",
    "1 —á–∞—Å",
    "1.5 —á–∞—Å–∞",
    "2 —á–∞—Å–∞"
]
EMOJI = {
    'duration': '‚è±Ô∏è',
    'travel': 'üöó',
    'remote': 'üíª',
    'company': 'üè¢',
    'worker': 'üë§',
    'add': '‚ûï',
    'back': '‚óÄÔ∏è',
    'cancel': '‚ùå',
    'check': '‚úÖ',
    'edit': '‚úèÔ∏è',
    'group': 'üí¨'
}


def create_duration_keyboard(task_report_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(DEFAULT_DURATIONS), 2):
        row_buttons = []
        for j in range(i, min(i + 2, len(DEFAULT_DURATIONS))):
            duration = DEFAULT_DURATIONS[j]
            row_buttons.append(
                InlineKeyboardButton(
                    text=f"{EMOJI['duration']} {duration}",
                    callback_data=f"tr_duration:{task_report_id}:{duration}"
                )
            )
        builder.row(*row_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['add']} –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è",
            callback_data=f"tr_custom_duration:{task_report_id}"
        )
    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É",
            callback_data=f"fill_report:{task_report_id}"
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_report:{task_report_id}"
        )
    )

    return builder.as_markup()


def create_work_type_keyboard(task_report_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã (–í—ã–µ–∑–¥/–£–¥–∞–ª—ë–Ω–Ω–æ)"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['travel']} –î–∞, –±—ã–ª –≤—ã–µ–∑–¥",
            callback_data=f"tr_travel:{task_report_id}:yes"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['remote']} –ù–µ—Ç, —É–¥–∞–ª–µ–Ω–Ω–æ",
            callback_data=f"tr_travel:{task_report_id}:no"
        )
    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=f"tr_back_to_duration:{task_report_id}"
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_report:{task_report_id}"
        )
    )

    return builder.as_markup()


def create_company_keyboard(companies: List[str], task_report_id: int, plane_company: str = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    builder = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏—è –∏–∑ Plane - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
    if plane_company:
        builder.row(
            InlineKeyboardButton(
                text=f"{EMOJI['company']} {plane_company} (–∏–∑ Plane)",
                callback_data=f"tr_company:{task_report_id}:{plane_company}"
            )
        )

    # –ö–Ω–æ–ø–∫–∏ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(companies), 2):
        row_buttons = []
        for j in range(i, min(i + 2, len(companies))):
            company = companies[j]
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ –∫–æ–º–ø–∞–Ω–∏—è —á—Ç–æ –∏–∑ Plane
            if company == plane_company:
                continue
            row_buttons.append(
                InlineKeyboardButton(
                    text=company,
                    callback_data=f"tr_company:{task_report_id}:{company}"
                )
            )
        if row_buttons:
            builder.row(*row_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['add']} –î—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
            callback_data=f"tr_custom_company:{task_report_id}"
        )
    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=f"tr_back_to_work_type:{task_report_id}"
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_report:{task_report_id}"
        )
    )

    return builder.as_markup()


def create_workers_keyboard(
    workers: List[str],
    task_report_id: int,
    selected_workers: List[str] = None,
    plane_assignees: List[str] = None
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)"""
    builder = InlineKeyboardBuilder()

    if selected_workers is None:
        selected_workers = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∏–∑ Plane - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –∏–∑ Plane"
    if plane_assignees:
        all_selected = all(assignee in selected_workers for assignee in plane_assignees)
        prefix = f"{EMOJI['check']} " if all_selected else ""
        builder.row(
            InlineKeyboardButton(
                text=f"{prefix}–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∏–∑ Plane ({len(plane_assignees)})",
                callback_data=f"tr_workers_all_plane:{task_report_id}"
            )
        )

    # –ö–Ω–æ–ø–∫–∏ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ (—Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –≤—ã–±–æ—Ä–∞)
    for worker in workers:
        is_selected = worker in selected_workers
        is_from_plane = plane_assignees and worker in plane_assignees

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        prefix = f"{EMOJI['check']} " if is_selected else ""
        suffix = " (–∏–∑ Plane)" if is_from_plane else ""

        builder.row(
            InlineKeyboardButton(
                text=f"{prefix}{worker}{suffix}",
                callback_data=f"tr_toggle_worker:{task_report_id}:{worker}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
            callback_data=f"tr_add_worker:{task_report_id}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä" (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ)
    if selected_workers:
        builder.row(
            InlineKeyboardButton(
                text=f"{EMOJI['check']} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä ({len(selected_workers)})",
                callback_data=f"tr_confirm_workers:{task_report_id}"
            )
        )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=f"tr_back_to_company:{task_report_id}"
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"cancel_report:{task_report_id}"
        )
    )

    return builder.as_markup()


def create_final_review_keyboard(task_report_id: int, has_client: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['edit']} –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"edit_report:{task_report_id}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç)
    if has_client:
        builder.row(
            InlineKeyboardButton(
                text=f"{EMOJI['check']} –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                callback_data=f"approve_send:{task_report_id}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É" (–í–°–ï–ì–î–ê –¥–æ—Å—Ç—É–ø–Ω–∞)
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['group']} –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",
            callback_data=f"send_to_group:{task_report_id}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏" (–≤–º–µ—Å—Ç–æ "–ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ –æ—Ç—á—ë—Ç–∞")
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['check']} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏",
            callback_data=f"approve_only:{task_report_id}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ –æ—Ç—á—ë—Ç–∞"
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['cancel']} –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ –æ—Ç—á—ë—Ç–∞",
            callback_data=f"close_no_report:{task_report_id}"
        )
    )

    return builder.as_markup()
