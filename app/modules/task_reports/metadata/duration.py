"""
Task Reports Metadata - Duration Handlers

Duration selection handlers with quick buttons and custom input
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
import re

from ..states import TaskReportStates
from ..keyboards import create_duration_keyboard, create_work_type_keyboard
from ..utils import parse_report_id_safely
from ....database.database import get_async_session
from ....services.task_reports_service import task_reports_service
from ....utils.logger import bot_logger


router = Router(name="task_reports_duration")


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# DURATION SELECTION
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("agree_text:"))
async def callback_agree_text(callback: CallbackQuery, state: FSMContext):
    """
    Admin agrees with autofilled report text and proceeds to duration selection

    Callback format: agree_text:{task_report_id}
    """
    try:
        try:
            task_report_id = parse_report_id_safely(callback.data)
        except ValueError as e:
            bot_logger.error(f"Invalid report_id in callback: {e}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á—ë—Ç–∞", show_alert=True)
            return
        bot_logger.info(f"‚úÖ Admin {callback.from_user.id} agreed with text for report #{task_report_id}")

        # Move to duration selection
        await state.set_state(TaskReportStates.filling_duration)

        # Show duration keyboard
        keyboard = create_duration_keyboard(task_report_id)

        await callback.message.edit_text(
            "‚è±Ô∏è **–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è:",
            reply_markup=keyboard
        )

        await callback.answer()

    except Exception as e:
        bot_logger.error(f"‚ùå Error in agree_text callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("tr_duration:"))
async def callback_duration(callback: CallbackQuery, state: FSMContext):
    """
    Admin selects duration from quick buttons

    Callback format: tr_duration:{task_report_id}:{duration}
    Example: tr_duration:123:2h
    """
    try:
        parts = callback.data.split(":")
        task_report_id = int(parts[1])
        duration = parts[2]

        bot_logger.info(
            f"üîò Admin {callback.from_user.id} selected duration '{duration}' "
            f"for task report #{task_report_id}"
        )

        # Save to FSM state
        await state.update_data(work_duration=duration)

        # Save to database
        async for session in get_async_session():
            await task_reports_service.update_metadata(
                session=session,
                task_report_id=task_report_id,
                work_duration=duration
            )

        # Check if we're in editing mode
        state_data = await state.get_data()
        editing_mode = state_data.get('editing_mode', False)

        if editing_mode:
            # Return to preview after editing - trigger preview callback
            bot_logger.info(f"üìù Editing mode: returning to preview after duration update")

            # Clear editing mode flag
            await state.update_data(editing_mode=False)

            # Trigger preview_report callback
            from aiogram.types import CallbackQuery as FakeCallback
            fake_callback = type('obj', (object,), {
                'data': f'preview_report:{task_report_id}',
                'from_user': callback.from_user,
                'message': callback.message,
                'answer': callback.answer
            })()

            # Import and call preview handler
            from ..handlers.preview import callback_preview_report
            await callback_preview_report(fake_callback)
            return
        else:
            # Continue to next step (work type selection)
            await state.set_state(TaskReportStates.filling_work_type)

            keyboard = create_work_type_keyboard(task_report_id)

            await callback.message.edit_text(
                f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **{duration}**\n\n"
                f"üöó **–ë—ã–ª –ª–∏ –≤—ã–µ–∑–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É?**",
                reply_markup=keyboard
            )

            await callback.answer()

    except Exception as e:
        bot_logger.error(f"‚ùå Error in duration callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("tr_custom_duration:"))
async def callback_custom_duration(callback: CallbackQuery, state: FSMContext):
    """
    Admin wants to enter custom duration

    Callback format: tr_custom_duration:{task_report_id}
    """
    try:
        try:
            task_report_id = parse_report_id_safely(callback.data)
        except ValueError as e:
            bot_logger.error(f"Invalid report_id in callback: {e}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á—ë—Ç–∞", show_alert=True)
            return

        bot_logger.info(
            f"üìù Admin {callback.from_user.id} requested custom duration "
            f"for task report #{task_report_id}"
        )

        # Update FSM state to expect text input
        await state.set_state(TaskReportStates.filling_duration)
        await state.update_data(awaiting_custom_duration=True)

        await callback.message.edit_text(
            "‚è±Ô∏è **–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã**\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `2 —á–∞—Å–∞`\n"
            "‚Ä¢ `1.5 —á–∞—Å–∞`\n"
            "‚Ä¢ `30 –º–∏–Ω`\n"
            "‚Ä¢ `1 —á–∞—Å 30 –º–∏–Ω`\n\n"
            "–§–æ—Ä–º–∞—Ç: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
            
        )

        await callback.answer()

    except Exception as e:
        bot_logger.error(f"‚ùå Error in custom_duration callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(
    StateFilter(TaskReportStates.filling_duration),
    F.text
)
async def handle_custom_duration(message: Message, state: FSMContext):
    """
    Handle custom duration text input (Russian format like work_journal)

    Expected format: "2 —á–∞—Å–∞", "30 –º–∏–Ω", "1 —á–∞—Å 30 –º–∏–Ω", "1.5 —á–∞—Å–∞"
    """
    try:
        state_data = await state.get_data()

        # Check if we're expecting custom duration input
        if not state_data.get("awaiting_custom_duration"):
            return

        task_report_id = state_data.get("task_report_id")
        text = message.text.strip()

        # Parse duration (same logic as work_journal/text_handlers.py:167-286)
        text_lower = text.lower()
        duration_minutes = None

        # –§–æ—Ä–º–∞—Ç "2 —á–∞—Å–∞", "1 —á–∞—Å", "—á–∞—Å"
        hour_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:—á|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|hours?)', text_lower)
        # –§–æ—Ä–º–∞—Ç "30 –º–∏–Ω", "–º–∏–Ω—É—Ç"
        min_match = re.search(r'(\d+)\s*(?:–º–∏–Ω|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç–∞|minutes?)', text_lower)

        if hour_match and min_match:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã: "1 —á–∞—Å 30 –º–∏–Ω"
            hours = float(hour_match.group(1))
            minutes = int(min_match.group(1))
            duration_minutes = int(hours * 60) + minutes
        elif hour_match:
            # –¢–æ–ª—å–∫–æ —á–∞—Å—ã: "2.5 —á–∞—Å–∞", "1 —á–∞—Å"
            hours = float(hour_match.group(1))
            duration_minutes = int(hours * 60)
        elif min_match:
            # –¢–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã: "45 –º–∏–Ω"
            duration_minutes = int(min_match.group(1))
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã)
            try:
                duration_minutes = int(text)
            except ValueError:
                await message.reply(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚Ä¢ `2 —á–∞—Å–∞`\n"
                    "‚Ä¢ `30 –º–∏–Ω`\n"
                    "‚Ä¢ `1 —á–∞—Å 30 –º–∏–Ω`",
                    
                )
                return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if duration_minutes <= 0:
            await message.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç")
            return

        if duration_minutes > 1440:  # 24 —á–∞—Å–∞
            await message.reply("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if duration_minutes < 60:
            formatted_duration = f"{duration_minutes} –º–∏–Ω"
        else:
            hours = duration_minutes // 60
            minutes = duration_minutes % 60
            if minutes == 0:
                formatted_duration = f"{hours} —á"
            else:
                formatted_duration = f"{hours} —á {minutes} –º–∏–Ω"

        bot_logger.info(
            f"üìù Admin {message.from_user.id} entered custom duration '{formatted_duration}' "
            f"for task report #{task_report_id}"
        )

        # Save to FSM state
        await state.update_data(
            work_duration=formatted_duration,
            awaiting_custom_duration=False
        )

        # Save to database
        async for session in get_async_session():
            await task_reports_service.update_metadata(
                session=session,
                task_report_id=task_report_id,
                work_duration=formatted_duration
            )

        # Check if we're in editing mode
        editing_mode = state_data.get('editing_mode', False)

        if editing_mode:
            # Return to preview after editing
            bot_logger.info(f"üìù Editing mode: returning to preview after custom duration update")

            # Clear editing mode flag
            await state.update_data(editing_mode=False)

            # Trigger preview_report callback
            from aiogram.types import CallbackQuery as FakeCallback
            from ..handlers.preview import callback_preview_report

            # Create a fake message with reply method
            fake_message = type('obj', (object,), {
                'edit_text': message.answer,
                'reply': message.reply,
                'answer': message.answer,
                'chat': message.chat,
                'from_user': message.from_user
            })()

            fake_callback = type('obj', (object,), {
                'data': f'preview_report:{task_report_id}',
                'from_user': message.from_user,
                'message': fake_message,
                'answer': lambda text='', show_alert=False: None  # Dummy answer
            })()

            await callback_preview_report(fake_callback, state)
            return
        else:
            # Continue to next step (work type selection)
            await state.set_state(TaskReportStates.filling_work_type)

            # Show work type keyboard
            keyboard = create_work_type_keyboard(task_report_id)

            await message.reply(
                f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **{formatted_duration}**\n\n"
                f"üöó **–ë—ã–ª –ª–∏ –≤—ã–µ–∑–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É?**",
                reply_markup=keyboard
            )

    except Exception as e:
        bot_logger.error(f"‚ùå Error handling custom duration: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
