"""
Task Reports Preview Handlers

Handlers for previewing completed reports before sending
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from ..utils import parse_report_id_safely
from ....database.database import get_async_session
from ....services.task_reports_service import task_reports_service
from ....utils.logger import bot_logger
import json


router = Router(name="task_reports_preview")


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CALLBACK: PREVIEW REPORT
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("preview_report:"))
async def callback_preview_report(callback: CallbackQuery):
    """
    Show preview of auto-generated report
    """
    try:
        try:
            task_report_id = parse_report_id_safely(callback.data)
        except ValueError as e:
            bot_logger.error(f"Invalid report_id in callback: {e}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á—ë—Ç–∞", show_alert=True)
            return

        async for session in get_async_session():
            task_report = await task_reports_service.get_task_report(session, task_report_id)

            if not task_report:
                await callback.answer("‚ùå –û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            if not task_report.report_text:
                await callback.answer("‚ùå –û—Ç—á—ë—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω", show_alert=True)
                return

            # Show report preview with metadata
            preview = task_report.report_text[:2000] if task_report.report_text else "‚ö†Ô∏è –û—Ç—á—ë—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω"
            if task_report.report_text and len(task_report.report_text) > 2000:
                preview += "\n\n[...]"

            has_client = bool(task_report.client_chat_id)

            # Format metadata
            metadata_text = "\n**–ú–ï–¢–ê–î–ê–ù–ù–´–ï –†–ê–ë–û–¢–´:**\n"

            if task_report.work_duration:
                metadata_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **{task_report.work_duration}**\n"
            else:
                metadata_text += "‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ‚ö†Ô∏è _–ù–µ —É–∫–∞–∑–∞–Ω–æ_\n"

            if task_report.is_travel is not None:
                metadata_text += f"üöó –¢–∏–ø —Ä–∞–±–æ—Ç—ã: **{'–í—ã–µ–∑–¥' if task_report.is_travel else '–£–¥–∞–ª—ë–Ω–Ω–æ'}**\n"
            else:
                metadata_text += "üöó –¢–∏–ø —Ä–∞–±–æ—Ç—ã: ‚ö†Ô∏è _–ù–µ —É–∫–∞–∑–∞–Ω–æ_\n"

            if task_report.company:
                metadata_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: **{task_report.company}**\n"
            else:
                metadata_text += "üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ‚ö†Ô∏è _–ù–µ —É–∫–∞–∑–∞–Ω–æ_\n"

            if task_report.workers:
                try:
                    workers_list = json.loads(task_report.workers)
                    workers_display = ", ".join(workers_list)
                except:
                    workers_display = task_report.workers
                metadata_text += f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: **{workers_display}**\n"
            else:
                metadata_text += "üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: ‚ö†Ô∏è _–ù–µ —É–∫–∞–∑–∞–Ω–æ_\n"

            # Build keyboard based on client availability
            keyboard_buttons = []
            if has_client:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
                        callback_data=f"approve_send:{task_report_id}"
                    )
                ])
            else:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)",
                        callback_data=f"approve_only:{task_report_id}"
                    )
                ])

            keyboard_buttons.extend([
                [InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"edit_report:{task_report_id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_report:{task_report_id}"
                )]
            ])

            await callback.message.edit_text(
                f"üëÅÔ∏è **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–∞**\n\n"
                f"**–ó–∞–¥–∞—á–∞:** #{task_report.plane_sequence_id}\n"
                f"**–ö–ª–∏–µ–Ω—Ç:** {'‚úÖ –ï—Å—Ç—å' if has_client else '‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏'}\n\n"
                f"{metadata_text}\n"
                f"**–û–¢–ß–Å–¢ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê:**\n{preview}\n\n"
                f"_–ö–ª–∏–µ–Ω—Ç—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ (–±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)_",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            )

            await callback.answer()

    except Exception as e:
        bot_logger.error(f"‚ùå Error in preview_report callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
