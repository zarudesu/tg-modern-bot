"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö work_journal
–ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–∏–ª—å—Ç—Ä IsWorkJournalActiveFilter –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
"""

from aiogram import Router, F
from aiogram.types import Message
from datetime import date, datetime

from .filters import IsWorkJournalActiveFilter
from ...database.database import get_async_session
from ...services.work_journal_service import WorkJournalService
from ...utils.work_journal_constants import WorkJournalState, MESSAGE_TEMPLATES
from ...utils.work_journal_keyboards import (
    create_company_selection_keyboard,
    create_duration_selection_keyboard,
    create_description_input_keyboard,
    create_travel_selection_keyboard,
    create_confirmation_keyboard
)
from ...utils.work_journal_formatters import (
    escape_markdown_v2,
    format_draft_confirmation,
    format_error_message
)
from ...utils.logger import bot_logger

router = Router()


@router.message(F.text, IsWorkJournalActiveFilter())
async def handle_work_journal_text_input(message: Message):
    """
    –ì–õ–ê–í–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è work_journal
    
    –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö:
    - –ù–ï idle
    - –ù–ï None
    - –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ work_journal
    
    –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    """
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        bot_logger.info(f"Work journal text input: '{text}' from user {user_id}")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            user_state = await service.get_user_state(user_id)
            
            if not user_state or not user_state.current_state:
                bot_logger.warning(f"No active work_journal state for user {user_id}")
                return
            
            current_state = user_state.current_state
            bot_logger.info(f"Processing work_journal state: {current_state} for user {user_id}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if current_state == WorkJournalState.ENTERING_CUSTOM_DATE.value:
                await handle_custom_date_input(message, session, service, text)
            
            elif current_state == WorkJournalState.ENTERING_CUSTOM_COMPANY.value:
                await handle_custom_company_input(message, session, service, text)
            
            elif current_state == WorkJournalState.ENTERING_CUSTOM_DURATION.value:
                await handle_custom_duration_input(message, session, service, text)
            
            elif current_state == WorkJournalState.ENTERING_DESCRIPTION.value:
                await handle_description_input(message, session, service, text)
            
            elif current_state == WorkJournalState.ENTERING_CUSTOM_WORKER.value:
                await handle_custom_worker_input(message, session, service, text)
            
            else:
                bot_logger.warning(f"Unknown work_journal state: {current_state} for user {user_id}")
                # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                # (–º–æ–∂–µ—Ç –±—ã—Ç—å state –æ—Ç –¥—Ä—É–≥–æ–≥–æ –º–æ–¥—É–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä task_reports)
                return
            
    except Exception as e:
        bot_logger.error(f"Error in work_journal text handler for user {message.from_user.id}: {e}")
        await message.answer(
            format_error_message("general"),
            parse_mode="MarkdownV2"
        )


async def handle_custom_date_input(
    message: Message,
    session,
    service: WorkJournalService,
    text: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        user_id = message.from_user.id
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        parsed_date = datetime.strptime(text, "%d.%m.%Y").date()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–µ–µ
        today = date.today()
        max_date = date(today.year + 1, 12, 31)  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥
        
        if parsed_date > max_date:
            max_date_str = max_date.strftime('%d\\.%m\\.%Y')
            await message.answer(
                f"‚ùå *–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∞—è –¥–∞—Ç–∞*\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {max_date_str}",
                parse_mode="MarkdownV2"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
        await service.set_user_state(
            user_id,
            WorkJournalState.SELECTING_COMPANY,
            draft_date=parsed_date
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
        companies = await service.get_companies()
        
        await message.answer(
            MESSAGE_TEMPLATES['company_selection'],
            reply_markup=create_company_selection_keyboard(companies),
            parse_mode="MarkdownV2"
        )
        
    except ValueError:
        today = date.today()
        today_str = today.strftime('%d\\.%m\\.%Y')
        await message.answer(
            f"‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\\.–ú–ú\\.–ì–ì–ì–ì \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: {today_str}\\)",
            parse_mode="MarkdownV2"
        )


async def handle_custom_company_input(
    message: Message,
    session,
    service: WorkJournalService,
    text: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
    await service.add_company(text)
    
    await service.set_user_state(
        user_id,
        WorkJournalState.SELECTING_DURATION,
        draft_company=text
    )
    
    await message.answer(
        MESSAGE_TEMPLATES['duration_selection'],
        reply_markup=create_duration_selection_keyboard(),
        parse_mode="MarkdownV2"
    )


async def handle_custom_duration_input(
    message: Message,
    session,
    service: WorkJournalService,
    text: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        text_lower = text.lower().strip()
        duration_minutes = None
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        import re
        
        # –§–æ—Ä–º–∞—Ç "2 —á–∞—Å–∞", "1 —á–∞—Å", "—á–∞—Å"
        hour_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:—á|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|hours?)', text_lower)
        # –§–æ—Ä–º–∞—Ç "30 –º–∏–Ω", "–º–∏–Ω—É—Ç"  
        min_match = re.search(r'(\d+)\s*(?:–º–∏–Ω|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç–∞|minutes?)', text_lower)
        
        if hour_match and min_match:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã: "1 —á–∞—Å 30 –º–∏–Ω"
            hours = float(hour_match.group(1))
            minutes = int(min_match.group(1))
            duration_minutes = int(hours * 60) + minutes
        elif hour_match:
            # –¢–æ–ª—å–∫–æ —á–∞—Å—ã: "2.5 —á–∞—Å–∞", "1 —á–∞—Å"
            hours = float(hour_match.group(1))
            duration_minutes = int(hours * 60)
        elif min_match:
            # –¢–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã: "45 –º–∏–Ω"
            duration_minutes = int(min_match.group(1))
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã)
            duration_minutes = int(text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if duration_minutes <= 0:
            await message.answer(
                "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è*\n\n–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç\\.",
                parse_mode="MarkdownV2"
            )
            return
        
        if duration_minutes > 1440:  # 24 —á–∞—Å–∞
            await message.answer(
                "‚ùå *–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏*\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 1440 –º–∏–Ω—É—Ç \\(24 —á–∞—Å–∞\\)\\.",
                parse_mode="MarkdownV2"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—á–∏—Å–ª–æ <= 13 –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å–∞–º–∏)
        if text.isdigit() and int(text) <= 13:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            from ...utils.work_journal_keyboards import InlineKeyboardBuilder, InlineKeyboardButton, build_callback_data, CallbackAction
            
            builder = InlineKeyboardBuilder()
            
            # –û–ø—Ü–∏—è: –º–∏–Ω—É—Ç—ã
            builder.row(
                InlineKeyboardButton(
                    text=f"‚úÖ {duration_minutes} –º–∏–Ω—É—Ç",
                    callback_data=build_callback_data(CallbackAction.SELECT_DURATION, f"{duration_minutes} –º–∏–Ω")
                )
            )
            
            # –û–ø—Ü–∏—è: —á–∞—Å—ã (–µ—Å–ª–∏ <= 13)
            if int(text) <= 13:
                hours_minutes = int(text) * 60
                hours_text = f"{text} —á" if int(text) == 1 else f"{text} —á"
                builder.row(
                    InlineKeyboardButton(
                        text=f"üïí {hours_text} ({hours_minutes} –º–∏–Ω)",
                        callback_data=build_callback_data(CallbackAction.SELECT_DURATION, hours_text)
                    )
                )
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            builder.row(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=build_callback_data(CallbackAction.BACK)),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=build_callback_data(CallbackAction.CANCEL))
            )
            
            await message.answer(
                f"ü§î *–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è*\n\n–í—ã –≤–≤–µ–ª–∏: **{text}**\n\n–ß—Ç–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É?",
                reply_markup=builder.as_markup(),
                parse_mode="MarkdownV2"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if duration_minutes < 60:
            formatted_duration = f"{duration_minutes} –º–∏–Ω"
        else:
            hours = duration_minutes // 60
            minutes = duration_minutes % 60
            if minutes == 0:
                formatted_duration = f"{hours} —á"
            else:
                formatted_duration = f"{hours} —á {minutes} –º–∏–Ω"
        
        await service.set_user_state(
            user_id,
            WorkJournalState.ENTERING_DESCRIPTION,
            draft_duration=formatted_duration
        )
        
        await message.answer(
            MESSAGE_TEMPLATES['description_input'],
            reply_markup=create_description_input_keyboard(),
            parse_mode="MarkdownV2"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö \\(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ\\)\n\n–ü—Ä–∏–º–µ—Ä: 60, 120, 180",
            parse_mode="MarkdownV2"
        )


async def handle_description_input(
    message: Message,
    session,
    service: WorkJournalService,
    text: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç"""
    user_id = message.from_user.id
    
    await service.set_user_state(
        user_id,
        WorkJournalState.SELECTING_TRAVEL,
        draft_description=text
    )
    
    await message.answer(
        MESSAGE_TEMPLATES['travel_selection'],
        reply_markup=create_travel_selection_keyboard(),
        parse_mode="MarkdownV2"
    )


async def handle_custom_worker_input(
    message: Message,
    session,
    service: WorkJournalService,
    text: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await service.add_worker(text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
    user_state = await service.get_user_state(user_id)
    current_workers = user_state.draft_workers or []
    if text not in current_workers:
        current_workers.append(text)
    
    await service.set_user_state(
        user_id,
        WorkJournalState.CONFIRMING_ENTRY,
        draft_workers=current_workers
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_state = await service.get_user_state(user_id)
    confirmation_text = format_draft_confirmation(user_state)
    
    await message.answer(
        confirmation_text,
        reply_markup=create_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
