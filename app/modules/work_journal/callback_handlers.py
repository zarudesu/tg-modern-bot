"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç - –ü–û–õ–ù–ê–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from datetime import date, timedelta
from sqlalchemy.ext.asyncio import AsyncSession

from ...database.database import get_async_session
from ...services.work_journal_service import WorkJournalService
from ...utils.work_journal_constants import (
    WorkJournalState, 
    CallbackAction, 
    MESSAGE_TEMPLATES
)
from ...utils.work_journal_keyboards import (
    parse_callback_data,
    create_date_selection_keyboard,
    create_company_selection_keyboard,
    create_duration_selection_keyboard,
    create_travel_selection_keyboard,
    create_worker_selection_keyboard,
    create_confirmation_keyboard,
    create_description_keyboard,
    create_description_input_keyboard,
    create_continue_keyboard,
    create_history_menu_keyboard,
    create_report_menu_keyboard,
    create_back_cancel_keyboard,
    build_callback_data
)
from ...utils.work_journal_formatters import (
    format_date_for_display,
    format_draft_confirmation,
    format_error_message,
    format_success_message
)
from ...utils.logger import bot_logger

router = Router()


@router.callback_query(F.data.startswith("wj:"))
async def handle_journal_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç"""
    try:
        user_id = callback.from_user.id
        action, data = parse_callback_data(callback.data)
        bot_logger.info(f"üìã Callback action: '{action}', data: '{data}' (expecting toggle_work={CallbackAction.TOGGLE_WORKER.value})")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            user_state = await service.get_user_state(user_id)
            
            if not user_state:
                await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /journal", show_alert=True)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ç–∏–ø—É
            if action == CallbackAction.CONTINUE.value:
                await handle_continue_action(callback, session, service, user_state)
            
            elif action == CallbackAction.SELECT_TODAY.value:
                await handle_date_selection(callback, session, service, date.today())
            
            elif action == CallbackAction.SELECT_YESTERDAY.value:
                yesterday = date.today() - timedelta(days=1)
                await handle_date_selection(callback, session, service, yesterday)
            
            elif action == CallbackAction.SELECT_CUSTOM_DATE.value:
                await handle_custom_date_request(callback, session, service)
            
            elif action == CallbackAction.SELECT_DATE.value:
                await handle_return_to_date_selection(callback, session, service)
            
            elif action == CallbackAction.SELECT_COMPANY.value:
                await handle_company_selection(callback, session, service, data)
            
            elif action == CallbackAction.ADD_CUSTOM_COMPANY.value:
                await handle_custom_company_request(callback, session, service)
            
            elif action == CallbackAction.SELECT_DURATION.value:
                await handle_duration_selection(callback, session, service, data)
            
            elif action == CallbackAction.ADD_CUSTOM_DURATION.value:
                await handle_custom_duration_request(callback, session, service)
            
            elif action == CallbackAction.SELECT_TRAVEL_YES.value:
                await handle_travel_selection(callback, session, service, True)
            
            elif action == CallbackAction.SELECT_TRAVEL_NO.value:
                await handle_travel_selection(callback, session, service, False)
            
            elif action == CallbackAction.TOGGLE_WORKER.value:
                bot_logger.info(f"üîß TOGGLE_WORKER action: data='{data}' for user {user_id}")
                await handle_toggle_worker(callback, session, service, data)
            
            elif action == CallbackAction.CONFIRM_WORKERS.value:
                await handle_confirm_workers(callback, session, service)
            
            elif action == CallbackAction.SELECT_WORKER.value:
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
                await handle_single_worker_selection(callback, session, service, data)
            
            elif action == CallbackAction.CONFIRM_SAVE.value:
                await handle_confirm_save(callback, session, service, user_state)
            
            elif action == CallbackAction.CANCEL.value:
                await handle_cancel_action(callback, session, service)
            
            elif action == CallbackAction.BACK.value:
                await handle_back_action(callback, session, service, user_state)
            
            else:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
    except Exception as e:
        bot_logger.error(f"Error handling journal callback {callback.data} for user {user_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


async def handle_continue_action(
    callback: CallbackQuery,
    session: AsyncSession, 
    service: WorkJournalService,
    user_state
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"""
    if user_state.current_state == WorkJournalState.SELECTING_DATE.value:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
        companies = await service.get_companies()
        
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_COMPANY
        )
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['company_selection'],
            reply_markup=create_company_selection_keyboard(companies),
            parse_mode="MarkdownV2"
        )
        
        await callback.answer()
    
    elif user_state.current_state == WorkJournalState.ENTERING_DESCRIPTION.value:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–∞–ª–µ–µ" –±–µ–∑ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
        if not user_state.draft_description:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç!", show_alert=True)
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç (–≤—ã–µ–∑–¥/—É–¥–∞–ª–µ–Ω–Ω–æ)
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_TRAVEL
        )
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['travel_selection'],
            reply_markup=create_travel_selection_keyboard(),
            parse_mode="MarkdownV2"
        )
        
        await callback.answer()


async def handle_date_selection(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    selected_date: date
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.SELECTING_COMPANY,
        draft_date=selected_date
    )
    
    companies = await service.get_companies()
    
    await callback.message.edit_text(
        MESSAGE_TEMPLATES['company_selection'],
        reply_markup=create_company_selection_keyboard(companies),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {format_date_for_display(selected_date)}")


async def handle_company_selection(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    company: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.SELECTING_DURATION,
        draft_company=company
    )
    
    await callback.message.edit_text(
        MESSAGE_TEMPLATES['duration_selection'],
        reply_markup=create_duration_selection_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company}")


async def handle_duration_selection(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    duration: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.ENTERING_DESCRIPTION,
        draft_duration=duration
    )
    
    await callback.message.edit_text(
        MESSAGE_TEMPLATES['description_input'],
        reply_markup=create_description_input_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {duration}")


async def handle_travel_selection(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    is_travel: bool
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç (–≤—ã–µ–∑–¥/—É–¥–∞–ª–µ–Ω–Ω–æ)"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.SELECTING_WORKER,
        draft_is_travel=is_travel
    )
    
    workers = await service.get_workers()
    
    await callback.message.edit_text(
        MESSAGE_TEMPLATES['worker_selection'],
        reply_markup=create_worker_selection_keyboard(workers),
        parse_mode="MarkdownV2"
    )
    
    travel_type = "–í—ã–µ–∑–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É" if is_travel else "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ: {travel_type}")


async def handle_toggle_worker(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    worker_name: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    user_state = await service.get_user_state(callback.from_user.id)
    
    if not user_state:
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    current_workers = user_state.get_draft_workers() if hasattr(user_state, 'get_draft_workers') else []
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    new_workers_list = list(current_workers)
    
    if worker_name in new_workers_list:
        # –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        new_workers_list.remove(worker_name)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        new_workers_list.append(worker_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (—Ç–∞–º –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.SELECTING_WORKER,
        draft_workers=new_workers_list
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    workers = await service.get_workers()
    
    try:
        await callback.message.edit_reply_markup(
            reply_markup=create_worker_selection_keyboard(workers, selected_workers=new_workers_list)
        )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
        if "message is not modified" not in str(e):
            raise e
    
    action = "–¥–æ–±–∞–≤–ª–µ–Ω" if worker_name in new_workers_list else "—É–±—Ä–∞–Ω"
    await callback.answer(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {worker_name} {action}")


async def handle_confirm_workers(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    user_state = await service.get_user_state(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    selected_workers = user_state.get_draft_workers() if (user_state and hasattr(user_state, 'get_draft_workers')) else []
    
    if not user_state or not selected_workers:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.CONFIRMING_ENTRY
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = format_draft_confirmation(user_state)
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=create_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    workers_count = len(selected_workers)
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {workers_count}")


async def handle_single_worker_selection(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    worker_name: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.CONFIRMING_ENTRY,
        draft_workers=[worker_name]
    )
    
    user_state = await service.get_user_state(callback.from_user.id)
    confirmation_text = format_draft_confirmation(user_state)
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=create_confirmation_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer(f"–í—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker_name}")


async def handle_confirm_save(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    user_state
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ draft —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_state = await service.get_user_state(callback.from_user.id)
        if not user_state:
            raise Exception("User state not found")
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∑–∞–ø–∏—Å–∏
        from ...database.models import BotUser
        from sqlalchemy import select
        import json
        
        result = await session.execute(
            select(BotUser).where(BotUser.telegram_user_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            creator_name = f"@{user.username}" if user.username else (user.first_name or f"User_{callback.from_user.id}")
            user_email = f"{user.username}@example.com" if user.username else f"user_{callback.from_user.id}@telegram.bot"
        else:
            creator_name = f"User_{callback.from_user.id}"
            user_email = f"user_{callback.from_user.id}@telegram.bot"
        
        # –ü–∞—Ä—Å–∏–º worker_names –∏–∑ JSON
        try:
            worker_names = json.loads(user_state.draft_workers) if user_state.draft_workers else []
            if not worker_names:
                await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!", show_alert=True)
                return
        except (json.JSONDecodeError, TypeError):
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!", show_alert=True)
            return
        
        entry = await service.create_work_entry(
            telegram_user_id=callback.from_user.id,
            user_email=user_email,
            work_date=user_state.draft_date,
            company=user_state.draft_company,
            work_duration=user_state.draft_duration,
            work_description=user_state.draft_description,
            is_travel=user_state.draft_is_travel,
            worker_names=worker_names,
            created_by_user_id=callback.from_user.id,
            created_by_name=creator_name
        )
        
        if entry:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await service.clear_user_state(callback.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n
            try:
                from ...services.n8n_integration_service import N8nIntegrationService
                
                user_data = {
                    "first_name": user.first_name if user else callback.from_user.first_name,
                    "username": user.username if user else callback.from_user.username
                }
                
                n8n_service = N8nIntegrationService()
                bot_logger.info(f"Attempting to send entry {entry.id} to n8n with webhook URL: {n8n_service.webhook_url}")
                success = await n8n_service.send_with_retry(entry, user_data, session)
                if success:
                    bot_logger.info(f"‚úÖ Successfully sent entry {entry.id} to n8n")
                else:
                    bot_logger.error(f"‚ùå Failed to send entry {entry.id} to n8n after retries")
                
            except Exception as e:
                bot_logger.error(f"Error sending to n8n for entry {entry.id}: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            try:
                from ...services.worker_mention_service import WorkerMentionService
                from ...config import settings
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                if settings.work_journal_group_chat_id:
                    bot_logger.info(f"Attempting to send group notification for entry {entry.id} to chat {settings.work_journal_group_chat_id}")
                    mention_service = WorkerMentionService(session, callback.bot)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
                    success, errors = await mention_service.send_work_assignment_notifications(
                        entry, creator_name, settings.work_journal_group_chat_id
                    )
                    
                    if success:
                        bot_logger.info(f"‚úÖ Successfully sent group notification for entry {entry.id}")
                    
                    if errors:
                        for error in errors[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –æ—à–∏–±–∫–∏
                            bot_logger.warning(f"Group mention notification error: {error}")
                else:
                    bot_logger.warning("WORK_JOURNAL_GROUP_CHAT_ID not configured - skipping group notification")
                            
            except Exception as e:
                bot_logger.error(f"Error sending group mention notifications: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            
            success_text = format_success_message(entry)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            await callback.message.edit_text(
                success_text,
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            
            await callback.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        else:
            await callback.message.edit_text(
                format_error_message("save"),
                parse_mode="MarkdownV2"
            )
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        bot_logger.error(f"Error saving entry for user {callback.from_user.id}: {e}")
        await callback.message.edit_text(
            format_error_message("general"),
            parse_mode="MarkdownV2"
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_cancel_action(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await service.clear_user_state(callback.from_user.id)
    
    await callback.message.edit_text(
        "‚ùå *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n–î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/journal`",
        parse_mode="MarkdownV2"
    )
    
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


async def handle_back_action(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService,
    user_state
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
    current_state = WorkJournalState(user_state.current_state)
    
    if current_state == WorkJournalState.SELECTING_COMPANY:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_DATE,
            draft_date=user_state.draft_date
        )
        
        await callback.message.edit_text(
            f"{MESSAGE_TEMPLATES['start_entry']}\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–±–æ—Ç:",
            reply_markup=create_date_selection_keyboard(),
            parse_mode="MarkdownV2"
        )
        
    elif current_state == WorkJournalState.SELECTING_DURATION:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_COMPANY,
            draft_company=user_state.draft_company
        )
        
        companies = await service.get_companies()
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['company_selection'],
            reply_markup=create_company_selection_keyboard(companies),
            parse_mode="MarkdownV2"
        )
        
    elif current_state == WorkJournalState.ENTERING_CUSTOM_DURATION:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_DURATION,
            draft_duration=user_state.draft_duration
        )
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['duration_selection'],
            reply_markup=create_duration_selection_keyboard(),
            parse_mode="MarkdownV2"
        )
        
    elif current_state == WorkJournalState.ENTERING_DESCRIPTION:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_DURATION,
            draft_duration=user_state.draft_duration
        )
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['duration_selection'],
            reply_markup=create_duration_selection_keyboard(),
            parse_mode="MarkdownV2"
        )
        
    elif current_state == WorkJournalState.SELECTING_TRAVEL:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.ENTERING_DESCRIPTION,
            draft_description=user_state.draft_description
        )
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['description_prompt'],
            reply_markup=create_description_keyboard(),
            parse_mode="MarkdownV2"
        )
        
    elif current_state == WorkJournalState.SELECTING_WORKER:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_TRAVEL,
            draft_is_travel=user_state.draft_is_travel
        )
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['travel_selection'],
            reply_markup=create_travel_selection_keyboard(),
            parse_mode="MarkdownV2"
        )
        
    elif current_state == WorkJournalState.CONFIRMING_ENTRY:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        current_workers = user_state.get_draft_workers() if hasattr(user_state, 'get_draft_workers') else []
        
        await service.set_user_state(
            callback.from_user.id,
            WorkJournalState.SELECTING_WORKER,
            draft_workers=current_workers
        )
        
        workers = await service.get_workers()
        
        await callback.message.edit_text(
            MESSAGE_TEMPLATES['worker_selection'],
            reply_markup=create_worker_selection_keyboard(workers, selected_workers=current_workers),
            parse_mode="MarkdownV2"
        )
    
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É")


async def handle_custom_date_request(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç—ã"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.ENTERING_CUSTOM_DATE
    )
    
    await callback.message.edit_text(
        MESSAGE_TEMPLATES['custom_date_prompt'],
        reply_markup=create_back_cancel_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")


async def handle_return_to_date_selection(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.SELECTING_DATE
    )
    
    await callback.message.edit_text(
        f"{MESSAGE_TEMPLATES['start_entry']}\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–±–æ—Ç:",
        reply_markup=create_date_selection_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer("–í—ã–±–æ—Ä –¥–∞—Ç—ã")


async def handle_custom_company_request(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.ENTERING_CUSTOM_COMPANY
    )
    
    await callback.message.edit_text(
        MESSAGE_TEMPLATES['custom_company_prompt'],
        reply_markup=create_back_cancel_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")


async def handle_custom_duration_request(
    callback: CallbackQuery,
    session: AsyncSession,
    service: WorkJournalService
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await service.set_user_state(
        callback.from_user.id,
        WorkJournalState.ENTERING_CUSTOM_DURATION
    )
    
    await callback.message.edit_text(
        MESSAGE_TEMPLATES['custom_duration_prompt'],
        reply_markup=create_back_cancel_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
@router.callback_query(F.data == "start_journal")
async def callback_start_journal_from_menu(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ journal –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await callback.answer("üìã –û—Ç–∫—Ä—ã–≤–∞—é –∂—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /journal
        user_id = callback.from_user.id
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ
            await service.set_user_state(
                user_id,
                WorkJournalState.SELECTING_DATE,
                draft_date=date.today()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            start_text = (
                f"{MESSAGE_TEMPLATES['start_entry']}\n\n"
                f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–±–æ—Ç:"
            )
            
            await callback.message.edit_text(
                start_text,
                reply_markup=create_date_selection_keyboard(),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error in start_journal callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞")


@router.callback_query(F.data == "show_history")
async def callback_show_history_from_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await callback.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /history - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
        await callback.message.edit_text(
            "üìä *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/history` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç\\.",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error in show_history callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")


@router.callback_query(F.data == "show_reports")
async def callback_show_reports_from_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await callback.answer("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç—ã...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /report - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
        await callback.message.edit_text(
            "üìà *–û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–∞–º*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/report` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤\\.",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error in show_reports callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤")


@router.callback_query(F.data == "manage_companies")
async def callback_manage_companies_from_menu(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await callback.answer("üè¢ –ó–∞–≥—Ä—É–∂–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /companies - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
        await callback.message.edit_text(
            "üè¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/companies` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏\\.",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error in manage_companies callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏")
