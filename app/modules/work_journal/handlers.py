"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–æ–¥—É–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from datetime import date, timedelta

from ...database.database import get_async_session
from ...services.work_journal_service import WorkJournalService
from ...utils.work_journal_constants import WorkJournalState, MESSAGE_TEMPLATES
from ...utils.work_journal_keyboards import (
    create_date_selection_keyboard,
    create_history_menu_keyboard,
    create_report_menu_keyboard
)
from ...utils.work_journal_formatters import (
    escape_markdown_v2,
    format_entries_list,
    format_statistics_report,
    format_error_message
)
from ...utils.logger import bot_logger, log_user_action

router = Router()


@router.message(Command("journal", "work_journal"))
async def start_journal_entry(message: Message):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞–±–æ—Ç"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "start_journal")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ
            await service.set_user_state(
                user_id,
                WorkJournalState.SELECTING_DATE,
                draft_date=date.today()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            start_text = (
                f"{MESSAGE_TEMPLATES['start_entry']}\n\n"
                f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–±–æ—Ç:"
            )
            
            await message.answer(
                start_text,
                reply_markup=create_date_selection_keyboard(),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error starting journal entry for user {user_id}: {e}")
        await message.answer(
            format_error_message("general"),
            parse_mode="MarkdownV2"
        )


@router.message(Command("companies", "manage_companies"))
async def manage_companies(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "manage_companies")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
            companies = await service.get_companies()
            
            if not companies:
                companies_text = (
                    "üè¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏*\n\n"
                    "‚ùå –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø—É—Å—Ç\\.\n\n"
                    "–ö–æ–º–ø–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π\\."
                )
            else:
                companies_text = "üè¢ *–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π:*\n\n"
                for i, company in enumerate(companies, 1):
                    escaped_company = escape_markdown_v2(company)
                    companies_text += f"{i}\\. {escaped_company}\n"
                
                companies_text += (
                    f"\n*–í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π:* {len(companies)}\n\n"
                    f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    f"`/delete_company –ù–∞–∑–≤–∞–Ω–∏–µ`"
                )
            
            await message.answer(
                companies_text,
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error managing companies for user {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π\\.")


@router.message(Command("delete_company"))
async def delete_company(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        user_id = message.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2:
            await message.answer(
                "‚ùå *–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏*\n\n–ü—Ä–∏–º–µ—Ä: `/delete_company Test`\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞: `/companies`",
                parse_mode="MarkdownV2"
            )
            return
        
        company_name = command_parts[1].strip()
        log_user_action(user_id, f"delete_company_{company_name}")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è
            companies = await service.get_companies()
            if company_name not in companies:
                await message.answer(
                    f"‚ùå *–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\n–ö–æ–º–ø–∞–Ω–∏—è \"{escape_markdown_v2(company_name)}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ\\.",
                    parse_mode="MarkdownV2"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π
            entries_count = await service.count_entries_by_company(company_name)
            
            if entries_count > 0:
                await message.answer(
                    f"‚ö†Ô∏è *–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é*\n\n"
                    f"–ö–æ–º–ø–∞–Ω–∏—è \"{escape_markdown_v2(company_name)}\" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {entries_count} –∑–∞–ø–∏—Å—è—Ö\\.\n\n"
                    f"–î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏:\n"
                    f"`/force_delete_company {company_name}`",
                    parse_mode="MarkdownV2"
                )
                return
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            success = await service.delete_company(company_name)
            
            if success:
                await message.answer(
                    f"‚úÖ *–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞*\n\n–ö–æ–º–ø–∞–Ω–∏—è \"{escape_markdown_v2(company_name)}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\\.",
                    parse_mode="MarkdownV2"
                )
                log_user_action(user_id, f"deleted_company_{company_name}")
            else:
                await message.answer(
                    f"‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ \"{escape_markdown_v2(company_name)}\"\\.",
                    parse_mode="MarkdownV2"
                )
                
    except Exception as e:
        bot_logger.error(f"Error deleting company for user {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏\\.")


@router.message(Command("force_delete_company"))
async def force_delete_company(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏"""
    try:
        user_id = message.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2:
            await message.answer(
                "‚ùå *–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏*\n\n"
                "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\\!* –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç –∫–æ–º–ø–∞–Ω–∏—é –∏ –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏\\!\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/force_delete_company Test`",
                parse_mode="MarkdownV2"
            )
            return
        
        company_name = command_parts[1].strip()
        log_user_action(user_id, f"force_delete_company_{company_name}")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è
            companies = await service.get_companies()
            if company_name not in companies:
                await message.answer(
                    f"‚ùå *–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\n–ö–æ–º–ø–∞–Ω–∏—è \"{escape_markdown_v2(company_name)}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ\\.",
                    parse_mode="MarkdownV2"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            entries_count = await service.count_entries_by_company(company_name)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            success = await service.force_delete_company_with_entries(company_name)
            
            if success:
                if entries_count > 0:
                    await message.answer(
                        f"‚úÖ *–ö–æ–º–ø–∞–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã*\n\n"
                        f"–ö–æ–º–ø–∞–Ω–∏—è \"{escape_markdown_v2(company_name)}\" —É–¥–∞–ª–µ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å *{entries_count}* –∑–∞–ø–∏—Å—è–º–∏\\.",
                        parse_mode="MarkdownV2"
                    )
                    log_user_action(user_id, f"force_deleted_company_{company_name}_with_{entries_count}_entries")
                else:
                    await message.answer(
                        f"‚úÖ *–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞*\n\n–ö–æ–º–ø–∞–Ω–∏—è \"{escape_markdown_v2(company_name)}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\\.",
                        parse_mode="MarkdownV2"
                    )
                    log_user_action(user_id, f"force_deleted_company_{company_name}")
            else:
                await message.answer(
                    f"‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏\\.",
                    parse_mode="MarkdownV2"
                )
            
    except Exception as e:
        bot_logger.error(f"Error force deleting company for user {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏\\.")


@router.message(Command("history", "work_history"))
async def show_work_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–±–æ—Ç"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "show_history")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            end_date = date.today()
            start_date = end_date - timedelta(days=30)
            
            entries = await service.get_entries_by_date_range(
                user_id, start_date, end_date
            )
            
            if not entries:
                await message.answer(
                    "üìä *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç*\n\n"
                    "‚ùå –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.\n\n"
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /journal",
                    parse_mode="MarkdownV2"
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            formatted_entries = format_entries_list(entries, limit=10)
            
            history_text = (
                f"üìä *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç* \\(–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\\)\n\n"
                f"{formatted_entries}\n"
                f"*–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:* {len(entries)}"
            )
            
            if len(entries) > 10:
                history_text += f"\n\nüîç –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(entries)}"
            
            await message.answer(
                history_text,
                reply_markup=create_history_menu_keyboard(),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error showing history for user {user_id}: {e}")
        await message.answer(
            format_error_message("general"),
            parse_mode="MarkdownV2"
        )


@router.message(Command("report", "work_report"))
async def show_work_report(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–∞–º"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "show_report")
        
        async for session in get_async_session():
            service = WorkJournalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = date.today()
            start_of_month = today.replace(day=1)
            
            entries = await service.get_entries_by_date_range(
                user_id, start_of_month, today
            )
            
            if not entries:
                await message.answer(
                    "üìà *–û—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–∞–º*\n\n"
                    "‚ùå –ó–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.\n\n"
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /journal",
                    parse_mode="MarkdownV2"
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
            report_data = await service.generate_statistics_report(
                user_id, start_of_month, today
            )
            
            formatted_report = format_statistics_report(report_data, start_of_month, today)
            
            await message.answer(
                formatted_report,
                reply_markup=create_report_menu_keyboard(),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error showing report for user {user_id}: {e}")
        await message.answer(
            format_error_message("general"),
            parse_mode="MarkdownV2"
        )
