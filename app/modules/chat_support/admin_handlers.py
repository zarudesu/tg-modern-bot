"""
Admin commands for chat support configuration
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from ...middleware.auth import require_admin
from ...database.database import get_async_session
from ...services.support_requests_service import support_requests_service
from ...integrations.plane import plane_api
from ...utils.logger import bot_logger
from ...config import settings


router = Router(name="chat_support_admin")


def escape_md(text: str) -> str:
    """Escape MarkdownV2 special chars"""
    chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in chars:
        text = text.replace(char, f'\\{char}')
    return text


@require_admin
@router.message(Command("setup_chat"))
async def cmd_setup_chat(message: Message):
    """Setup current chat for support requests (group only)"""
    chat_id = message.chat.id

    bot_logger.info(f"‚öôÔ∏è SETUP_CHAT: chat={chat_id}, admin={message.from_user.id}")

    if chat_id > 0:
        await message.reply(
            "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.\n\n"
            "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë –≤ —á–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.",
            parse_mode="Markdown"
        )
        return

    async for session in get_async_session():
        # Check existing
        existing = await support_requests_service.get_chat_mapping(session, chat_id)
        if existing:
            await message.reply(
                f"‚ÑπÔ∏è **–ß–∞—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n"
                f"üìÅ –ü—Ä–æ–µ–∫—Ç: {existing.plane_project_name}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove_chat –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )
            return

        # Get projects
        try:
            projects = await plane_api.get_all_projects()
            if not projects:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Plane.")
                return

            # Show first 20 projects
            keyboard_rows = []
            for idx, project in enumerate(projects[:20]):
                keyboard_rows.append([
                    InlineKeyboardButton(
                        text=f"üìÅ {project['name'][:35]}",
                        callback_data=f"csp_{chat_id}_{idx}"
                    )
                ])

            if len(projects) > 20:
                keyboard_rows.append([
                    InlineKeyboardButton(text="‚û°Ô∏è –ï—â—ë", callback_data=f"cspage_{chat_id}_1")
                ])

            keyboard_rows.append([
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cs_cancel")
            ])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

            await message.reply(
                f"üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:**\n\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–æ {min(20, len(projects))} –∏–∑ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

        except Exception as e:
            bot_logger.error(f"Error getting projects: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.")


@router.callback_query(F.data.startswith("csp_"))
async def process_project_selection(callback: CallbackQuery):
    """Process project selection"""
    if callback.from_user.id not in settings.admin_user_id_list:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã", show_alert=True)
        return

    parts = callback.data.split("_")
    chat_id = int(parts[1])
    project_idx = int(parts[2])

    async for session in get_async_session():
        try:
            projects = await plane_api.get_all_projects()
            project = projects[project_idx]

            # Get chat info
            chat = await callback.bot.get_chat(chat_id)

            # Create mapping
            await support_requests_service.create_chat_mapping(
                session=session,
                chat_id=chat_id,
                chat_title=chat.title or "Unknown",
                chat_type=chat.type,
                plane_project_id=project['id'],
                plane_project_name=project['name'],
                created_by=callback.from_user.id
            )

            await callback.message.edit_text(
                f"‚úÖ **–ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n"
                f"üí¨ –ß–∞—Ç: {chat.title}\n"
                f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project['name']}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /request",
                parse_mode="Markdown"
            )
            await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")

            bot_logger.info(f"‚úÖ Chat mapped: {chat_id} -> {project['name']}")

        except Exception as e:
            bot_logger.error(f"Error creating mapping: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Ç–∞.")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@require_admin
@router.message(Command("remove_chat"))
async def cmd_remove_chat(message: Message):
    """Remove chat mapping"""
    chat_id = message.chat.id

    if chat_id > 0:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return

    async for session in get_async_session():
        mapping = await support_requests_service.get_chat_mapping(session, chat_id)
        if not mapping:
            await message.reply("‚ÑπÔ∏è –ß–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"csrm_{chat_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cs_cancel")
            ]
        ])

        await message.reply(
            f"‚ùì **–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É?**\n\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: {mapping.plane_project_name}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@router.callback_query(F.data.startswith("csrm_"))
async def confirm_remove(callback: CallbackQuery):
    """Confirm removal"""
    if callback.from_user.id not in settings.admin_user_id_list:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã", show_alert=True)
        return

    chat_id = int(callback.data.replace("csrm_", ""))

    async for session in get_async_session():
        success = await support_requests_service.delete_chat_mapping(session, chat_id)

        if success:
            await callback.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
            await callback.answer("‚úÖ")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞.")
            await callback.answer("‚ùå")


@require_admin
@router.message(Command("list_chats"))
async def cmd_list_chats(message: Message):
    """List all configured chats"""
    async for session in get_async_session():
        mappings = await support_requests_service.list_all_mappings(session, only_active=True)

        if not mappings:
            await message.reply(
                "üìã **–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã**\n\n"
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup_chat –≤ –≥—Ä—É–ø–ø–µ.",
                parse_mode="Markdown"
            )
            return

        text = f"üìã **–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã** ({len(mappings)})\n\n"

        for i, m in enumerate(mappings, 1):
            text += f"{i}. {m.chat_title}\n"
            text += f"   üìÅ {m.plane_project_name}\n\n"

        await message.reply(text, parse_mode="Markdown")


@router.callback_query(F.data == "cs_cancel")
async def cancel_action(callback: CallbackQuery):
    """Cancel action"""
    await callback.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
