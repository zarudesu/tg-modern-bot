"""
Support Requests Handlers - REFACTORED INLINE VERSION
All interaction via inline buttons, no FSM text handlers in groups
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from ...database.database import get_async_session
from ...services.support_requests_service import support_requests_service
from ...utils.logger import bot_logger
from ...config import settings


router = Router()


def escape_markdown_v2(text: str) -> str:
    """Escape special characters for MarkdownV2"""
    chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!', '@']
    for char in chars_to_escape:
        text = text.replace(char, f'\\{char}')
    return text


# Temporary storage for request data (chat_id -> request_data)
REQUEST_DATA = {}


@router.message(Command("new_request"))
async def cmd_new_request(message: Message):
    """Start creating a new support request - INLINE MODE"""
    user_id = message.from_user.id
    chat_id = message.chat.id

    bot_logger.info(f"üî• NEW_REQUEST: user={user_id}, chat={chat_id}")

    if chat_id > 0:  # Private chat
        await message.reply(
            "‚ÑπÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫*\n\n"
            "–ó–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤\\.\n\n"
            "1\\. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç\n"
            "2\\. –ù–∞–ø–∏—à–∏—Ç–µ `/new_request`\n"
            "3\\. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
            parse_mode="MarkdownV2"
        )
        return

    # Group chat
    async for session in get_async_session():
        mapping = await support_requests_service.get_chat_mapping(session, chat_id)

    if not mapping:
        await message.reply(
            "‚ùå *–ß–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\\.",
            parse_mode="MarkdownV2"
        )
        return

    # Initialize request data
    request_key = f"{user_id}_{chat_id}"
    REQUEST_DATA[request_key] = {
        'user_id': user_id,
        'chat_id': chat_id,
        'project_id': mapping.plane_project_id,
        'project_name': mapping.plane_project_name,
        'user_name': message.from_user.full_name or message.from_user.username or f"User {user_id}"
    }

    bot_logger.info(f"‚úÖ REQUEST INITIALIZED: {request_key}")

    # Step 1: Title input via inline buttons
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"req_title_{request_key}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"req_cancel_{request_key}")]
    ])

    project_escaped = escape_markdown_v2(mapping.plane_project_name)
    await message.reply(
        f"üìù *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
        f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_escaped}\n\n"
        f"*–®–∞–≥ 1/3:* –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã \\(–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤\\)",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data.startswith("req_title_"))
async def start_title_input(callback: CallbackQuery):
    """Prompt for title input"""
    request_key = callback.data.replace("req_title_", "")

    bot_logger.info(f"üìù TITLE INPUT STARTED: {request_key}")

    if request_key not in REQUEST_DATA:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return

    # Mark that we're waiting for title
    REQUEST_DATA[request_key]['waiting_for'] = 'title'

    await callback.message.edit_text(
        "üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã \\(–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤\\)\n\n"
        "_–û–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\\.\\.\\._",
        parse_mode="MarkdownV2"
    )
    await callback.answer()


@router.message(F.text & F.chat.type.in_(["group", "supergroup"]))
async def handle_group_text(message: Message):
    """Handle text messages in group - check if waiting for input"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    request_key = f"{user_id}_{chat_id}"

    if request_key not in REQUEST_DATA:
        return  # Not our request

    waiting_for = REQUEST_DATA[request_key].get('waiting_for')

    bot_logger.info(f"üì® GROUP TEXT: key={request_key}, waiting_for={waiting_for}, text={message.text[:50]}")

    if waiting_for == 'title':
        await process_title(message, request_key)
    elif waiting_for == 'description':
        await process_description(message, request_key)


async def process_title(message: Message, request_key: str):
    """Process title input"""
    title = message.text.strip()

    bot_logger.info(f"‚úçÔ∏è PROCESSING TITLE: key={request_key}, title={title}")

    if len(title) < 5:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"req_title_{request_key}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"req_cancel_{request_key}")]
        ])
        await message.reply(
            "‚ùå *–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ*\n\n"
            "–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\\.",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        return

    if len(title) > 200:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"req_title_{request_key}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"req_cancel_{request_key}")]
        ])
        await message.reply(
            "‚ùå *–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ*\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤\\.",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        return

    # Save title
    REQUEST_DATA[request_key]['title'] = title
    REQUEST_DATA[request_key]['waiting_for'] = None

    bot_logger.info(f"‚úÖ TITLE SAVED: key={request_key}")

    # Move to description
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"req_desc_{request_key}")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"req_skip_desc_{request_key}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"req_cancel_{request_key}")]
    ])

    title_escaped = escape_markdown_v2(title)
    await message.reply(
        f"‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ*\n\n"
        f"üìù _{title_escaped}_\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"*–®–∞–≥ 2/3:* –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data.startswith("req_desc_"))
async def start_description_input(callback: CallbackQuery):
    """Start description input"""
    request_key = callback.data.replace("req_desc_", "")

    bot_logger.info(f"üìù DESCRIPTION INPUT STARTED: {request_key}")

    if request_key not in REQUEST_DATA:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return

    REQUEST_DATA[request_key]['waiting_for'] = 'description'

    await callback.message.edit_text(
        "üìù *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã\\.\n\n"
        "_–û–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\\.\\.\\._",
        parse_mode="MarkdownV2"
    )
    await callback.answer()


async def process_description(message: Message, request_key: str):
    """Process description input"""
    description = message.text.strip()

    bot_logger.info(f"‚úçÔ∏è PROCESSING DESCRIPTION: key={request_key}")

    if len(description) > 2000:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"req_desc_{request_key}")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"req_skip_desc_{request_key}")]
        ])
        await message.reply(
            "‚ùå *–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ*\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤\\.",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        return

    REQUEST_DATA[request_key]['description'] = description
    REQUEST_DATA[request_key]['waiting_for'] = None

    bot_logger.info(f"‚úÖ DESCRIPTION SAVED: key={request_key}")

    await show_priority_selection(message, request_key)


@router.callback_query(F.data.startswith("req_skip_desc_"))
async def skip_description(callback: CallbackQuery):
    """Skip description"""
    request_key = callback.data.replace("req_skip_desc_", "")

    bot_logger.info(f"‚è≠Ô∏è DESCRIPTION SKIPPED: {request_key}")

    if request_key not in REQUEST_DATA:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return

    REQUEST_DATA[request_key]['description'] = None
    REQUEST_DATA[request_key]['waiting_for'] = None

    await callback.message.edit_text(
        "‚è≠Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ*\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞\\.\\.\\.",
        parse_mode="MarkdownV2"
    )
    await callback.answer()

    await show_priority_selection(callback.message, request_key)


async def show_priority_selection(message: Message, request_key: str):
    """Show priority selection"""
    bot_logger.info(f"‚ö° SHOWING PRIORITY: key={request_key}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –°—Ä–æ—á–Ω–æ", callback_data=f"req_pri_urgent_{request_key}"),
            InlineKeyboardButton(text="üü† –í—ã—Å–æ–∫–∏–π", callback_data=f"req_pri_high_{request_key}")
        ],
        [
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data=f"req_pri_medium_{request_key}"),
            InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π", callback_data=f"req_pri_low_{request_key}")
        ]
    ])

    await message.answer(
        "‚ö° *–®–∞–≥ 3/3: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç*\n\n"
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É?\n\n"
        "üî¥ *–°—Ä–æ—á–Ω–æ* \\- –∫—Ä–∏—Ç–∏—á–Ω–æ, –≤—Å—ë —Å–ª–æ–º–∞–Ω–æ\n"
        "üü† *–í—ã—Å–æ–∫–∏–π* \\- –≤–∞–∂–Ω–æ, –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ\n"
        "üü° *–°—Ä–µ–¥–Ω–∏–π* \\- –æ–±—ã—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n"
        "üü¢ *–ù–∏–∑–∫–∏–π* \\- –Ω–µ —Å—Ä–æ—á–Ω–æ",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data.startswith("req_pri_"))
async def process_priority(callback: CallbackQuery):
    """Process priority and create request"""
    parts = callback.data.split("_", 3)
    priority = parts[2]  # urgent, high, medium, low
    request_key = parts[3]

    bot_logger.info(f"‚ö° PRIORITY SELECTED: key={request_key}, priority={priority}")

    if request_key not in REQUEST_DATA:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return

    data = REQUEST_DATA[request_key]

    # Create request
    await callback.message.answer(
        f"‚è≥ *–°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É\\.\\.\\.*\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Plane\\.\\.\\.",
        parse_mode="MarkdownV2"
    )
    await callback.answer()

    async for session in get_async_session():
        try:
            request = await support_requests_service.create_support_request(
                session=session,
                chat_id=data['chat_id'],
                user_id=data['user_id'],
                user_name=data['user_name'],
                title=data['title'],
                description=data.get('description'),
                priority=priority
            )

            bot_logger.info(f"‚úÖ REQUEST CREATED: id={request.id}")

            # Submit to Plane
            success, error = await support_requests_service.submit_to_plane(session, request.id)

            if success:
                title_escaped = escape_markdown_v2(data['title'])
                project_escaped = escape_markdown_v2(data['project_name'])

                success_text = (
                    f"‚úÖ *–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\\!*\n\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üìù {title_escaped}\n"
                    f"üìÅ {project_escaped}\n\n"
                    f"‚úâÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\\.\n"
                    f"üìû –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏\\!"
                )

                if request.plane_url:
                    success_text += f"\n\nüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Plane]({escape_markdown_v2(request.plane_url)})"

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë –∑–∞—è–≤–∫—É", callback_data=f"req_new_{data['chat_id']}")]
                ])

                await callback.message.answer(
                    success_text,
                    reply_markup=keyboard,
                    parse_mode="MarkdownV2",
                    disable_web_page_preview=True
                )

                bot_logger.info(f"üéâ REQUEST COMPLETED: id={request.id}")

                # Notify admins
                await notify_admins(callback.bot, request, data['user_name'])

            else:
                await callback.message.answer(
                    f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ Plane*\n\n"
                    f"{escape_markdown_v2(error or 'Unknown error')}",
                    parse_mode="MarkdownV2"
                )

        except Exception as e:
            bot_logger.error(f"üí• REQUEST ERROR: {e}")
            await callback.message.answer(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
                parse_mode="MarkdownV2"
            )

    # Cleanup
    if request_key in REQUEST_DATA:
        del REQUEST_DATA[request_key]


@router.callback_query(F.data.startswith("req_cancel_"))
async def cancel_request(callback: CallbackQuery):
    """Cancel request creation"""
    request_key = callback.data.replace("req_cancel_", "")

    bot_logger.info(f"‚ùå REQUEST CANCELLED: {request_key}")

    if request_key in REQUEST_DATA:
        del REQUEST_DATA[request_key]

    await callback.message.edit_text(
        "‚ùå *–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ `/new_request` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\\.",
        parse_mode="MarkdownV2"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("req_new_"))
async def create_new_request(callback: CallbackQuery):
    """Start new request from button"""
    chat_id = int(callback.data.replace("req_new_", ""))

    # Simulate /new_request command
    fake_message = type('FakeMessage', (), {
        'from_user': callback.from_user,
        'chat': type('Chat', (), {'id': chat_id, 'type': 'supergroup'})(),
        'reply': callback.message.answer
    })()

    await cmd_new_request(fake_message)
    await callback.answer()


async def notify_admins(bot, request, user_name: str):
    """Notify admins about new request"""
    title_escaped = escape_markdown_v2(request.title)
    user_escaped = escape_markdown_v2(user_name)

    notification = (
        f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
        f"üë§ –û—Ç: {user_escaped}\n"
        f"üìù {title_escaped}\n\n"
    )

    if request.plane_url:
        notification += f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Plane]({escape_markdown_v2(request.plane_url)})"

    for admin_id in settings.admin_user_id_list:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=notification,
                parse_mode="MarkdownV2",
                disable_web_page_preview=True
            )
        except Exception as e:
            bot_logger.warning(f"Failed to notify admin {admin_id}: {e}")


@router.message(Command("my_requests"))
async def cmd_my_requests(message: Message):
    """Show user's requests"""
    user_id = message.from_user.id

    async for session in get_async_session():
        requests = await support_requests_service.get_user_requests(session, user_id, limit=10)

        if not requests:
            await message.reply(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫\\.",
                parse_mode="MarkdownV2"
            )
            return

        text = f"üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏* \\({len(requests)}\\)\n\n"

        for i, req in enumerate(requests, 1):
            title_escaped = escape_markdown_v2(req.title[:50])
            text += f"{i}\\. {req.status_emoji} {req.priority_emoji} {title_escaped}\n"

            if req.plane_url:
                text += f"   [‚Üí –û—Ç–∫—Ä—ã—Ç—å]({escape_markdown_v2(req.plane_url)})\n"

            text += "\n"

        await message.reply(
            text,
            parse_mode="MarkdownV2",
            disable_web_page_preview=True
        )
