"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á (–≤—Å–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–µ–∫—Ç—ã, –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞)
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from .filters import IsAdminFilter
from ...integrations.plane import plane_api
from ...utils.logger import bot_logger
from ...utils.markdown import escape_markdown_v2
from ...config import settings


router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.admin_user_id_list


@router.callback_query(F.data.startswith("all_tasks_"))
async def callback_all_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    loading_msg = await callback.message.edit_text(
        "üìã –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ Plane\\.\\.\\.\n‚è±Ô∏è _–≠—Ç–æ –∑–∞–π–º–µ—Ç \\~15 —Å–µ–∫—É–Ω–¥_",
        parse_mode="MarkdownV2"
    )

    try:
        from ...services.daily_tasks_service import daily_tasks_service

        if not daily_tasks_service or not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return

        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})

        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            await loading_msg.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á\\.",
                parse_mode="MarkdownV2"
            )
            return

        bot_logger.info(f"üîÑ Fetching ALL tasks from Plane API for {admin_email}")
        tasks = await plane_api.get_user_tasks(admin_email)
        bot_logger.info(f"‚úÖ Retrieved {len(tasks)} tasks from Plane API")

        if not tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"all_tasks_{admin_id}")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            await loading_msg.edit_text(
                f"üìã *–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ Plane*\n\n"
                f"üë§ Email: {escape_markdown_v2(admin_email)}\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: 0\n\n"
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        tasks_by_project = {}
        for task in tasks:
            project_name = task.project_name
            if project_name not in tasks_by_project:
                tasks_by_project[project_name] = []
            tasks_by_project[project_name].append(task)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        admin_email_escaped = escape_markdown_v2(admin_email)
        tasks_text = f"üìã *–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ Plane*\n\n"
        tasks_text += f"üë§ *Email:* {admin_email_escaped}\n"
        tasks_text += f"üìä *–í—Å–µ–≥–æ –∑–∞–¥–∞—á:* {len(tasks)}\n"
        tasks_text += f"üìÅ *–ü—Ä–æ–µ–∫—Ç–æ–≤:* {len(tasks_by_project)}\n\n"

        task_counter = 1
        for project_name, project_tasks in tasks_by_project.items():
            project_name_escaped = escape_markdown_v2(project_name)
            tasks_text += f"üìÅ *{project_name_escaped}* \\({len(project_tasks)} –∑–∞–¥–∞—á\\)\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ (—É–±—Ä–∞–Ω –ª–∏–º–∏—Ç [:5])
            for task in project_tasks:
                state_emoji = task.state_emoji
                priority_emoji = task.priority_emoji
                task_name = escape_markdown_v2(task.name)
                task_url = task.task_url
                status_text = escape_markdown_v2(task.state_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                project_escaped = escape_markdown_v2(task.project_name)

                tasks_text += f"  {task_counter}\\. {state_emoji} {priority_emoji} [{task_name}]({task_url})\n"
                tasks_text += f"     üìÅ {project_escaped} \\| üè∑Ô∏è {status_text}\n"
                task_counter += 1

            tasks_text += "\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="daily_tasks"),
             InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"all_tasks_{admin_id}")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])

        from aiogram.types import LinkPreviewOptions

        await loading_msg.edit_text(
            tasks_text,
            reply_markup=keyboard,
            parse_mode="MarkdownV2",
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )

    except Exception as e:
        bot_logger.error(f"Error in all_tasks callback: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "all_projects")
async def callback_all_projects(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    loading_msg = await callback.message.edit_text(
        "üìã –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Plane\\.\\.\\.\n‚è±Ô∏è _–≠—Ç–æ –∑–∞–π–º–µ—Ç \\~15 —Å–µ–∫—É–Ω–¥_",
        parse_mode="MarkdownV2"
    )

    try:
        from ...services.daily_tasks_service import daily_tasks_service

        if not daily_tasks_service or not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return

        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})

        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            await loading_msg.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á\\.",
                parse_mode="MarkdownV2"
            )
            return

        bot_logger.info(f"üîÑ Fetching tasks from Plane API for projects view for {admin_email}")
        all_tasks = await plane_api.get_user_tasks(admin_email)
        bot_logger.info(f"‚úÖ Retrieved {len(all_tasks)} tasks from Plane API")

        if not all_tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            await loading_msg.edit_text(
                "‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects_set = set(task.project_name for task in all_tasks)
        projects_list = sorted(list(projects_set))

        keyboard_buttons = []
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ø—Ä–æ–µ–∫—Ç—ã (—É–±—Ä–∞–Ω –ª–∏–º–∏—Ç [:20])
        for project_name in projects_list:
            tasks_count = sum(1 for task in all_tasks if task.project_name == project_name)
            display_name = project_name[:30] + "..." if len(project_name) > 30 else project_name

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÅ {display_name} ({tasks_count})",
                    callback_data=f"project_{project_name}"
                )
            ])

        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        projects_count = len(projects_list)
        shown_count = projects_count

        await loading_msg.edit_text(
            f"üìÅ *–ü—Ä–æ–µ–∫—Ç—ã –∏–∑ Plane*\n\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_count}\n"
            f"üëÅ –ü–æ–∫–∞–∑–∞–Ω–æ: {shown_count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á:",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        bot_logger.error(f"Error in all_projects callback: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤",
            parse_mode="MarkdownV2"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("project_"))
async def callback_project_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    project_name_raw = callback.data.replace("project_", "")

    loading_msg = await callback.message.edit_text(
        "üìã –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏ –∏–∑ Plane\\.\\.\\.\n‚è±Ô∏è _–≠—Ç–æ –∑–∞–π–º–µ—Ç \\~15 —Å–µ–∫—É–Ω–¥_",
        parse_mode="MarkdownV2"
    )

    try:
        from ...services.daily_tasks_service import daily_tasks_service

        if not daily_tasks_service or not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return

        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})

        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            await loading_msg.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return

        bot_logger.info(f"üîÑ Fetching tasks from Plane API for project '{project_name_raw}' for {admin_email}")
        all_tasks = await plane_api.get_user_tasks(admin_email)
        bot_logger.info(f"‚úÖ Retrieved {len(all_tasks)} tasks from Plane API")

        project_tasks = [task for task in all_tasks if task.project_name == project_name_raw]

        if not project_tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
                [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            project_name_escaped = escape_markdown_v2(project_name_raw)
            await loading_msg.edit_text(
                f"üìÅ *–ü—Ä–æ–µ–∫—Ç:* {project_name_escaped}\n\n"
                f"üì≠ –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–¥–∞—á",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return

        project_name_escaped = escape_markdown_v2(project_name_raw)
        tasks_text = f"üìÅ *–ü—Ä–æ–µ–∫—Ç:* {project_name_escaped}\n\n"
        tasks_text += f"üìä *–ó–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ:* {len(project_tasks)}\n\n"

        for i, task in enumerate(project_tasks, 1):
            state_emoji = task.state_emoji
            priority_emoji = task.priority_emoji
            task_name = escape_markdown_v2(task.name)
            task_url = task.task_url
            status_text = escape_markdown_v2(task.state_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            project_escaped = escape_markdown_v2(task.project_name)

            tasks_text += f"{i}\\. {state_emoji} {priority_emoji} [{task_name}]({task_url})\n"
            tasks_text += f"   üìÅ {project_escaped} \\| üè∑Ô∏è {status_text}\n\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])

        from aiogram.types import LinkPreviewOptions

        await loading_msg.edit_text(
            tasks_text,
            reply_markup=keyboard,
            parse_mode="MarkdownV2",
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )

    except Exception as e:
        bot_logger.error(f"Error in project_tasks callback: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞",
            parse_mode="MarkdownV2"
        )

    await callback.answer()
