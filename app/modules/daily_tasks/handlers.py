"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode

from .filters import IsAdminFilter
from ...middleware.auth import require_admin
from ...utils.logger import bot_logger
from ...config import settings


router = Router()


def escape_markdown_v2(text: str) -> str:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2"""
    chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!', '@']
    for char in chars_to_escape:
        text = text.replace(char, f'\\{char}')
    return text


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.admin_user_id_list


@router.message(Command("daily_tasks"))
async def cmd_daily_tasks(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞ –∏–∑ Plane"""
    admin_id = message.from_user.id
    
    if not is_admin(admin_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode="MarkdownV2")
        return
        
    bot_logger.info(f"Daily tasks command called by admin {admin_id}")
    
    loading_msg = await message.reply("üìã –ü–æ–ª—É—á–∞—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\\.\\.\\.", parse_mode="MarkdownV2")
    
    try:
        from ...services.daily_tasks_service import daily_tasks_service
        from ...services.user_tasks_cache_service import user_tasks_cache_service
        from ...integrations.plane import plane_api
        
        if not daily_tasks_service or not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ \\.env —Ñ–∞–π–ª–µ",
                parse_mode="MarkdownV2"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        
        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            
            await loading_msg.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à email\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return
        
        # üöÄ –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –∫—ç—à–∞ (–±—ã—Å—Ç—Ä–æ!)
        cached_tasks = await user_tasks_cache_service.get_cached_tasks(
            user_email=admin_email,
            include_overdue=True,
            include_today=True,
            include_upcoming=True,
            max_tasks=50
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_status = await user_tasks_cache_service.get_sync_status(admin_email)

        # üöÄ –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º!
        if not cached_tasks and (not sync_status or not sync_status.sync_in_progress):
            bot_logger.info(f"üöÄ Starting sync for {admin_email} (no cache or not in progress)")
            sync_started = await user_tasks_cache_service.start_user_sync(
                user_email=admin_email,
                telegram_user_id=admin_id,
                notify_user=True
            )
            if sync_started:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                sync_status = await user_tasks_cache_service.get_sync_status(admin_email)

        if not cached_tasks and (not sync_status or sync_status.sync_in_progress):
            # –ó–∞–¥–∞—á–∏ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
            admin_email_escaped = escape_markdown_v2(admin_email)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="daily_tasks")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            
            await loading_msg.edit_text(
                f"‚è≥ *–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\\.\\.\\.*\n\n"
                f"üë§ Email: {admin_email_escaped}\n"
                f"üîÑ –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏–∑ plane\\.hhivp\\.com –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\\.\n\n"
                f"üí° _–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç\\. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è\\._",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return
        
        if not cached_tasks:
            # –ù–µ—Ç –∑–∞–¥–∞—á –≤–æ–æ–±—â–µ
            admin_email_escaped = escape_markdown_v2(admin_email)
            last_sync = ""
            if sync_status and sync_status.last_sync_completed:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ –¥–∞—Ç–µ
                sync_time = sync_status.last_sync_completed.strftime('%H:%M %d.%m')
                sync_time_escaped = escape_markdown_v2(sync_time)
                last_sync = f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {sync_time_escaped}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_tasks")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            await loading_msg.edit_text(
                f"üìã *–ó–∞–¥–∞—á–∏ –∏–∑ Plane*\n\n"
                f"üë§ Email: {admin_email_escaped}\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: 0{last_sync}\n\n"
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return
        
        # üöÄ –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        admin_email_escaped = escape_markdown_v2(admin_email)
        tasks_text = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Plane*\n\n"
        tasks_text += f"üë§ *Email:* {admin_email_escaped}\n"
        tasks_text += f"üìä *–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:* {len(cached_tasks)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if sync_status:
            if sync_status.last_sync_completed:
                last_sync_str = sync_status.last_sync_completed.strftime('%H:%M %d.%m')
                last_sync_str_escaped = escape_markdown_v2(last_sync_str)
                tasks_text += f"üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {last_sync_str_escaped}\n"
            if sync_status.sync_in_progress:
                tasks_text += f"‚è≥ _–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\\.\\.\\._\n"
        
        tasks_text += "\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏
        for i, task in enumerate(cached_tasks, 1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –º–æ–¥–µ–ª–∏ –∫—ç—à–∞
            state_emoji = task.state_emoji
            priority_emoji = task.priority_emoji

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task_name = escape_markdown_v2(task.title)

            # –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–¥–∞—á–∏
            task_url = task.task_url

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status_text = escape_markdown_v2(task.state_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project_name = escape_markdown_v2(task.project_name)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏ –°–û –°–°–´–õ–ö–û–ô (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∏–∂–µ)
            task_line = f"{i}\\. {state_emoji} {priority_emoji} [{task_name}]({task_url})\n"
            task_line += f"   üè∑Ô∏è _{status_text}_ ‚Ä¢ üìÅ _{project_name}_\n\n"

            tasks_text += task_line
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings"),
             InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_tasks")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        from aiogram.types import LinkPreviewOptions

        await loading_msg.edit_text(
            tasks_text,
            reply_markup=keyboard,
            parse_mode="MarkdownV2",
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )
        
    except Exception as e:
        bot_logger.error(f"Error in daily_tasks command: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("daily_settings"))
async def cmd_daily_settings(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = message.from_user.id
    
    if not is_admin(admin_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode="MarkdownV2")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from ...services.daily_tasks_service import daily_tasks_service
    
    current_email = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    current_time = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ" 
    notifications_enabled = False
    
    if daily_tasks_service:
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        current_email = admin_settings.get('plane_email', '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        current_time = admin_settings.get('notification_time', '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
        notifications_enabled = admin_settings.get('notifications_enabled', False)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    current_email_escaped = escape_markdown_v2(current_email)
    current_time_escaped = escape_markdown_v2(str(current_time))
    
    status_icon = "üü¢ –≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "üî¥ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìß Email –∞–¥—Ä–µ—Å", callback_data="setup_email")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="setup_time")],
        [InlineKeyboardButton(text="üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="daily_tasks")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="settings_done")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])
    
    await message.reply(
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
        f"üìß *Email:* {current_email_escaped}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {current_time_escaped}\n"
        f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {status_icon}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@require_admin
@router.message(Command("plane_test"))
async def cmd_plane_test(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API"""
    admin_id = message.from_user.id
    
    loading_msg = await message.reply("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API\\.\\.\\.", parse_mode="MarkdownV2")
    try:
        from ...integrations.plane import plane_api
        from ...services.daily_tasks_service import daily_tasks_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå *Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ \\.env —Ñ–∞–π–ª–µ:\n"
                "‚Ä¢ PLANE\\_API\\_TOKEN\n"
                "‚Ä¢ PLANE\\_BASE\\_URL\n"
                "‚Ä¢ PLANE\\_WORKSPACE\\_SLUG",
                parse_mode="MarkdownV2"
            )
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_result = await plane_api.test_connection()
        
        if test_result.get('success'):
            api_url_escaped = escape_markdown_v2(plane_api.api_url)
            workspace_escaped = escape_markdown_v2(plane_api.workspace_slug)
            await loading_msg.edit_text(
                "‚úÖ *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API —É—Å–ø–µ—à–Ω–æ\\!*\n\n"
                f"üåê *URL:* {api_url_escaped}\n"
                f"üè¢ *Workspace:* {workspace_escaped}\n"
                f"üîó *API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ*",
                parse_mode="MarkdownV2"
            )
        else:
            error_msg = escape_markdown_v2(test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            await loading_msg.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API*\n\n"
                f"üî• *–û—à–∏–±–∫–∞:* {error_msg}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ API\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Plane\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ workspace\n\n"
                f"üìã –°–º–æ—Ç—Ä–∏—Ç–µ PLANE\\_API\\_TOKEN\\_GUIDE\\.md –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error in plane_test command: {e}")
        await loading_msg.edit_text(
            f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ API\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Plane\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ workspace\n\n"
            f"üìã –°–º–æ—Ç—Ä–∏—Ç–µ PLANE\\_API\\_TOKEN\\_GUIDE\\.md –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
            parse_mode="MarkdownV2"
        )


@require_admin
@router.message(Command("scheduler_status"))
async def cmd_scheduler_status(message: Message):
    """–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    admin_count = len(settings.admin_user_id_list)
    
    await message.reply(
        f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
        f"ü§ñ *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:* –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
        f"üë• *–ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:* {admin_count}\n"
        f"üóÑÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        f"‚úàÔ∏è *Plane API:* –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
        f"üéØ *–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\\!*",
        parse_mode="MarkdownV2"
    )
