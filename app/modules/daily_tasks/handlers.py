"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode

from .filters import IsAdminFilter
from ...middleware.auth import require_admin
from ...utils.logger import bot_logger
from ...utils.markdown import escape_markdown_v2
from ...config import settings


router = Router()

# Global cache for pagination (email -> tasks list)
_tasks_cache = {}
TASKS_PER_PAGE = 15


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.admin_user_id_list


async def _show_tasks_page(message, tasks: list, admin_email: str, page: int = 1):
    """Show tasks with pagination"""
    from aiogram.types import LinkPreviewOptions

    # Cache tasks for pagination
    _tasks_cache[admin_email] = tasks

    total_tasks = len(tasks)
    total_pages = (total_tasks + TASKS_PER_PAGE - 1) // TASKS_PER_PAGE

    # Validate page number
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    # Calculate slice
    start_idx = (page - 1) * TASKS_PER_PAGE
    end_idx = start_idx + TASKS_PER_PAGE
    page_tasks = tasks[start_idx:end_idx]

    # Format message
    admin_email_escaped = escape_markdown_v2(admin_email)

    # Group tasks by project
    tasks_by_project = {}
    for task in page_tasks:
        project_name = task.project_name
        if project_name not in tasks_by_project:
            tasks_by_project[project_name] = []
        tasks_by_project[project_name].append(task)

    tasks_text = f"üìã *–ó–∞–¥–∞—á–∏ –∏–∑ Plane* \\(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\\)\n\n"
    tasks_text += f"üë§ *Email:* {admin_email_escaped}\n"
    tasks_text += f"üìä *–í—Å–µ–≥–æ –∑–∞–¥–∞—á:* {total_tasks}\n"
    tasks_text += f"üìÑ *–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:* {len(page_tasks)}\n\n"

    task_counter = start_idx + 1
    for project_name, project_tasks in tasks_by_project.items():
        project_name_escaped = escape_markdown_v2(project_name)
        tasks_text += f"üìÅ *{project_name_escaped}* \\({len(project_tasks)}\\)\n"

        for task in project_tasks:
            state_emoji = task.state_emoji
            priority_emoji = task.priority_emoji
            task_name = escape_markdown_v2(task.name)
            task_url = task.task_url
            status_text = escape_markdown_v2(task.state_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            tasks_text += f"  {task_counter}\\. {state_emoji} {priority_emoji} [{task_name}]({task_url})\n"
            tasks_text += f"     üè∑Ô∏è {status_text}\n"
            task_counter += 1

        tasks_text += "\n"

    # Build pagination keyboard
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"tasks_page:{admin_email}:{page-1}"
        ))

    nav_buttons.append(InlineKeyboardButton(
        text=f"üìÑ {page}/{total_pages}",
        callback_data="noop"
    ))

    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=f"tasks_page:{admin_email}:{page+1}"
        ))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        nav_buttons,
        [InlineKeyboardButton(text="üìÅ –ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings"),
         InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="daily_tasks")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])

    await message.edit_text(
        tasks_text,
        reply_markup=keyboard,
        parse_mode="MarkdownV2",
        link_preview_options=LinkPreviewOptions(is_disabled=True)
    )


@router.message(Command("daily_tasks"))
async def cmd_daily_tasks(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞ –∏–∑ Plane (–ü–†–Ø–ú–û–ô –∑–∞–ø—Ä–æ—Å –∫ API)"""
    admin_id = message.from_user.id

    if not is_admin(admin_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode="MarkdownV2")
        return

    bot_logger.info(f"Daily tasks command called by admin {admin_id}")

    loading_msg = await message.reply("üìã –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Plane\\.\\.\\.\n‚è±Ô∏è _–≠—Ç–æ –∑–∞–π–º–µ—Ç \\~15 —Å–µ–∫—É–Ω–¥_", parse_mode="MarkdownV2")

    try:
        from ...services.daily_tasks_service import daily_tasks_service
        from ...integrations.plane import plane_api

        if not daily_tasks_service or not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ \\.env —Ñ–∞–π–ª–µ",
                parse_mode="MarkdownV2"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})

        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            await loading_msg.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à email\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return

        # üöÄ –ü–†–Ø–ú–û–ô –∑–∞–ø—Ä–æ—Å –∫ Plane API (—Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º rate limit 600/min)
        bot_logger.info(f"üîÑ Fetching tasks directly from Plane API for {admin_email}")
        tasks = await plane_api.get_user_tasks(admin_email)
        bot_logger.info(f"‚úÖ Retrieved {len(tasks)} tasks from Plane API")

        if not tasks:
            # –ù–µ—Ç –∑–∞–¥–∞—á –≤–æ–æ–±—â–µ
            admin_email_escaped = escape_markdown_v2(admin_email)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="daily_tasks")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            await loading_msg.edit_text(
                f"üìã *–ó–∞–¥–∞—á–∏ –∏–∑ Plane*\n\n"
                f"üë§ Email: {admin_email_escaped}\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: 0\n\n"
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return

        # üöÄ –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô
        await _show_tasks_page(loading_msg, tasks, admin_email, page=1)

    except Exception as e:
        bot_logger.error(f"Error in daily_tasks command: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("daily_settings"))
async def cmd_daily_settings(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = message.from_user.id
    
    if not is_admin(admin_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode="MarkdownV2")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from ...services.daily_tasks_service import daily_tasks_service
    
    current_email = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    current_time = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ" 
    notifications_enabled = False
    
    if daily_tasks_service:
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        current_email = admin_settings.get('plane_email', '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        current_time = admin_settings.get('notification_time', '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
        notifications_enabled = admin_settings.get('notifications_enabled', False)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    current_email_escaped = escape_markdown_v2(current_email)
    current_time_escaped = escape_markdown_v2(str(current_time))
    
    status_icon = "üü¢ –≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "üî¥ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìß Email –∞–¥—Ä–µ—Å", callback_data="setup_email")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="setup_time")],
        [InlineKeyboardButton(text="üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="daily_tasks")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="settings_done")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])
    
    await message.reply(
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
        f"üìß *Email:* {current_email_escaped}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {current_time_escaped}\n"
        f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {status_icon}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@require_admin
@router.message(Command("plane_test"))
async def cmd_plane_test(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API"""
    admin_id = message.from_user.id
    
    loading_msg = await message.reply("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API\\.\\.\\.", parse_mode="MarkdownV2")
    try:
        from ...integrations.plane import plane_api
        from ...services.daily_tasks_service import daily_tasks_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå *Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ \\.env —Ñ–∞–π–ª–µ:\n"
                "‚Ä¢ PLANE\\_API\\_TOKEN\n"
                "‚Ä¢ PLANE\\_BASE\\_URL\n"
                "‚Ä¢ PLANE\\_WORKSPACE\\_SLUG",
                parse_mode="MarkdownV2"
            )
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_result = await plane_api.test_connection()
        
        if test_result.get('success'):
            api_url_escaped = escape_markdown_v2(plane_api.api_url)
            workspace_escaped = escape_markdown_v2(plane_api.workspace_slug)
            await loading_msg.edit_text(
                "‚úÖ *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API —É—Å–ø–µ—à–Ω–æ\\!*\n\n"
                f"üåê *URL:* {api_url_escaped}\n"
                f"üè¢ *Workspace:* {workspace_escaped}\n"
                f"üîó *API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ*",
                parse_mode="MarkdownV2"
            )
        else:
            error_msg = escape_markdown_v2(test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            await loading_msg.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API*\n\n"
                f"üî• *–û—à–∏–±–∫–∞:* {error_msg}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ API\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Plane\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ workspace\n\n"
                f"üìã –°–º–æ—Ç—Ä–∏—Ç–µ PLANE\\_API\\_TOKEN\\_GUIDE\\.md –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error in plane_test command: {e}")
        await loading_msg.edit_text(
            f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ API\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Plane\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ workspace\n\n"
            f"üìã –°–º–æ—Ç—Ä–∏—Ç–µ PLANE\\_API\\_TOKEN\\_GUIDE\\.md –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
            parse_mode="MarkdownV2"
        )


@require_admin
@router.message(Command("scheduler_status"))
async def cmd_scheduler_status(message: Message):
    """–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    admin_count = len(settings.admin_user_id_list)

    await message.reply(
        f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
        f"ü§ñ *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:* –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
        f"üë• *–ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:* {admin_count}\n"
        f"üóÑÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        f"‚úàÔ∏è *Plane API:* –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
        f"üéØ *–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\\!*",
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data.startswith("tasks_page:"))
async def callback_tasks_page_navigation(callback: CallbackQuery):
    """Handle pagination navigation"""
    try:
        # Parse callback data: tasks_page:email:page
        parts = callback.data.split(":", 2)
        if len(parts) != 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        admin_email = parts[1]
        page = int(parts[2])

        # Get cached tasks
        if admin_email not in _tasks_cache:
            await callback.answer("‚ö†Ô∏è –ö—ç—à –∑–∞–¥–∞—á –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫", show_alert=True)
            return

        tasks = _tasks_cache[admin_email]

        # Show requested page
        await _show_tasks_page(callback.message, tasks, admin_email, page=page)
        await callback.answer()

    except ValueError as e:
        bot_logger.error(f"Invalid page number in pagination: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
    except Exception as e:
        bot_logger.error(f"Error in pagination callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
