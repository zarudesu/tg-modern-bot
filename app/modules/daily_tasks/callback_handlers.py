"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, update

from .filters import IsAdminFilter
from ...database.database import get_async_session
from ...database.models import UserSession
from ...utils.logger import bot_logger
from ...utils.markdown import escape_markdown_v2
from ...config import settings


router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.admin_user_id_list


@router.callback_query(F.data == "setup_email")
async def callback_setup_email(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
    async for session in get_async_session():
        result = await session.execute(
            select(UserSession).where(UserSession.telegram_user_id == admin_id)
        )
        user_session = result.scalar_one_or_none()
        
        if not user_session:
            user_session = UserSession(
                telegram_user_id=admin_id,
                last_command="setup_email",
                context={"step": "waiting_email"}
            )
            session.add(user_session)
        else:
            user_session.last_command = "setup_email"
            user_session.context = {"step": "waiting_email"}
        
        await session.commit()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_settings")]
    ])
    
    await callback.message.edit_text(
        "üìß *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å*\n\n"
        "–≠—Ç–æ—Ç email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane\n\n"
        "*–ü—Ä–∏–º–µ—Ä:* user@company\\.com",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    
    await callback.answer()


@router.callback_query(F.data == "back_to_settings")
async def callback_back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    async for session in get_async_session():
        result = await session.execute(
            select(UserSession).where(UserSession.telegram_user_id == admin_id)
        )
        user_session = result.scalar_one_or_none()
        
        if user_session:
            user_session.last_command = None
            user_session.context = {}
            await session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    from ...services.daily_tasks_service import daily_tasks_service
    
    current_email = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    current_time = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    notifications_enabled = False
    
    if daily_tasks_service:
        bot_logger.info(f"üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è admin {admin_id}")
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        bot_logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ admin {admin_id}: {admin_settings}")
        
        current_email = admin_settings.get('plane_email', '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        current_time = admin_settings.get('notification_time', '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
        notifications_enabled = admin_settings.get('notifications_enabled', False) or admin_settings.get('enabled', False)
        
        bot_logger.info(f"üîß –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: email={current_email}, time={current_time}, enabled={notifications_enabled}")
    else:
        bot_logger.error(f"‚ùå daily_tasks_service = None –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ admin {admin_id}")
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
    current_email_escaped = escape_markdown_v2(current_email)
    current_time_escaped = escape_markdown_v2(str(current_time))
    status_icon = "üü¢ –≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "üî¥ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìß Email –∞–¥—Ä–µ—Å", callback_data="setup_email")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="setup_time")],
        [InlineKeyboardButton(text="üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="daily_tasks")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="settings_done")]
    ])
    
    await callback.message.edit_text(
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
        f"üìß *Email:* {current_email_escaped}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {current_time_escaped}\n"
        f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {status_icon}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    
    await callback.answer()


@router.callback_query(F.data == "settings_done")
async def callback_settings_done(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.message.edit_text(
        f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã*\n\n"
        f"ü§ñ *–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ*\n"
        f"üìß *Email –¥–ª—è –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω*\n"
        f"‚è∞ *–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ*\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily\\_tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á",
        parse_mode="MarkdownV2"
    )
    await callback.answer()


@router.callback_query(F.data == "daily_tasks")
async def callback_daily_tasks_redirect(callback: CallbackQuery):
    """Redirect –¥–ª—è –∫–Ω–æ–ø–∫–∏ daily_tasks - –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º cmd_daily_tasks –Ω–∞–ø—Ä—è–º—É—é"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ daily_tasks –∏–∑ handlers.py
    from .handlers import cmd_daily_tasks
    from aiogram.types import Message

    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    fake_message = callback.message
    fake_message.from_user = callback.from_user

    await cmd_daily_tasks(fake_message)
    await callback.answer()


@router.callback_query(F.data == "setup_time")
async def callback_setup_time(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïò 09:00", callback_data="time_09:00")],
        [InlineKeyboardButton(text="üïô 10:00", callback_data="time_10:00")],
        [InlineKeyboardButton(text="üïö 11:00", callback_data="time_11:00")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])
    
    await callback.message.edit_text(
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\\.",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("time_"))
async def callback_set_time(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    time_str = callback.data.replace("time_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    from ...services.daily_tasks_service import daily_tasks_service
    
    if daily_tasks_service:
        if admin_id not in daily_tasks_service.admin_settings:
            daily_tasks_service.admin_settings[admin_id] = {}
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–ö–°: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ time –æ–±—ä–µ–∫—Ç
        try:
            from datetime import time as time_obj
            hour, minute = map(int, time_str.split(':'))
            time_object = time_obj(hour, minute)
            daily_tasks_service.admin_settings[admin_id]['notification_time'] = time_object
            bot_logger.info(f"‚è∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ {time_str} –≤ time –æ–±—ä–µ–∫—Ç: {time_object}")
        except Exception as e:
            bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {time_str}: {e}")
            daily_tasks_service.admin_settings[admin_id]['notification_time'] = time_str
        
        await daily_tasks_service._save_admin_settings_to_db()
        
        bot_logger.info(f"‚úÖ Time {time_str} saved for admin {admin_id}")
    
    await callback.answer(f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await callback_back_to_settings(callback)


@router.callback_query(F.data == "toggle_notifications")
async def callback_toggle_notifications(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    from ...services.daily_tasks_service import daily_tasks_service
    
    if daily_tasks_service:
        if admin_id not in daily_tasks_service.admin_settings:
            daily_tasks_service.admin_settings[admin_id] = {}
        
        current_state = daily_tasks_service.admin_settings[admin_id].get('notifications_enabled', False)
        new_state = not current_state
        
        daily_tasks_service.admin_settings[admin_id]['notifications_enabled'] = new_state
        await daily_tasks_service._save_admin_settings_to_db()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        bot_logger.info(f"‚úÖ Notifications {status} for admin {admin_id}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await callback_back_to_settings(callback)


@router.callback_query(F.data == "start_menu")
async def callback_start_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks"),
            InlineKeyboardButton(text="üìÅ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="all_projects")
        ],
        [
            InlineKeyboardButton(text="üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="daily_tasks"),
            InlineKeyboardButton(text="üìù –ñ—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç", callback_data="work_journal")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_menu")
        ]
    ])
    
    await callback.message.edit_text(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HHIVP IT Assistant Bot\\!*\n\n"
        "ü§ñ *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n"
        "‚Ä¢ üë§ *–ú–æ–∏ –∑–∞–¥–∞—á–∏* \\- –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –≤–∞—Å –∑–∞–¥–∞—á–∏ –∏–∑ Plane\n"
        "‚Ä¢ üìÅ *–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã* \\- –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á\n"
        "‚Ä¢ üìã *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏* \\- –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "‚Ä¢ üìù *–ñ—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç* \\- –≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ\n"
        "‚Ä¢ ‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* \\- –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:*",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    
    await callback.answer()


@router.callback_query(F.data == "daily_tasks")
async def callback_daily_tasks_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks"),
            InlineKeyboardButton(text="üìÅ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="all_projects")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á", callback_data="back_to_settings"),
            InlineKeyboardButton(text="üîß –¢–µ—Å—Ç Plane API", callback_data="plane_test")
        ],
        [
            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")
        ]
    ])
    
    await callback.message.edit_text(
        "üìã *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ Plane\\.so:\n\n"
        "‚Ä¢ üë§ *–ú–æ–∏ –∑–∞–¥–∞—á–∏* \\- –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "‚Ä¢ üìÅ *–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã* \\- –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º\n"
        "‚Ä¢ ‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* \\- email –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ üîß *–¢–µ—Å—Ç API* \\- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    
    await callback.answer()


@router.callback_query(F.data == "plane_test")
async def callback_plane_test_menu(callback: CallbackQuery):
    """–¢–µ—Å—Ç Plane API –∏–∑ –º–µ–Ω—é"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    loading_msg = await callback.message.edit_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API\\.\\.\\.", parse_mode="MarkdownV2")
    
    try:
        from ...integrations.plane import plane_api
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not plane_api.configured:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            
            await loading_msg.edit_text(
                "‚ùå *Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ \\.env —Ñ–∞–π–ª–µ:\n"
                "‚Ä¢ PLANE\\_API\\_TOKEN\n"
                "‚Ä¢ PLANE\\_API\\_URL\n"
                "‚Ä¢ PLANE\\_WORKSPACE\\_SLUG",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_result = await plane_api.test_connection()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="daily_tasks")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])
        
        if test_result.get('success'):
            workspace_escaped = escape_markdown_v2(test_result.get('workspace', 'N/A'))
            projects_count = test_result.get('projects_count', 0)
            await loading_msg.edit_text(
                "‚úÖ *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API —É—Å–ø–µ—à–Ω–æ\\!*\n\n"
                f"üè¢ *Workspace:* {workspace_escaped}\n"
                f"üìÅ *–ü—Ä–æ–µ–∫—Ç–æ–≤:* {projects_count}\n"
                f"üì° *API Version:* v1\n"
                f"üîó *API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ*",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
        else:
            error_msg = escape_markdown_v2(test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            await loading_msg.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API*\n\n"
                f"üî• *–û—à–∏–±–∫–∞:* {error_msg}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ API\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Plane\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ workspace",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error in plane_test callback: {e}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])
        
        await loading_msg.edit_text(
            f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Plane API",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        
    await callback.answer()