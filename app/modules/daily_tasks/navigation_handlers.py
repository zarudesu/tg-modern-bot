"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any

from .filters import IsAdminFilter
from ...integrations.plane import plane_api
from ...utils.logger import bot_logger
from ...config import settings


router = Router()


def escape_markdown_v2(text: str) -> str:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2"""
    chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!', '@']
    for char in chars_to_escape:
        text = text.replace(char, f'\\{char}')
    return text


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.admin_user_id_list


@router.callback_query(F.data.startswith("all_tasks_"))
async def callback_all_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞ –∏–∑ –ö–≠–®–ê —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    loading_msg = await callback.message.edit_text(
        "üìã –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏ –∏–∑ –∫—ç—à–∞\\.\\.\\.",
        parse_mode="MarkdownV2"
    )

    try:
        from ...services.daily_tasks_service import daily_tasks_service
        from ...services.user_tasks_cache_service import user_tasks_cache_service

        if not daily_tasks_service:
            await loading_msg.edit_text(
                "‚ùå –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})

        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            await loading_msg.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á\\.",
                parse_mode="MarkdownV2"
            )
            return

        # üöÄ –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ö–≠–®–ê (–±—ã—Å—Ç—Ä–æ!)
        cached_tasks = await user_tasks_cache_service.get_cached_tasks(
            user_email=admin_email,
            include_overdue=True,
            include_today=True,
            include_upcoming=True,
            max_tasks=100  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 100 –∑–∞–¥–∞—á
        )

        if not cached_tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_tasks")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            await loading_msg.edit_text(
                f"üìã *–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ Plane*\n\n"
                f"üë§ Email: {escape_markdown_v2(admin_email)}\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: 0\n\n"
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –∫—ç—à–µ\\. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        tasks_by_project = {}
        for task in cached_tasks:
            project_name = task.project_name
            if project_name not in tasks_by_project:
                tasks_by_project[project_name] = []
            tasks_by_project[project_name].append(task)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        admin_email_escaped = escape_markdown_v2(admin_email)
        tasks_text = f"üìã *–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ Plane*\n\n"
        tasks_text += f"üë§ *Email:* {admin_email_escaped}\n"
        tasks_text += f"üìä *–í—Å–µ–≥–æ –∑–∞–¥–∞—á:* {len(cached_tasks)}\n"
        tasks_text += f"üìÅ *–ü—Ä–æ–µ–∫—Ç–æ–≤:* {len(tasks_by_project)}\n\n"

        task_counter = 1
        for project_name, project_tasks in tasks_by_project.items():
            project_name_escaped = escape_markdown_v2(project_name)
            tasks_text += f"üìÅ *{project_name_escaped}* \\({len(project_tasks)} –∑–∞–¥–∞—á\\)\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
            for task in project_tasks:
                state_emoji = task.state_emoji
                priority_emoji = task.priority_emoji
                task_name = escape_markdown_v2(task.title)
                task_url = task.task_url

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –°–û –°–°–´–õ–ö–û–ô (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∏–∂–µ)
                tasks_text += f"  {task_counter}\\. {state_emoji} {priority_emoji} [{task_name}]({task_url})\n"
                task_counter += 1

            tasks_text += "\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÅ –ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="daily_tasks"),
             InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_tasks")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        from aiogram.types import LinkPreviewOptions

        await loading_msg.edit_text(
            tasks_text,
            reply_markup=keyboard,
            parse_mode="MarkdownV2",
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )

    except Exception as e:
        bot_logger.error(f"Error in all_tasks callback: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "all_projects")
async def callback_all_projects(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –ö–≠–®–ê"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    try:
        from ...services.daily_tasks_service import daily_tasks_service
        from ...services.user_tasks_cache_service import user_tasks_cache_service

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})

        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            await callback.message.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∫—ç—à–∞
        all_tasks = await user_tasks_cache_service.get_cached_tasks(
            user_email=admin_email,
            include_overdue=True,
            include_today=True,
            include_upcoming=True,
            max_tasks=100
        )

        if not all_tasks:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ\n\n"
                "–û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\\.",
                parse_mode="MarkdownV2"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –∫—ç—à–∞
        projects_set = set(task.project_name for task in all_tasks)
        projects_list = sorted(list(projects_set))

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–æ 1 –≤ —Ä—è–¥)
        keyboard_buttons = []

        for project_name in projects_list[:20]:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ
            tasks_count = sum(1 for task in all_tasks if task.project_name == project_name)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            display_name = project_name[:30] + "..." if len(project_name) > 30 else project_name

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÅ {display_name} ({tasks_count})",
                    callback_data=f"project_{project_name}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        projects_count = len(projects_list)
        shown_count = min(20, projects_count)

        await callback.message.edit_text(
            f"üìÅ *–ü—Ä–æ–µ–∫—Ç—ã –≤ –∫—ç—à–µ*\n\n"
            f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_count}\n"
            f"üëÅ –ü–æ–∫–∞–∑–∞–Ω–æ: {shown_count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á:",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        bot_logger.error(f"Error in all_projects callback: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤",
            parse_mode="MarkdownV2"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("project_"))
async def callback_project_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ö–≠–®–ê"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: "project_PROJECT_NAME")
    project_name_raw = callback.data.replace("project_", "")

    await callback.message.edit_text("üìã –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏ –∏–∑ –∫—ç—à–∞\\.\\.\\.", parse_mode="MarkdownV2")

    try:
        from ...services.daily_tasks_service import daily_tasks_service
        from ...services.user_tasks_cache_service import user_tasks_cache_service

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})

        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            await callback.message.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∏–∑ –∫—ç—à–∞
        all_tasks = await user_tasks_cache_service.get_cached_tasks(
            user_email=admin_email,
            include_overdue=True,
            include_today=True,
            include_upcoming=True,
            max_tasks=100
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        project_tasks = [task for task in all_tasks if task.project_name == project_name_raw]

        if not project_tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
                [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            project_name_escaped = escape_markdown_v2(project_name_raw)
            await callback.message.edit_text(
                f"üìÅ *–ü—Ä–æ–µ–∫—Ç:* {project_name_escaped}\n\n"
                f"üì≠ –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–¥–∞—á –≤ –∫—ç—à–µ",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
        project_name_escaped = escape_markdown_v2(project_name_raw)
        tasks_text = f"üìÅ *–ü—Ä–æ–µ–∫—Ç:* {project_name_escaped}\n\n"
        tasks_text += f"üìä *–ó–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ:* {len(project_tasks)}\n\n"

        for i, task in enumerate(project_tasks, 1):
            state_emoji = task.state_emoji
            priority_emoji = task.priority_emoji
            task_name = escape_markdown_v2(task.title)
            task_url = task.task_url
            status_text = escape_markdown_v2(task.state_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            tasks_text += f"{i}\\. {state_emoji} {priority_emoji} [{task_name}]({task_url})\n"
            tasks_text += f"   üè∑Ô∏è _{status_text}_\n\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data=f"all_tasks_{admin_id}")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        from aiogram.types import LinkPreviewOptions

        await callback.message.edit_text(
            tasks_text,
            reply_markup=keyboard,
            parse_mode="MarkdownV2",
            link_preview_options=LinkPreviewOptions(is_disabled=True)
        )

    except Exception as e:
        bot_logger.error(f"Error in project_tasks callback: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞",
            parse_mode="MarkdownV2"
        )

    await callback.answer()


async def show_grouped_tasks(callback: CallbackQuery, project_id: str, project_name: str, tasks: List[Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    groups = {
        'urgent': [],
        'high': [],
        'medium': [],
        'low': [],
        'none': []
    }
    
    for task in tasks:
        priority = task.priority.lower()
        if priority in groups:
            groups[priority].append(task)
        else:
            groups['none'].append(task)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø —Å –∑–∞–¥–∞—á–∞–º–∏
    keyboard_buttons = []
    
    group_names = {
        'urgent': 'üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ',
        'high': 'üü† –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
        'low': 'üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
        'none': '‚ö™ –ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞'
    }
    
    for priority, group_tasks in groups.items():
        if group_tasks:
            group_name = group_names[priority]
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{group_name} ({len(group_tasks)})",
                    callback_data=f"group_{project_id}_{priority}"
                )
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏ —Å–ø–∏—Å–∫–æ–º", callback_data=f"list_{project_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    project_name_escaped = escape_markdown_v2(project_name)
    await callback.message.edit_text(
        f"üìÅ *–ü—Ä–æ–µ–∫—Ç:* {project_name_escaped}\n\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}\n\n"
        f"–ó–∞–¥–∞—á–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


async def show_tasks_list(callback: CallbackQuery, project_id: str, project_name: str, tasks: List[Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    keyboard_buttons = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    for i, task in enumerate(tasks[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–¥–∞—á
        task_title = task.name[:40] + "..." if len(task.name) > 40 else task.name
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{task.state_emoji} {task.priority_emoji} {task_title}",
                callback_data=f"task_{project_id}_{task.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    project_name_escaped = escape_markdown_v2(project_name)
    tasks_text = f"üìÅ *–ü—Ä–æ–µ–∫—Ç:* {project_name_escaped}\n\n"
    tasks_text += f"üìã *–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞:*\n\n"
    
    for i, task in enumerate(tasks[:10], 1):
        assignee = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω" if not task.assignee_details else task.assignee_name
        assignee_escaped = escape_markdown_v2(assignee)
        task_name_escaped = escape_markdown_v2(task.name)
        
        tasks_text += f"{i}\\. {task.state_emoji} {task.priority_emoji} {task_name_escaped}\n"
        tasks_text += f"   üë§ {assignee_escaped} | üè∑Ô∏è {task.state_name}\n"
        if task.target_date:
            date_escaped = escape_markdown_v2(task.target_date[:10])  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
            tasks_text += f"   üìÖ {date_escaped}\n"
        tasks_text += "\n"
    
    if len(tasks) > 10:
        tasks_text += f"\\.\\.\\. –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
    
    await callback.message.edit_text(
        tasks_text,
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data.startswith("group_"))
async def callback_task_group(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: group_{project_id}_{priority}
    parts = callback.data.replace("group_", "").split("_")
    if len(parts) < 2:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    project_id = parts[0]
    priority = parts[1]
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã\\.\\.\\.", parse_mode="MarkdownV2")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∑–∞–¥–∞—á–∏
        projects = await plane_api.get_all_projects()
        project_info = next((p for p in projects if p.get('id') == project_id), None)
        
        if not project_info:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return
        
        project_name = project_info.get('name', 'Unknown')
        all_tasks = await plane_api.get_project_tasks(project_id, include_subtasks=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        group_tasks = [task for task in all_tasks if task.priority.lower() == priority]
        
        if not group_tasks:
            await callback.message.edit_text(
                f"üì≠ –í –≥—Ä—É–ø–ø–µ '{priority}' –Ω–µ—Ç –∑–∞–¥–∞—á",
                parse_mode="MarkdownV2"
            )
            return
        
        await show_tasks_list(callback, project_id, f"{project_name} - {priority.title()}", group_tasks)
        
    except Exception as e:
        bot_logger.error(f"Error in task_group callback: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –≥—Ä—É–ø–ø—ã",
            parse_mode="MarkdownV2"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("task_"))
async def callback_task_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º callback data: task_{project_id}_{task_id}
    parts = callback.data.replace("task_", "").split("_", 1)
    if len(parts) < 2:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    project_id = parts[0]
    task_id = parts[1]
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏\\.\\.\\.", parse_mode="MarkdownV2")
    
    try:
        task = await plane_api.get_task_details(project_id, task_id)
        
        if not task:
            await callback.message.edit_text(
                "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                parse_mode="MarkdownV2"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        task_name_escaped = escape_markdown_v2(task.name)
        assignee = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω" if not task.assignee_details else task.assignee_name
        assignee_escaped = escape_markdown_v2(assignee)
        project_name_escaped = escape_markdown_v2(task.project_name)
        state_escaped = escape_markdown_v2(task.state_name)
        
        details_text = f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏*\n\n"
        details_text += f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {task_name_escaped}\n\n"
        details_text += f"üè¢ *–ü—Ä–æ–µ–∫—Ç:* {project_name_escaped}\n"
        details_text += f"üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {assignee_escaped}\n"
        details_text += f"üè∑Ô∏è *–°—Ç–∞—Ç—É—Å:* {task.state_emoji} {state_escaped}\n"
        details_text += f"üî• *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {task.priority_emoji} {task.priority.title()}\n"
        
        if task.target_date:
            date_escaped = escape_markdown_v2(task.target_date[:10])
            details_text += f"üìÖ *–°—Ä–æ–∫:* {date_escaped}"
            if task.is_overdue:
                details_text += " ‚ö†Ô∏è *–ü–†–û–°–†–û–ß–ï–ù–û*"
            elif task.is_due_today:
                details_text += " üî• *–°–ï–ì–û–î–ù–Ø*"
            details_text += "\n"
        
        if task.description:
            desc_escaped = escape_markdown_v2(task.description[:200])
            if len(task.description) > 200:
                desc_escaped += "\\.\\.\\."
            details_text += f"\nüìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{desc_escaped}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∑–∞–¥–∞—á–∞–º –ø—Ä–æ–µ–∫—Ç–∞", callback_data=f"project_{project_id}")],
            [InlineKeyboardButton(text="üìÅ –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="all_projects")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
        ])
        
        await callback.message.edit_text(
            details_text,
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error in task_details callback: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏",
            parse_mode="MarkdownV2"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("list_"))
async def callback_list_all_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å–ø–∏—Å–∫–æ–º"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    project_id = callback.data.replace("list_", "")
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\\.\\.\\.", parse_mode="MarkdownV2")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∑–∞–¥–∞—á–∏
        projects = await plane_api.get_all_projects()
        project_info = next((p for p in projects if p.get('id') == project_id), None)
        
        if not project_info:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="MarkdownV2"
            )
            return
        
        project_name = project_info.get('name', 'Unknown')
        tasks = await plane_api.get_project_tasks(project_id, include_subtasks=True)
        
        await show_tasks_list(callback, project_id, project_name, tasks)
        
    except Exception as e:
        bot_logger.error(f"Error in list_all_tasks callback: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
            parse_mode="MarkdownV2"
        )
    
    await callback.answer()


@router.callback_query(F.data == "my_tasks")
async def callback_my_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\\.\\.\\.", parse_mode="MarkdownV2")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        tasks = await plane_api.get_all_assigned_tasks_by_user_id(admin_id)
        
        if not tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])
            
            await callback.message.edit_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n"
                "‚Ä¢ –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—à email\n"
                "‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 10
        if len(tasks) > 10:
            await show_my_tasks_grouped(callback, tasks)
        else:
            await show_my_tasks_list(callback, tasks)
            
    except Exception as e:
        bot_logger.error(f"Error in my_tasks callback: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á",
            parse_mode="MarkdownV2"
        )
    
    await callback.answer()


async def show_my_tasks_grouped(callback: CallbackQuery, tasks: List[Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    projects_tasks = {}
    for task in tasks:
        project_name = task.project_name
        if project_name not in projects_tasks:
            projects_tasks[project_name] = []
        projects_tasks[project_name].append(task)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    keyboard_buttons = []
    
    for project_name, project_tasks in projects_tasks.items():
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        display_name = project_name[:35] + "..." if len(project_name) > 35 else project_name
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üìÅ {display_name} ({len(project_tasks)})",
                callback_data=f"my_project_{hash(project_name) % 10000}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üìã –í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏ —Å–ø–∏—Å–∫–æ–º", callback_data="my_tasks_list")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        f"üë§ *–ú–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}\n"
        f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(projects_tasks)}\n\n"
        f"–ó–∞–¥–∞—á–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


async def show_my_tasks_list(callback: CallbackQuery, tasks: List[Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á"""
    keyboard_buttons = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    for i, task in enumerate(tasks[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–¥–∞—á
        task_title = task.name[:35] + "..." if len(task.name) > 35 else task.name
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{task.state_emoji} {task.priority_emoji} {task_title}",
                callback_data=f"my_task_{task.project_detail.get('id', 'unknown')}_{task.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    tasks_text = f"üë§ *–ú–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n"
    
    for i, task in enumerate(tasks[:10], 1):
        task_name_escaped = escape_markdown_v2(task.name)
        project_escaped = escape_markdown_v2(task.project_name)
        
        tasks_text += f"{i}\\. {task.state_emoji} {task.priority_emoji} {task_name_escaped}\n"
        tasks_text += f"   üìÅ {project_escaped} | üè∑Ô∏è {task.state_name}\n"
        if task.target_date:
            date_escaped = escape_markdown_v2(task.target_date[:10])
            tasks_text += f"   üìÖ {date_escaped}"
            if task.is_overdue:
                tasks_text += " ‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–û"
            elif task.is_due_today:
                tasks_text += " üî• –°–ï–ì–û–î–ù–Ø"
            tasks_text += "\n"
        tasks_text += "\n"
    
    if len(tasks) > 10:
        tasks_text += f"\\.\\.\\. –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
    
    await callback.message.edit_text(
        tasks_text,
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data == "my_tasks_list")
async def callback_my_tasks_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏ —Å–ø–∏—Å–∫–æ–º"""
    admin_id = callback.from_user.id
    
    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\\.\\.\\.", parse_mode="MarkdownV2")
    
    try:
        tasks = await plane_api.get_all_assigned_tasks_by_user_id(admin_id)
        
        if not tasks:
            await callback.message.edit_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
                parse_mode="MarkdownV2"
            )
            return
        
        await show_my_tasks_list(callback, tasks)
        
    except Exception as e:
        bot_logger.error(f"Error in my_tasks_list callback: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
            parse_mode="MarkdownV2"
        )
    
    await callback.answer()