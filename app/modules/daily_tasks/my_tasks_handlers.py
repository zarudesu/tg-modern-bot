"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ "–ú–æ–∏ –∑–∞–¥–∞—á–∏" - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Any

from .filters import IsAdminFilter
from ...integrations.plane import plane_api
from ...utils.logger import bot_logger
from ...utils.markdown import escape_markdown_v2
from ...config import settings


router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.admin_user_id_list


@router.callback_query(F.data == "my_tasks")
async def callback_my_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\\.\\.\\.", parse_mode="MarkdownV2")

    try:
        # Get admin email from settings
        from ...services.daily_tasks_service import daily_tasks_service

        if not daily_tasks_service:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                parse_mode="MarkdownV2"
            )
            await callback.answer()
            return

        # Load settings from DB
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        admin_email = admin_settings.get('plane_email')

        if not admin_email:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            await callback.message.edit_text(
                "üìß *Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à email\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            await callback.answer()
            return

        # Get tasks by email
        bot_logger.info(f"üîÑ Fetching tasks for user {admin_id} with email {admin_email}")
        tasks = await plane_api.get_user_tasks(admin_email)
        bot_logger.info(f"‚úÖ Retrieved {len(tasks)} tasks for {admin_email}")

        if not tasks:
            admin_email_escaped = escape_markdown_v2(admin_email)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="my_tasks")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            await callback.message.edit_text(
                f"üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
                f"üë§ Email: {admin_email_escaped}\n\n"
                f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—à email\n"
                f"‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            await callback.answer()
            return

        if len(tasks) > 10:
            await show_my_tasks_grouped(callback, tasks)
        else:
            await show_my_tasks_list(callback, tasks)

    except Exception as e:
        bot_logger.error(f"Error in my_tasks callback: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á",
            parse_mode="MarkdownV2"
        )

    await callback.answer()


async def show_my_tasks_grouped(callback: CallbackQuery, tasks: List[Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
    projects_tasks = {}
    for task in tasks:
        project_name = task.project_name
        if project_name not in projects_tasks:
            projects_tasks[project_name] = []
        projects_tasks[project_name].append(task)

    keyboard_buttons = []

    for project_name, project_tasks in projects_tasks.items():
        display_name = project_name[:35] + "..." if len(project_name) > 35 else project_name

        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üìÅ {display_name} ({len(project_tasks)})",
                callback_data=f"my_project_{hash(project_name) % 10000}"
            )
        ])

    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üìã –í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏ —Å–ø–∏—Å–∫–æ–º", callback_data="my_tasks_list")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        f"üë§ *–ú–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}\n"
        f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(projects_tasks)}\n\n"
        f"–ó–∞–¥–∞—á–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


async def show_my_tasks_list(callback: CallbackQuery, tasks: List[Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á"""
    keyboard_buttons = []

    for i, task in enumerate(tasks[:10], 1):
        task_title = task.name[:35] + "..." if len(task.name) > 35 else task.name

        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{task.state_emoji} {task.priority_emoji} {task_title}",
                callback_data=f"my_task_{task.project_detail.get('id', 'unknown')}_{task.id}"
            )
        ])

    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    tasks_text = f"üë§ *–ú–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n"

    for i, task in enumerate(tasks[:10], 1):
        task_name_escaped = escape_markdown_v2(task.name)
        project_escaped = escape_markdown_v2(task.project_name)

        tasks_text += f"{i}\\. {task.state_emoji} {task.priority_emoji} {task_name_escaped}\n"
        tasks_text += f"   üìÅ {project_escaped} \\| üè∑Ô∏è {task.state_name}\n"
        if task.target_date:
            date_escaped = escape_markdown_v2(task.target_date[:10])
            tasks_text += f"   üìÖ {date_escaped}"
            if task.is_overdue:
                tasks_text += " ‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–û"
            elif task.is_due_today:
                tasks_text += " üî• –°–ï–ì–û–î–ù–Ø"
            tasks_text += "\n"
        tasks_text += "\n"

    if len(tasks) > 10:
        tasks_text += f"\\.\\.\\. –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"

    await callback.message.edit_text(
        tasks_text,
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data == "my_tasks_list")
async def callback_my_tasks_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏ —Å–ø–∏—Å–∫–æ–º"""
    admin_id = callback.from_user.id

    if not is_admin(admin_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\\.\\.\\.", parse_mode="MarkdownV2")

    try:
        # Get admin email from settings
        from ...services.daily_tasks_service import daily_tasks_service

        if not daily_tasks_service:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                parse_mode="MarkdownV2"
            )
            await callback.answer()
            return

        # Load settings from DB
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        admin_email = admin_settings.get('plane_email')

        if not admin_email:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            await callback.message.edit_text(
                "üìß *Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à email\\.",
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            await callback.answer()
            return

        # Get tasks by email
        tasks = await plane_api.get_user_tasks(admin_email)

        if not tasks:
            await callback.message.edit_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
                parse_mode="MarkdownV2"
            )
            await callback.answer()
            return

        await show_my_tasks_list(callback, tasks)

    except Exception as e:
        bot_logger.error(f"Error in my_tasks_list callback: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
            parse_mode="MarkdownV2"
        )

    await callback.answer()
