"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥—É–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç
"""
from datetime import date, timedelta
from typing import List, Optional, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..utils.work_journal_constants import (
    CALLBACK_PREFIX, 
    CallbackAction, 
    EMOJI,
    DEFAULT_DURATIONS
)


def build_callback_data(action: CallbackAction, data: str = "") -> str:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
    if data:
        return f"{CALLBACK_PREFIX}:{action.value}:{data}"
    return f"{CALLBACK_PREFIX}:{action.value}"


def parse_callback_data(callback_data: str) -> Tuple[str, str]:
    """–†–∞–∑–æ–±—Ä–∞—Ç—å callback_data"""
    parts = callback_data.split(":", 2)
    if len(parts) >= 2:
        action = parts[1]
        data = parts[2] if len(parts) > 2 else ""
        return action, data
    return "", ""


def create_date_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    
    # –°–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞
    today = date.today()
    yesterday = today - timedelta(days=1)
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})",
            callback_data=build_callback_data(CallbackAction.SELECT_TODAY)
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –í—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})",
            callback_data=build_callback_data(CallbackAction.SELECT_YESTERDAY)
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –î—Ä—É–≥–∞—è –¥–∞—Ç–∞",
            callback_data=build_callback_data(CallbackAction.SELECT_CUSTOM_DATE)
        )
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_company_selection_keyboard(companies: List[str]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(companies), 2):
        row_buttons = []
        for j in range(i, min(i + 2, len(companies))):
            company = companies[j]
            row_buttons.append(
                InlineKeyboardButton(
                    text=company,
                    callback_data=build_callback_data(CallbackAction.SELECT_COMPANY, company)
                )
            )
        builder.row(*row_buttons)
    
    # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['add']} –î—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
            callback_data=build_callback_data(CallbackAction.ADD_CUSTOM_COMPANY)
        )
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=build_callback_data(CallbackAction.BACK)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_duration_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(DEFAULT_DURATIONS), 2):
        row_buttons = []
        for j in range(i, min(i + 2, len(DEFAULT_DURATIONS))):
            duration = DEFAULT_DURATIONS[j]
            row_buttons.append(
                InlineKeyboardButton(
                    text=duration,
                    callback_data=build_callback_data(CallbackAction.SELECT_DURATION, duration)
                )
            )
        builder.row(*row_buttons)
    
    # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['add']} –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è",
            callback_data=build_callback_data(CallbackAction.ADD_CUSTOM_DURATION)
        )
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=build_callback_data(CallbackAction.BACK)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_travel_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç (–≤—ã–µ–∑–¥/—É–¥–∞–ª–µ–Ω–Ω–æ)"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['travel']} –î–∞, –±—ã–ª –≤—ã–µ–∑–¥",
            callback_data=build_callback_data(CallbackAction.SELECT_TRAVEL_YES)
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['remote']} –ù–µ—Ç, —É–¥–∞–ª–µ–Ω–Ω–æ",
            callback_data=build_callback_data(CallbackAction.SELECT_TRAVEL_NO)
        )
    )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=build_callback_data(CallbackAction.BACK)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_worker_selection_keyboard(workers: List[str], selected_workers: List[str] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)"""
    builder = InlineKeyboardBuilder()
    
    if selected_workers is None:
        selected_workers = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –≤—ã–±–æ—Ä–∞
    for worker in workers:
        is_selected = worker in selected_workers
        prefix = "‚úÖ " if is_selected else ""
        
        builder.row(
            InlineKeyboardButton(
                text=f"{prefix}{EMOJI['worker']} {worker}",
                callback_data=build_callback_data(CallbackAction.TOGGLE_WORKER, worker)
            )
        )
    
    # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['add']} –î—Ä—É–≥–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            callback_data=build_callback_data(CallbackAction.ADD_CUSTOM_WORKER)
        )
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
    if selected_workers:
        builder.row(
            InlineKeyboardButton(
                text=f"{EMOJI['check']} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä ({len(selected_workers)})",
                callback_data=build_callback_data(CallbackAction.CONFIRM_WORKERS)
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=build_callback_data(CallbackAction.BACK)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['check']} –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            callback_data=build_callback_data(CallbackAction.CONFIRM_SAVE)
        )
    )

    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['edit']} –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=build_callback_data(CallbackAction.EDIT_ENTRY)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="show_main_menu"
        )
    )

    return builder.as_markup()


def create_description_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=build_callback_data(CallbackAction.BACK)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_history_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ü–µ—Ä–∏–æ–¥
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –°–µ–≥–æ–¥–Ω—è",
            callback_data=build_callback_data(CallbackAction.HISTORY_TODAY)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –í—á–µ—Ä–∞",
            callback_data=build_callback_data(CallbackAction.HISTORY_YESTERDAY)
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –ó–∞ –Ω–µ–¥–µ–ª—é",
            callback_data=build_callback_data(CallbackAction.HISTORY_WEEK)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –ó–∞ –º–µ—Å—è—Ü",
            callback_data=build_callback_data(CallbackAction.HISTORY_MONTH)
        )
    )
    
    # –§–∏–ª—å—Ç—Ä—ã
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['company']} –ü–æ –∫–æ–º–ø–∞–Ω–∏–∏",
            callback_data=build_callback_data(CallbackAction.FILTER_COMPANY)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['worker']} –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é",
            callback_data=build_callback_data(CallbackAction.FILTER_WORKER)
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['travel']} –¢–æ–ª—å–∫–æ –≤—ã–µ–∑–¥—ã",
            callback_data=build_callback_data(CallbackAction.FILTER_TRAVEL)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['remote']} –¢–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∫–∞",
            callback_data=build_callback_data(CallbackAction.FILTER_REMOTE)
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data="show_main_menu"
        )
    )
    
    return builder.as_markup()


def create_report_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç",
            callback_data=build_callback_data(CallbackAction.REPORT_DAILY)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
            callback_data=build_callback_data(CallbackAction.REPORT_WEEKLY)
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['date']} –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç",
            callback_data=build_callback_data(CallbackAction.REPORT_MONTHLY)
        )
    )
    
    # –û—Ç—á–µ—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['worker']} –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º",
            callback_data=build_callback_data(CallbackAction.REPORT_BY_WORKER)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['company']} –ü–æ –∫–æ–º–ø–∞–Ω–∏—è–º",
            callback_data=build_callback_data(CallbackAction.REPORT_BY_COMPANY)
        )
    )
    
    return builder.as_markup()


def create_back_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥",
            callback_data=build_callback_data(CallbackAction.BACK)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_continue_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['forward']} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            callback_data=build_callback_data(CallbackAction.CONTINUE)
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"{EMOJI['edit']} –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
            callback_data=build_callback_data(CallbackAction.SELECT_DATE)
        ),
        InlineKeyboardButton(
            text=f"{EMOJI['cross']} –û—Ç–º–µ–Ω–∞",
            callback_data=build_callback_data(CallbackAction.CANCEL)
        )
    )
    
    return builder.as_markup()


def create_description_input_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç - –ø—Ä–æ—Å—Ç–æ –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞"""
    return create_back_cancel_keyboard()
