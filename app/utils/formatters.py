"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
"""
from typing import Dict, Any, List, Optional
from datetime import datetime


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    if not text:
        return ""
    
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text


def format_device_info(device: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    name = escape_markdown(device.get('name', 'N/A'))
    device_type = device.get('device_type', {})
    device_type_name = escape_markdown(device_type.get('display', 'Unknown'))
    
    site = device.get('site', {})
    site_name = escape_markdown(site.get('name', 'N/A'))
    
    status = device.get('status', {})
    status_label = escape_markdown(status.get('label', 'Unknown'))
    
    role = device.get('role', {})
    role_name = escape_markdown(role.get('name', 'N/A'))
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message = f"üñ•Ô∏è *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* {name}\n"
    message += f"üì± *–¢–∏–ø:* {device_type_name}\n"
    message += f"üè¢ *–°–∞–π—Ç:* {site_name}\n"
    message += f"üîß *–†–æ–ª—å:* {role_name}\n"
    message += f"üìä *–°—Ç–∞—Ç—É—Å:* {status_label}\n"
    
    # IP –∞–¥—Ä–µ—Å–∞
    primary_ip4 = device.get('primary_ip4')
    if primary_ip4:
        ip_display = escape_markdown(primary_ip4.get('display', ''))
        message += f"üåê *IP –∞–¥—Ä–µ—Å:* {ip_display}\n"
    
    # –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
    serial = device.get('serial', '')
    if serial:
        message += f"üî¢ *–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:* {escape_markdown(serial)}\n"
    
    # Asset tag
    asset_tag = device.get('asset_tag', '')
    if asset_tag:
        message += f"üè∑Ô∏è *Asset Tag:* {escape_markdown(asset_tag)}\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = device.get('description', '')
    if description:
        message += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {escape_markdown(description)}\n"
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    latitude = device.get('latitude')
    longitude = device.get('longitude')
    if latitude and longitude:
        message += f"üìç *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:* {latitude}, {longitude}\n"
    
    # –ö–ª–∞—Å—Ç–µ—Ä
    cluster = device.get('cluster')
    if cluster:
        cluster_name = escape_markdown(cluster.get('name', ''))
        message += f"‚òÅÔ∏è *–ö–ª–∞—Å—Ç–µ—Ä:* {cluster_name}\n"
    
    return message


def format_site_info(site: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–π—Ç–µ"""
    name = escape_markdown(site.get('name', 'N/A'))
    slug = escape_markdown(site.get('slug', 'N/A'))
    
    status = site.get('status', {})
    status_label = escape_markdown(status.get('label', 'Unknown'))
    
    region = site.get('region', {})
    region_name = escape_markdown(region.get('name', 'N/A')) if region else 'N/A'
    
    message = f"üè¢ *–°–∞–π—Ç:* {name}\n"
    message += f"üîó *Slug:* {slug}\n"
    message += f"üåç *–†–µ–≥–∏–æ–Ω:* {region_name}\n"
    message += f"üìä *–°—Ç–∞—Ç—É—Å:* {status_label}\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = site.get('description', '')
    if description:
        message += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {escape_markdown(description)}\n"
    
    # –§–∏–∑–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å
    physical_address = site.get('physical_address', '')
    if physical_address:
        message += f"üìç *–ê–¥—Ä–µ—Å:* {escape_markdown(physical_address)}\n"
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    contact_name = site.get('contact_name', '')
    contact_phone = site.get('contact_phone', '')
    contact_email = site.get('contact_email', '')
    
    if contact_name or contact_phone or contact_email:
        message += "\nüë§ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
        if contact_name:
            message += f"  ‚Ä¢ –ò–º—è: {escape_markdown(contact_name)}\n"
        if contact_phone:
            message += f"  ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {escape_markdown(contact_phone)}\n"
        if contact_email:
            message += f"  ‚Ä¢ Email: {escape_markdown(contact_email)}\n"
    
    return message


def format_search_results(results: Dict[str, List[Dict]], query: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    escaped_query = escape_markdown(query)
    message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* {escaped_query}\n\n"
    
    total_results = sum(len(items) for items in results.values())
    
    if total_results == 0:
        return f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É *{escaped_query}* –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\."
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    devices = results.get('devices', [])
    if devices:
        message += "üñ•Ô∏è *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*\n"
        for i, device in enumerate(devices[:5], 1):
            name = escape_markdown(device.get('name', 'N/A'))
            device_type = device.get('device_type', {})
            type_name = escape_markdown(device_type.get('display', 'Unknown'))
            message += f"  {i}\\. {name} \\({type_name}\\)\n"
        
        if len(devices) > 5:
            message += f"  \\.\\.\\. –∏ –µ—â–µ {len(devices) - 5} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        message += "\n"
    
    # –°–∞–π—Ç—ã
    sites = results.get('sites', [])
    if sites:
        message += "üè¢ *–°–∞–π—Ç—ã:*\n"
        for i, site in enumerate(sites[:5], 1):
            name = escape_markdown(site.get('name', 'N/A'))
            region = site.get('region', {})
            region_name = escape_markdown(region.get('name', '')) if region else ''
            location_info = f" \\({region_name}\\)" if region_name else ""
            message += f"  {i}\\. {name}{location_info}\n"
        
        if len(sites) > 5:
            message += f"  \\.\\.\\. –∏ –µ—â–µ {len(sites) - 5} —Å–∞–π—Ç–æ–≤\n"
        message += "\n"
    
    # IP –∞–¥—Ä–µ—Å–∞
    ip_addresses = results.get('ip_addresses', [])
    if ip_addresses:
        message += "üåê *IP –∞–¥—Ä–µ—Å–∞:*\n"
        for i, ip in enumerate(ip_addresses[:5], 1):
            address = escape_markdown(ip.get('display', 'N/A'))
            description = ip.get('description', '')
            desc_text = f" \\- {escape_markdown(description)}" if description else ""
            message += f"  {i}\\. {address}{desc_text}\n"
        
        if len(ip_addresses) > 5:
            message += f"  \\.\\.\\. –∏ –µ—â–µ {len(ip_addresses) - 5} –∞–¥—Ä–µ—Å–æ–≤\n"
        message += "\n"
    
    return message.rstrip()


def format_error_message(error_type: str, details: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    error_messages = {
        "api_error": "üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
        "auth_error": "üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\\.",
        "validation_error": "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥\\.",
        "not_found": "‚ùå –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\\.",
        "timeout": "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\\.",
        "rate_limit": "üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\\. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ\\.",
        "unknown": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\\."
    }
    
    base_message = error_messages.get(error_type, error_messages["unknown"])
    
    if details:
        escaped_details = escape_markdown(details)
        return f"{base_message}\n\n*–î–µ—Ç–∞–ª–∏:* {escaped_details}"
    
    return base_message


def format_help_message() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    return (
        "ü§ñ *HHIVP IT Assistant Bot \\- –°–ø—Ä–∞–≤–∫–∞*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üöÄ `/start` \\- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚ùì `/help` \\- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "üë§ `/profile` \\- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "üèì `/ping` \\- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n\n"
        "*üìã –ñ—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç:*\n"
        "üìù `/journal` \\- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å\n"
        "üìä `/history` \\- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç\n"
        "üìà `/report` \\- –û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "*üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏:*\n"
        "üè¢ `/companies` \\- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π\n"
        "üóë `/delete_company –ù–∞–∑–≤–∞–Ω–∏–µ` \\- –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é\n"
        "‚ö†Ô∏è `/force_delete_company –ù–∞–∑–≤–∞–Ω–∏–µ` \\- –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏\n\n"
        "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç:*\n"
        "‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n"
        "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–µ–∑–¥–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π\n\n"
        "_–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\\._"
    )


def format_user_profile(user: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = escape_markdown(user.get('username', 'N/A'))
    first_name = escape_markdown(user.get('first_name', 'N/A'))
    role = escape_markdown(user.get('role', 'guest'))
    
    created_at = user.get('created_at')
    if isinstance(created_at, datetime):
        created_date = created_at.strftime('%d.%m.%Y %H:%M')
    else:
        created_date = 'N/A'
    
    last_seen = user.get('last_seen')
    if isinstance(last_seen, datetime):
        last_seen_date = last_seen.strftime('%d.%m.%Y %H:%M')
    else:
        last_seen_date = 'N/A'
    
    message = f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
    message += f"üè∑Ô∏è *Username:* @{username}\n"
    message += f"üëã *–ò–º—è:* {first_name}\n"
    message += f"üîß *–†–æ–ª—å:* {role}\n"
    message += f"üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* {escape_markdown(created_date)}\n"
    message += f"üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {escape_markdown(last_seen_date)}\n"
    
    return message
