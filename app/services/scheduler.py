"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
"""
import asyncio
from datetime import datetime, timedelta, timezone
from typing import Optional
import pytz

from ..services.daily_tasks_service import daily_tasks_service
# CACHE DISABLED: user_tasks_cache_service removed - using direct Plane API calls
from ..services.task_reports_service import task_reports_service
from ..utils.logger import bot_logger
from ..config import settings
from ..database.database import get_async_session


class DailyTasksScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞"""
    
    def __init__(self):
        self.running = False
        self.task: Optional[asyncio.Task] = None
        self.sync_task: Optional[asyncio.Task] = None
        self.reminder_task: Optional[asyncio.Task] = None
        self.check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self.cache_sync_interval = 1800  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        self.reminder_interval = 1800  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            bot_logger.warning("Daily tasks scheduler already running")
            return

        self.running = True
        self.task = asyncio.create_task(self._scheduler_loop())
        # CACHE DISABLED: Direct API calls instead (rate limit 600/min)
        # self.sync_task = asyncio.create_task(self._cache_sync_loop())
        self.reminder_task = asyncio.create_task(self._reminders_loop())
        bot_logger.info("Daily tasks scheduler and task reminders started (cache sync disabled)")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.running:
            return
        
        self.running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        if self.sync_task:
            self.sync_task.cancel()
            try:
                await self.sync_task
            except asyncio.CancelledError:
                pass

        if self.reminder_task:
            self.reminder_task.cancel()
            try:
                await self.reminder_task
            except asyncio.CancelledError:
                pass

        bot_logger.info("Daily tasks scheduler, cache sync and task reminders stopped")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        last_check_date = None

        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ daily_tasks_service
                if not daily_tasks_service:
                    bot_logger.debug("Daily tasks service not initialized yet, waiting...")
                    await asyncio.sleep(self.check_interval)
                    continue

                current_time = datetime.now()
                current_date = current_time.date()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å
                if last_check_date != current_date:
                    await self._check_and_send_daily_tasks()
                    last_check_date = current_date

                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                await asyncio.sleep(self.check_interval)

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"Error in scheduler loop: {e}")
                await asyncio.sleep(self.check_interval)
    
    async def _check_and_send_daily_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞–º"""
        if not daily_tasks_service:
            return
        
        admins_to_notify = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        for admin_id in settings.admin_user_id_list:
            if daily_tasks_service.should_send_now(admin_id):
                admins_to_notify.append(admin_id)
        
        if not admins_to_notify:
            return
        
        bot_logger.info(f"Sending daily tasks to {len(admins_to_notify)} admins")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        results = {}
        for admin_id in admins_to_notify:
            results[admin_id] = await daily_tasks_service.send_daily_tasks_to_admin(admin_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for success in results.values() if success)
        bot_logger.info(f"Daily tasks sent successfully to {successful}/{len(results)} admins")
    
    async def _cache_sync_loop(self):
        """–¶–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
        while self.running:
            try:
                bot_logger.info("üîÑ Starting automatic cache sync for all users")
                synced_count = await user_tasks_cache_service.sync_all_users()

                if synced_count > 0:
                    bot_logger.info(f"‚úÖ Automatic cache sync completed for {synced_count} users")
                else:
                    bot_logger.debug("üìä No users needed cache sync")

                # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(self.cache_sync_interval)

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"Error in cache sync loop: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(300)

    async def _reminders_loop(self):
        """–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ—Ç—á—ë—Ç–∞—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
        from aiogram import Bot
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        while self.running:
            try:
                bot_logger.info("üîî Starting task reports reminder check")

                # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ daily_tasks_service (–æ–Ω —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
                if not daily_tasks_service or not daily_tasks_service.bot_instance:
                    bot_logger.debug("Daily tasks service or bot instance not initialized yet, waiting...")
                    await asyncio.sleep(self.reminder_interval)
                    continue

                bot = daily_tasks_service.bot_instance

                # –ü–æ–ª—É—á–∞–µ–º pending –æ—Ç—á—ë—Ç—ã
                async for session in get_async_session():
                    pending_reports = await task_reports_service.get_pending_reports(session)

                    if not pending_reports:
                        bot_logger.debug("üìä No pending task reports need reminders")
                        break

                    bot_logger.info(f"üì® Found {len(pending_reports)} pending task reports")

                    for report in pending_reports:
                        try:
                            hours_elapsed = report.hours_since_closed

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            reminder_level = 0
                            urgency_emoji = "üí¨"
                            urgency_text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

                            if hours_elapsed >= 6:
                                reminder_level = 3
                                urgency_emoji = "üö®"
                                urgency_text = "–ö–†–ò–¢–ò–ß–ù–û"
                            elif hours_elapsed >= 3:
                                reminder_level = 2
                                urgency_emoji = "‚ö†Ô∏è"
                                urgency_text = "–°–†–û–ß–ù–û"
                            elif hours_elapsed >= 1:
                                reminder_level = 1
                                urgency_emoji = "‚è∞"
                                urgency_text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                            else:
                                # –ï—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª 1 —á–∞—Å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                                continue

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            if report.last_reminder_at:
                                time_since_reminder = (datetime.now(timezone.utc) - report.last_reminder_at).total_seconds() / 60
                                if time_since_reminder < 25:  # –ú–∏–Ω–∏–º—É–º 25 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
                                    bot_logger.debug(
                                        f"‚è≠Ô∏è Skipping reminder for TaskReport #{report.id} "
                                        f"(last reminder {time_since_reminder:.0f}min ago)"
                                    )
                                    continue

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            hours_str = f"{hours_elapsed:.1f}" if hours_elapsed < 2 else f"{int(hours_elapsed)}"

                            message_text = (
                                f"{urgency_emoji} **{urgency_text}\\!** –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—á—ë—Ç –æ –∑–∞–¥–∞—á–µ\n\n"
                                f"**–ó–∞–¥–∞—á–∞:** \\#{report.plane_sequence_id}\n"
                                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {report.task_title or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                                f"**–ó–∞–∫—Ä—ã—Ç–æ:** {hours_str} —á –Ω–∞–∑–∞–¥\n"
                                f"**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:** {report.reminder_count + 1}"
                            )

                            # –ö–Ω–æ–ø–∫–∞
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(
                                    text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á—ë—Ç",
                                    callback_data=f"fill_report:{report.id}"
                                )]
                            ])

                            # –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
                            admin_to_notify = report.closed_by_telegram_id

                            # –ï—Å–ª–∏ 6+ —á–∞—Å–æ–≤ - —É–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∞–¥–º–∏–Ω–æ–≤
                            if reminder_level >= 3:
                                admins_list = settings.admin_user_id_list
                            else:
                                admins_list = [admin_to_notify] if admin_to_notify else settings.admin_user_id_list

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            sent_count = 0
                            for admin_id in admins_list:
                                try:
                                    await bot.send_message(
                                        chat_id=admin_id,
                                        text=message_text,
                                        reply_markup=keyboard,
                                        parse_mode="MarkdownV2"
                                    )
                                    sent_count += 1
                                except Exception as e:
                                    bot_logger.warning(f"‚ö†Ô∏è Failed to send reminder to admin {admin_id}: {e}")

                            if sent_count > 0:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                                await task_reports_service.update_reminder_sent(
                                    session=session,
                                    task_report_id=report.id,
                                    reminder_level=reminder_level
                                )

                                bot_logger.info(
                                    f"‚úÖ Sent reminder for TaskReport #{report.id} "
                                    f"(level {reminder_level}, {sent_count} admins)"
                                )

                        except Exception as e:
                            bot_logger.error(f"‚ùå Error sending reminder for TaskReport #{report.id}: {e}")

                    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
                    break

                # –ñ–¥—ë–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.reminder_interval)

            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"Error in reminders loop: {e}")
                import traceback
                bot_logger.error(traceback.format_exc())
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(300)

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        return self.running


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = DailyTasksScheduler()
