"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
"""
import asyncio
from datetime import datetime, timedelta
from typing import Optional
import pytz

from ..services.daily_tasks_service import daily_tasks_service
from ..services.user_tasks_cache_service import user_tasks_cache_service
from ..utils.logger import bot_logger
from ..config import settings


class DailyTasksScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞"""
    
    def __init__(self):
        self.running = False
        self.task: Optional[asyncio.Task] = None
        self.sync_task: Optional[asyncio.Task] = None
        self.check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self.cache_sync_interval = 1800  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            bot_logger.warning("Daily tasks scheduler already running")
            return
        
        if not daily_tasks_service:
            bot_logger.error("Daily tasks service not initialized")
            return
        
        self.running = True
        self.task = asyncio.create_task(self._scheduler_loop())
        self.sync_task = asyncio.create_task(self._cache_sync_loop())
        bot_logger.info("Daily tasks scheduler and cache sync started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.running:
            return
        
        self.running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        if self.sync_task:
            self.sync_task.cancel()
            try:
                await self.sync_task
            except asyncio.CancelledError:
                pass
        
        bot_logger.info("Daily tasks scheduler and cache sync stopped")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        last_check_date = None
        
        while self.running:
            try:
                current_time = datetime.now()
                current_date = current_time.date()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å
                if last_check_date != current_date:
                    await self._check_and_send_daily_tasks()
                    last_check_date = current_date
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                await asyncio.sleep(self.check_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"Error in scheduler loop: {e}")
                await asyncio.sleep(self.check_interval)
    
    async def _check_and_send_daily_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞–º"""
        if not daily_tasks_service:
            return
        
        admins_to_notify = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        for admin_id in settings.admin_user_id_list:
            if daily_tasks_service.should_send_now(admin_id):
                admins_to_notify.append(admin_id)
        
        if not admins_to_notify:
            return
        
        bot_logger.info(f"Sending daily tasks to {len(admins_to_notify)} admins")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        results = {}
        for admin_id in admins_to_notify:
            results[admin_id] = await daily_tasks_service.send_daily_tasks_to_admin(admin_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for success in results.values() if success)
        bot_logger.info(f"Daily tasks sent successfully to {successful}/{len(results)} admins")
    
    async def _cache_sync_loop(self):
        """–¶–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
        while self.running:
            try:
                bot_logger.info("üîÑ Starting automatic cache sync for all users")
                synced_count = await user_tasks_cache_service.sync_all_users()
                
                if synced_count > 0:
                    bot_logger.info(f"‚úÖ Automatic cache sync completed for {synced_count} users")
                else:
                    bot_logger.debug("üìä No users needed cache sync")
                
                # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(self.cache_sync_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                bot_logger.error(f"Error in cache sync loop: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(300)
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        return self.running


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = DailyTasksScheduler()
