"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
"""
import json
from typing import List, Dict, Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from aiogram import Bot

from ..database.work_journal_models import (
    WorkJournalEntry, 
    WorkJournalWorker, 
    UserNotificationPreferences
)
from ..database.models import BotUser
from ..utils.logger import bot_logger


class WorkerMentionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, session: AsyncSession, bot: Bot):
        self.session = session
        self.bot = bot
    
    async def get_worker_mentions(self, worker_names: List[str]) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        result = await self.session.execute(
            select(WorkJournalWorker)
            .where(
                WorkJournalWorker.name.in_(worker_names),
                WorkJournalWorker.is_active == True,
                WorkJournalWorker.mention_enabled == True
            )
        )
        workers = result.scalars().all()
        
        mentions = []
        for worker in workers:
            mention_data = {
                "name": worker.name,
                "telegram_username": worker.telegram_username,
                "telegram_user_id": worker.telegram_user_id,
                "mention_text": f"@{worker.telegram_username}" if worker.telegram_username else worker.name
            }
            mentions.append(mention_data)
        
        return mentions
    
    def format_work_assignment_message(
        self, 
        entry: WorkJournalEntry, 
        creator_name: str,
        mentions: List[Dict]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        mention_texts = []
        for mention in mentions:
            mention_texts.append(mention["mention_text"])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∏–º–µ–Ω–∞
        if not mention_texts:
            try:
                worker_names = json.loads(entry.worker_names)
                mention_texts = worker_names
            except (json.JSONDecodeError, TypeError):
                mention_texts = ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"]
        
        workers_text = ", ".join(mention_texts)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Sheets
        from ..config import settings
        
        message = (
            f"üìã **–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞–±–æ—Ç**\n\n"
            f"üë• **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:** {workers_text}\n"
            f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {entry.company}\n"
            f"üìÖ **–î–∞—Ç–∞:** {entry.work_date.strftime('%d.%m.%Y')}\n"
            f"‚è± **–í—Ä–µ–º—è:** {entry.work_duration}\n"
            f"üöó **–¢–∏–ø:** {'–í—ã–µ–∑–¥' if entry.is_travel else '–£–¥–∞–ª–µ–Ω–Ω–æ'}\n\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{entry.work_description}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets (clickable link)
        message += f"üë§ **–°–æ–∑–¥–∞–ª:** {creator_name}\n"

        if settings.google_sheets_url:
            # Markdown clickable link: [text](URL)
            message += f"[üìä Google Sheets]({settings.google_sheets_url})\n"

        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

        return message
    
    async def send_work_assignment_notifications(
        self, 
        entry: WorkJournalEntry, 
        creator_name: str,
        chat_id: int
    ) -> Tuple[bool, List[str]]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        
        Returns:
            Tuple[bool, List[str]]: (success, list_of_errors)
        """
        errors = []
        
        try:
            # –ü–∞—Ä—Å–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            worker_names = json.loads(entry.worker_names)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            mentions = await self.get_worker_mentions(worker_names)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            message = self.format_work_assignment_message(entry, creator_name, mentions)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            try:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode="Markdown"
                )
                bot_logger.info(f"Work assignment notification sent to chat {chat_id}")
            except Exception as e:
                error_msg = f"Failed to send chat notification: {str(e)}"
                errors.append(error_msg)
                bot_logger.error(error_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª)
            for mention in mentions:
                if mention["telegram_user_id"]:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_prefs = await self.get_user_notification_preferences(
                            mention["telegram_user_id"]
                        )
                        
                        if user_prefs and user_prefs.enable_work_assignment_notifications:
                            personal_message = (
                                f"üîî **–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞**\n\n"
                                f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {entry.company}\n"
                                f"üìÖ **–î–∞—Ç–∞:** {entry.work_date.strftime('%d.%m.%Y')}\n"
                                f"‚è± **–í—Ä–µ–º—è:** {entry.work_duration}\n"
                                f"üöó **–¢–∏–ø:** {'–í—ã–µ–∑–¥' if entry.is_travel else '–£–¥–∞–ª–µ–Ω–Ω–æ'}\n\n"
                                f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{entry.work_description}\n\n"
                                f"üë§ **–ù–∞–∑–Ω–∞—á–∏–ª:** {creator_name}\n\n"
                                f"_–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings_"
                            )
                            
                            await self.bot.send_message(
                                chat_id=mention["telegram_user_id"],
                                text=personal_message,
                                parse_mode="Markdown"
                            )
                            
                            bot_logger.info(f"Personal notification sent to {mention['name']} ({mention['telegram_user_id']})")
                        
                    except Exception as e:
                        error_msg = f"Failed to send personal notification to {mention['name']}: {str(e)}"
                        errors.append(error_msg)
                        bot_logger.warning(error_msg)
            
            return len(errors) == 0, errors
            
        except Exception as e:
            error_msg = f"Error in send_work_assignment_notifications: {str(e)}"
            errors.append(error_msg)
            bot_logger.error(error_msg)
            return False, errors
    
    async def get_user_notification_preferences(
        self, 
        telegram_user_id: int
    ) -> Optional[UserNotificationPreferences]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.session.execute(
            select(UserNotificationPreferences)
            .where(UserNotificationPreferences.telegram_user_id == telegram_user_id)
        )
        return result.scalar_one_or_none()
    
    async def set_user_notification_preferences(
        self,
        telegram_user_id: int,
        enable_work_assignments: bool = None,
        enable_mentions: bool = None
    ) -> UserNotificationPreferences:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        existing = await self.get_user_notification_preferences(telegram_user_id)
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            if enable_work_assignments is not None:
                existing.enable_work_assignment_notifications = enable_work_assignments
            if enable_mentions is not None:
                existing.enable_mentions_in_chat = enable_mentions
            
            await self.session.commit()
            return existing
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            new_prefs = UserNotificationPreferences(
                telegram_user_id=telegram_user_id,
                enable_work_assignment_notifications=enable_work_assignments or False,
                enable_mentions_in_chat=enable_mentions or True
            )
            
            self.session.add(new_prefs)
            await self.session.commit()
            return new_prefs
    async def send_worker_private_notifications(
        self,
        entry: WorkJournalEntry,
        creator_name: str
    ) -> Tuple[bool, List[str]]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            Tuple[bool, List[str]]: (success, list_of_errors)
        """
        errors = []
        
        try:
            # –ü–∞—Ä—Å–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            worker_names = json.loads(entry.worker_names)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            stmt = select(WorkJournalWorker).where(
                WorkJournalWorker.name.in_(worker_names),
                WorkJournalWorker.mention_enabled == True
            )
            result = await self.session.execute(stmt)
            workers = result.scalars().all()
            
            success_count = 0
            
            for worker in workers:
                if not worker.telegram_username:
                    continue
                    
                try:
                    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
                    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
                    # –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = (
                        f"üîî **–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞**\n\n"
                        f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {entry.company}\n"
                        f"üìÖ **–î–∞—Ç–∞:** {entry.work_date.strftime('%d.%m.%Y')}\n"
                        f"‚è± **–í—Ä–µ–º—è:** {entry.work_duration}\n"
                        f"üöó **–¢–∏–ø:** {'–í—ã–µ–∑–¥' if entry.is_travel else '–£–¥–∞–ª–µ–Ω–Ω–æ'}\n\n"
                        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{entry.work_description}\n\n"
                        f"üë§ **–ù–∞–∑–Ω–∞—á–∏–ª:** {creator_name}"
                    )
                    
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º
                    bot_logger.info(f"Would send private notification to {worker.name} (@{worker.telegram_username})")
                    success_count += 1
                    
                except Exception as e:
                    error_msg = f"Failed to send private notification to {worker.name}: {str(e)}"
                    errors.append(error_msg)
                    bot_logger.error(error_msg)
            
            if success_count > 0:
                bot_logger.info(f"Prepared {success_count} private notifications for workers")
                
            return len(errors) == 0, errors
            
        except Exception as e:
            error_msg = f"Error in send_worker_private_notifications: {str(e)}"
            errors.append(error_msg)
            bot_logger.error(error_msg)
            return False, errors
