"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
"""
import asyncio
from datetime import datetime, time, timedelta
from typing import List, Dict, Any, Optional
import pytz
from aiogram import Bot
from aiogram.enums import ParseMode

from ..database.database import AsyncSessionLocal as async_session
from ..database.models import BotUser
from ..database.daily_tasks_models import AdminDailyTasksSettings, DailyTasksLog
from sqlalchemy import select, insert, update, delete
from sqlalchemy.exc import NoResultFound
from ..integrations.plane import plane_api, PlaneTask
from ..utils.logger import bot_logger
from ..utils.formatters import escape_markdown
from ..config import settings

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –º–æ–¥—É–ª–µ–π
daily_tasks_service = None


class DailyTasksService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∞–¥–º–∏–Ω–∞–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.admin_settings = {}  # –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        bot_logger.info("Daily tasks service initialized")
    
    async def _load_admin_settings_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î"""
        try:
            async with async_session() as session:
                result = await session.execute(
                    select(AdminDailyTasksSettings).where(
                        AdminDailyTasksSettings.telegram_user_id.in_(settings.admin_user_id_list)
                    )
                )
                db_settings = result.scalars().all()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                for admin_setting in db_settings:
                    self.admin_settings[admin_setting.telegram_user_id] = admin_setting.to_dict()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ë–î
                existing_admin_ids = set(admin_setting.telegram_user_id for admin_setting in db_settings)
                for admin_id in settings.admin_user_id_list:
                    if admin_id not in existing_admin_ids:
                        await self._create_default_admin_settings(admin_id)
                
                bot_logger.info(f"Loaded settings for {len(self.admin_settings)} admins from DB")
                
        except Exception as e:
            bot_logger.error(f"Error loading admin settings from DB: {e}")
            # Fallback –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._load_default_settings()
    
    async def _create_default_admin_settings(self, admin_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ –ë–î"""
        try:
            default_settings = {
                'enabled': settings.daily_tasks_enabled,
                'time': settings.daily_tasks_time,
                'timezone': settings.daily_tasks_timezone,
                'include_overdue': True,
                'include_today': True,
                'include_upcoming': True,
                'group_by_project': True,
                'max_tasks_per_section': 5
            }
            
            async with async_session() as session:
                new_settings = AdminDailyTasksSettings.from_dict(default_settings, admin_id)
                session.add(new_settings)
                await session.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.admin_settings[admin_id] = default_settings
                
                bot_logger.info(f"Created default settings for admin {admin_id}")
                
        except Exception as e:
            bot_logger.error(f"Error creating default settings for admin {admin_id}: {e}")
            # Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            self.admin_settings[admin_id] = {
                'enabled': False,
                'time': '09:00',
                'timezone': 'Europe/Moscow',
                'include_overdue': True,
                'include_today': True,
                'include_upcoming': True,
                'group_by_project': True,
                'max_tasks_per_section': 5
            }
    
    async def _save_admin_settings_to_db(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            bot_logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {len(self.admin_settings)} –∞–¥–º–∏–Ω–æ–≤")
            
            async with async_session() as session:
                for admin_id, settings_data in self.admin_settings.items():
                    bot_logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º admin {admin_id}: {settings_data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
                    result = await session.execute(
                        select(AdminDailyTasksSettings).where(
                            AdminDailyTasksSettings.telegram_user_id == admin_id
                        )
                    )
                    existing_settings = result.scalar_one_or_none()
                    
                    if existing_settings:
                        bot_logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è admin {admin_id}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        for key, value in settings_data.items():
                            if hasattr(existing_settings, key):
                                # ‚ö° –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ time –æ–±—ä–µ–∫—Ç
                                if key == 'notification_time' and isinstance(value, str):
                                    from datetime import time as time_obj
                                    try:
                                        hour, minute = map(int, value.split(':'))
                                        value = time_obj(hour, minute)
                                        bot_logger.info(f"üîß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ {key}: '{value}' -> time –æ–±—ä–µ–∫—Ç")
                                    except Exception as e:
                                        bot_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {value}: {e}")
                                        continue

                                bot_logger.info(f"üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {key} = {value} ({type(value)})")
                                setattr(existing_settings, key, value)
                            else:
                                bot_logger.warning(f"‚ö†Ô∏è –ü–æ–ª–µ {key} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏")
                    else:
                        bot_logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è admin {admin_id}")
                        new_settings = AdminDailyTasksSettings(
                            telegram_user_id=admin_id,
                            plane_email=settings_data.get('plane_email'),
                            enabled=settings_data.get('enabled', False),
                            notification_time=settings_data.get('notification_time'),
                            timezone=settings_data.get('timezone', 'Europe/Moscow'),
                            include_overdue=settings_data.get('include_overdue', True),
                            include_today=settings_data.get('include_today', True),
                            include_upcoming=settings_data.get('include_upcoming', True),
                            group_by_project=settings_data.get('group_by_project', True),
                            max_tasks_per_section=settings_data.get('max_tasks_per_section', 5)
                        )
                        session.add(new_settings)
                        bot_logger.info(f"‚ûï –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Å–µ—Å—Å–∏—é –¥–ª—è admin {admin_id}")
                
                bot_logger.info("üíæ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î...")
                await session.commit()
                bot_logger.info("‚úÖ Admin settings saved to database successfully")
                return True
                
        except Exception as e:
            bot_logger.error(f"‚ùå Error saving admin settings to database: {e}")
            bot_logger.error(f"üìä Current admin_settings: {self.admin_settings}")
            return False
    
    def _load_default_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (fallback)"""
        default_settings = {
            'enabled': settings.daily_tasks_enabled,
            'time': settings.daily_tasks_time,
            'timezone': settings.daily_tasks_timezone,
            'include_overdue': True,
            'include_today': True,
            'include_upcoming': True,
            'group_by_project': True,
            'max_tasks_per_section': 5
        }
        
        for admin_id in settings.admin_user_id_list:
            self.admin_settings[admin_id] = default_settings.copy()
        
        bot_logger.info(f"Loaded default settings for {len(self.admin_settings)} admins")
    
    async def get_admin_settings(self, admin_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞"""
        if admin_id not in self.admin_settings:
            await self._load_admin_settings_from_db()
        return self.admin_settings.get(admin_id, {})
    
    async def update_admin_setting(self, admin_id: int, key: str, value: Any) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–¥–º–∏–Ω–∞"""
        try:
            async with async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                result = await session.execute(
                    select(AdminDailyTasksSettings).where(
                        AdminDailyTasksSettings.telegram_user_id == admin_id
                    )
                )
                admin_settings = result.scalar_one_or_none()
                
                if not admin_settings:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    await self._create_default_admin_settings(admin_id)
                    admin_settings = AdminDailyTasksSettings.from_dict(
                        self.admin_settings.get(admin_id, {}), 
                        admin_id
                    )
                    session.add(admin_settings)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É  
                if key in ['time', 'notification_time']:
                    try:
                        hour, minute = map(int, value.split(':'))
                        admin_settings.notification_time = time(hour, minute)
                    except:
                        bot_logger.error(f"Invalid time format: {value}")
                        return False
                elif key == 'plane_email':
                    admin_settings.plane_email = value
                elif key == 'notifications_enabled':
                    admin_settings.enabled = value  # –í –ë–î –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'enabled'
                elif hasattr(admin_settings, key):
                    setattr(admin_settings, key, value)
                else:
                    bot_logger.error(f"Unknown setting key: {key}")
                    return False
                
                await session.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                if admin_id not in self.admin_settings:
                    self.admin_settings[admin_id] = {}
                self.admin_settings[admin_id][key] = value
                
                bot_logger.info(f"Updated setting {key}={value} for admin {admin_id}")
                return True
                
        except Exception as e:
            bot_logger.error(f"Error updating admin setting: {e}")
            return False
    
    async def get_admin_tasks(self, admin_id: int) -> List[PlaneTask]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞ –∏–∑ Plane"""
        try:
            admin_settings = self.admin_settings.get(admin_id, {})
            plane_email = admin_settings.get('plane_email')
            
            bot_logger.info(f"üîç DEBUG: get_admin_tasks called for admin {admin_id}, email: {plane_email}")
            
            if not plane_email:
                bot_logger.warning(f"No plane_email configured for admin {admin_id}")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ email –∏–∑ Plane
            bot_logger.info(f"üîç DEBUG: Calling plane_api.get_user_tasks for email {plane_email}")
            tasks = await plane_api.get_user_tasks(plane_email)
            
            bot_logger.info(f"üîç DEBUG: plane_api.get_user_tasks returned {len(tasks) if tasks else 0} tasks for admin {admin_id}")
            return tasks or []
            
        except Exception as e:
            bot_logger.error(f"Error getting tasks for admin {admin_id}: {e}")
            return []
    
    async def send_daily_tasks_to_admin(self, admin_id: int, force: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É"""
        try:
            admin_settings = self.get_admin_settings(admin_id)
            
            if not admin_settings.get('enabled', False) and not force:
                bot_logger.debug(f"Daily tasks disabled for admin {admin_id}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞ –∏–∑ Plane
            tasks = await plane_api.get_all_assigned_tasks_by_user_id(admin_id)
            
            if not tasks and not force:
                bot_logger.info(f"No tasks found for admin {admin_id}")
                return True  # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self._format_daily_tasks_message(
                tasks, admin_settings, admin_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            await self._log_daily_tasks_send(admin_id, True, tasks, plane_response_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await self._update_last_sent_time(admin_id)
            
            bot_logger.info(f"Daily tasks sent to admin {admin_id}")
            return True
            
        except Exception as e:
            error_message = str(e)
            bot_logger.error(f"Error sending daily tasks to admin {admin_id}: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            plane_response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            await self._log_daily_tasks_send(admin_id, False, tasks, plane_response_time, error_message)
            
            return False
    
    async def send_daily_tasks_to_all_admins(self) -> Dict[int, bool]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
        results = {}
        
        for admin_id in settings.admin_user_id_list:
            results[admin_id] = await self.send_daily_tasks_to_admin(admin_id)
        
        successful = sum(1 for success in results.values() if success)
        bot_logger.info(f"Daily tasks sent to {successful}/{len(results)} admins")
        
        return results
    
    async def _format_daily_tasks_message(
        self, 
        tasks: List[PlaneTask], 
        admin_settings: Dict[str, Any],
        admin_id: int
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
        
        if not tasks:
            return (
                f"üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ\\!*\n\n"
                f"‚ú® –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane\\.\n"
                f"–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π\\! üöÄ"
            )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        overdue_tasks = [t for t in tasks if t.is_overdue]
        today_tasks = [t for t in tasks if t.is_due_today and not t.is_overdue]
        upcoming_tasks = [t for t in tasks if not t.is_overdue and not t.is_due_today]
        
        message_parts = [f"üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ\\! –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"]
        
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if overdue_tasks and admin_settings.get('include_overdue', True):
            message_parts.append("üî¥ *–ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:*")
            for task in overdue_tasks[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–∞–¥–∞—á
                message_parts.append(self._format_task_line(task))
            if len(overdue_tasks) > 5:
                message_parts.append(f"_\\.\\.\\. –∏ –µ—â—ë {len(overdue_tasks) - 5} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö_")
            message_parts.append("")
        
        # –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if today_tasks and admin_settings.get('include_today', True):
            message_parts.append("üìÖ *–ù–ê –°–ï–ì–û–î–ù–Ø:*")
            for task in today_tasks[:5]:
                message_parts.append(self._format_task_line(task))
            if len(today_tasks) > 5:
                message_parts.append(f"_\\.\\.\\. –∏ –µ—â—ë {len(today_tasks) - 5} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è_")
            message_parts.append("")
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏
        if upcoming_tasks and admin_settings.get('include_upcoming', True):
            message_parts.append("üìã *–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:*")
            for task in upcoming_tasks[:8]:  # –ú–∞–∫—Å–∏–º—É–º 8 –∑–∞–¥–∞—á
                message_parts.append(self._format_task_line(task))
            if len(upcoming_tasks) > 8:
                message_parts.append(f"_\\.\\.\\. –∏ –µ—â—ë {len(upcoming_tasks) - 8} –∞–∫—Ç–∏–≤–Ω—ã—Ö_")
            message_parts.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tasks = len(tasks)
        message_parts.extend([
            f"üìä *–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:* {total_tasks}",
            f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {len(overdue_tasks)}",
            f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_tasks)}",
            f"üìã –í —Ä–∞–±–æ—Ç–µ: {len(upcoming_tasks)}"
        ])
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ Plane
        if settings.plane_api_url:
            clean_url = settings.plane_api_url.replace('.', '\\.')
            message_parts.extend([
                "",
                f"üîó [–û—Ç–∫—Ä—ã—Ç—å Plane]({clean_url})",
                "",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /daily\\_settings"
            ])
        
        return "\n".join(message_parts)
    
    def _format_task_line(self, task: PlaneTask) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        name = task.name
        if len(name) > 40:
            name = name[:37] + "..."
        
        return (
            f"{task.priority_emoji} {task.state_emoji} "
            f"{escape_markdown(name)} "
            f"_{escape_markdown(task.project_name)}_"
        )
    
    def should_send_now(self, admin_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å"""
        admin_settings = self.get_admin_settings(admin_id)
        
        if not admin_settings.get('enabled', False):
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∞
            send_time_str = admin_settings.get('time', '09:00')
            timezone_str = admin_settings.get('timezone', 'Europe/Moscow')
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            hour, minute = map(int, send_time_str.split(':'))
            send_time = time(hour, minute)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –∞–¥–º–∏–Ω–∞
            tz = pytz.timezone(timezone_str)
            now = datetime.now(tz)
            current_time = now.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
            return (
                current_time.hour == send_time.hour and
                current_time.minute == send_time.minute
            )
            
        except Exception as e:
            bot_logger.error(f"Error checking send time for admin {admin_id}: {e}")
            return False
    
    async def get_admin_stats(self, admin_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –∞–¥–º–∏–Ω–∞"""
        try:
            tasks = await plane_api.get_all_assigned_tasks_by_user_id(admin_id)
            
            overdue = [t for t in tasks if t.is_overdue]
            today = [t for t in tasks if t.is_due_today and not t.is_overdue]
            upcoming = [t for t in tasks if not t.is_overdue and not t.is_due_today]
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            by_priority = {}
            for task in tasks:
                priority = task.priority.lower()
                by_priority[priority] = by_priority.get(priority, 0) + 1
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            by_project = {}
            for task in tasks:
                project = task.project_name
                by_project[project] = by_project.get(project, 0) + 1
            
            return {
                'total': len(tasks),
                'overdue': len(overdue),
                'today': len(today),
                'upcoming': len(upcoming),
                'by_priority': by_priority,
                'by_project': by_project,
                'last_updated': datetime.now().isoformat()
            }
            
        except Exception as e:
            bot_logger.error(f"Error getting admin stats: {e}")
            return {'error': str(e)}


    async def _log_daily_tasks_send(
        self, 
        admin_id: int, 
        success: bool, 
        tasks: List[PlaneTask], 
        plane_response_time: int = None, 
        error_message: str = None
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
            overdue = [t for t in tasks if t.is_overdue]
            today = [t for t in tasks if t.is_due_today and not t.is_overdue]
            upcoming = [t for t in tasks if not t.is_overdue and not t.is_due_today]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            tasks_data = {
                'total': len(tasks),
                'by_priority': {},
                'by_project': {},
                'by_state': {}
            } if tasks else None
            
            if tasks:
                for task in tasks:
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                    priority = task.priority.lower()
                    tasks_data['by_priority'][priority] = tasks_data['by_priority'].get(priority, 0) + 1
                    
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
                    project = task.project_name
                    tasks_data['by_project'][project] = tasks_data['by_project'].get(project, 0) + 1
                    
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                    state = task.state_name.lower()
                    tasks_data['by_state'][state] = tasks_data['by_state'].get(state, 0) + 1
            
            async with async_session() as session:
                log_entry = DailyTasksLog(
                    telegram_user_id=admin_id,
                    success=success,
                    error_message=error_message,
                    total_tasks=len(tasks),
                    overdue_tasks=len(overdue),
                    today_tasks=len(today),
                    upcoming_tasks=len(upcoming),
                    plane_response_time=plane_response_time,
                    tasks_data=tasks_data
                )
                
                session.add(log_entry)
                await session.commit()
                
        except Exception as e:
            bot_logger.error(f"Error logging daily tasks send: {e}")
    
    async def _update_last_sent_time(self, admin_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            async with async_session() as session:
                result = await session.execute(
                    select(AdminDailyTasksSettings).where(
                        AdminDailyTasksSettings.telegram_user_id == admin_id
                    )
                )
                admin_settings = result.scalar_one_or_none()
                
                if admin_settings:
                    admin_settings.last_sent_at = datetime.now()
                    await session.commit()
                    
        except Exception as e:
            bot_logger.error(f"Error updating last sent time: {e}")
    
    async def get_admin_email_mapping(self, admin_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å email –∞–¥–º–∏–Ω–∞ –¥–ª—è Plane"""
        try:
            async with async_session() as session:
                result = await session.execute(
                    select(AdminDailyTasksSettings.plane_email).where(
                        AdminDailyTasksSettings.telegram_user_id == admin_id
                    )
                )
                email = result.scalar_one_or_none()
                return email
                
        except Exception as e:
            bot_logger.error(f"Error getting admin email mapping: {e}")
            return None
    
    async def set_admin_email_mapping(self, admin_id: int, email: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email –∞–¥–º–∏–Ω–∞ –¥–ª—è Plane"""
        try:
            return await self.update_admin_setting(admin_id, 'plane_email', email)
        except Exception as e:
            bot_logger.error(f"Error setting admin email mapping: {e}")
            return False

    async def set_admin_notification_time(self, admin_id: int, time_str: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
        try:
            return await self.update_admin_setting(admin_id, 'notification_time', time_str)
        except Exception as e:
            bot_logger.error(f"Error setting admin notification time: {e}")
            return False

    async def set_admin_notifications_enabled(self, admin_id: int, enabled: bool) -> bool:
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            return await self.update_admin_setting(admin_id, 'notifications_enabled', enabled)
        except Exception as e:
            bot_logger.error(f"Error setting admin notifications status: {e}")
            return False


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
async def init_daily_tasks_service(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    global daily_tasks_service
    daily_tasks_service = DailyTasksService(bot)
    await daily_tasks_service._load_admin_settings_from_db()
    return daily_tasks_service


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py)
daily_tasks_service: Optional[DailyTasksService] = None
