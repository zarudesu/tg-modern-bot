"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Plane API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
"""
import aiohttp
import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone, timedelta
from pydantic import BaseModel

from ..utils.logger import bot_logger
from ..config import settings


class PlaneTask(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏ –∏–∑ Plane API"""
    id: str
    sequence_id: int
    name: str
    description: Optional[str] = None
    state_detail: Dict[str, Any]
    priority: str
    assignee_details: Optional[Dict[str, Any]] = None
    project_detail: Dict[str, Any]
    created_at: str
    updated_at: str
    target_date: Optional[str] = None
    
    @property
    def priority_emoji(self) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        priority_map = {
            'urgent': 'üî¥',
            'high': 'üü†', 
            'medium': 'üü°',
            'low': 'üü¢',
            'none': '‚ö™'
        }
        return priority_map.get(self.priority.lower(), '‚ö™')
    
    @property
    def state_emoji(self) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        state_map = {
            'backlog': 'üìã',
            'todo': 'üìù',
            'in_progress': '‚ö°',
            'in progress': '‚ö°',
            'in_review': 'üëÄ',
            'in review': 'üëÄ',
            'done': '‚úÖ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå',
            'canceled': '‚ùå'
        }
        state_name = self.state_detail.get('name', '').lower()
        return state_map.get(state_name, 'üìã')
    
    @property
    def assignee_name(self) -> str:
        """–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        if not self.assignee_details:
            return "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        
        display_name = self.assignee_details.get('display_name')
        if display_name:
            return display_name
            
        first_name = self.assignee_details.get('first_name', '')
        last_name = self.assignee_details.get('last_name', '')
        return f"{first_name} {last_name}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    @property
    def project_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        return self.project_detail.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
    
    @property
    def state_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return self.state_detail.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    @property
    def is_overdue(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞"""
        if not self.target_date:
            return False
        
        try:
            target = datetime.fromisoformat(self.target_date.replace('Z', '+00:00'))
            now = datetime.now(timezone.utc)
            return target < now and self.state_detail.get('name', '').lower() not in ['done', 'completed', 'cancelled', 'canceled']
        except:
            return False
    
    @property
    def is_due_today(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        if not self.target_date:
            return False
        
        try:
            target = datetime.fromisoformat(self.target_date.replace('Z', '+00:00'))
            today = datetime.now(timezone.utc).date()
            return target.date() == today
        except:
            return False


class PlaneAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Plane API"""
    
    def __init__(self):
        self.api_url = settings.plane_api_url
        self.api_token = settings.plane_api_token
        self.workspace_slug = settings.plane_workspace_slug
        
        if not all([self.api_url, self.api_token, self.workspace_slug]):
            bot_logger.warning("Plane API not fully configured")
            self.configured = False
        else:
            self.configured = True
            bot_logger.info("Plane API client initialized")
    
    @property
    def headers(self) -> Dict[str, str]:
        """HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'X-API-Key': self.api_token,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    
    async def get_user_tasks(self, user_email: str) -> List[PlaneTask]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.configured:
            bot_logger.error("Plane API not configured")
            return []
        
        try:
            async with aiohttp.ClientSession() as session:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
                user_id = await self._get_user_id_by_email(session, user_email)
                if not user_id:
                    bot_logger.warning(f"User not found: {user_email}")
                    return []
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º issues –≤–º–µ—Å—Ç–æ my-issues)
                url = f"{self.api_url}/api/v1/workspaces/{self.workspace_slug}/issues/"
                
                async with session.get(url, headers=self.headers) as response:
                    if response.status != 200:
                        bot_logger.error(f"Failed to get tasks: {response.status} {await response.text()}")
                        return []
                    
                    data = await response.json()
                    tasks = []
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
                    for task_data in data:
                        if (task_data.get('assignee') == user_id and 
                            task_data.get('state_detail', {}).get('name', '').lower() not in ['done', 'completed', 'cancelled', 'canceled']):
                            tasks.append(PlaneTask(**task_data))
                    
                    bot_logger.info(f"Found {len(tasks)} active tasks for user {user_email}")
                    return tasks
                    
        except Exception as e:
            bot_logger.error(f"Error getting user tasks: {e}")
            return []
    
    async def _get_user_id_by_email(self, session: aiohttp.ClientSession, email: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        try:
            url = f"{self.api_url}/api/v1/workspaces/{self.workspace_slug}/members/"
            
            async with session.get(url, headers=self.headers) as response:
                if response.status != 200:
                    return None
                
                members = await response.json()
                for member in members:
                    if member.get('member', {}).get('email') == email:
                        return member.get('member', {}).get('id')
                
                return None
                
        except Exception as e:
            bot_logger.error(f"Error getting user ID: {e}")
            return None
    
    async def get_all_assigned_tasks_by_user_id(self, user_id: int) -> List[PlaneTask]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ Telegram user_id"""
        if not self.configured:
            return []
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å telegram_user_id —Å email –≤ Plane
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞–ø–∏–Ω–≥ telegram_id -> email
            user_email = await self._get_user_email_by_telegram_id(user_id)
            if not user_email:
                return []
            
            return await self.get_user_tasks(user_email)
            
        except Exception as e:
            bot_logger.error(f"Error getting tasks for user {user_id}: {e}")
            return []
    
    async def _get_user_email_by_telegram_id(self, telegram_user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from ..database.database import async_session
            from ..database.daily_tasks_models import AdminDailyTasksSettings
            from sqlalchemy import select
            
            async with async_session() as session:
                result = await session.execute(
                    select(AdminDailyTasksSettings.plane_email).where(
                        AdminDailyTasksSettings.telegram_user_id == telegram_user_id
                    )
                )
                email = result.scalar_one_or_none()
                
                if email:
                    bot_logger.info(f"Found email mapping for user {telegram_user_id}: {email}")
                    return email
                else:
                    bot_logger.warning(f"No email mapping found for user {telegram_user_id}")
                    return None
                    
        except Exception as e:
            bot_logger.error(f"Error getting user email mapping: {e}")
            return None

    async def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API"""
        if not self.configured:
            return {
                'success': False,
                'error': 'Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
            }
        
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Ä–∞–±–æ—á–∏–π endpoint)
                url = f"{self.api_url}/api/v1/workspaces/{self.workspace_slug}/projects/"
                
                bot_logger.info(f"Testing connection to: {url}")
                bot_logger.info(f"Using headers: {dict(self.headers)}")
                
                async with session.get(url, headers=self.headers) as response:
                    response_text = await response.text()
                    bot_logger.info(f"Response status: {response.status}")
                    bot_logger.info(f"Response text: {response_text[:200]}...")
                    
                    if response.status == 200:
                        data = await response.json()
                        return {
                            'success': True,
                            'workspace_name': data.get('name', 'Unknown'),
                            'workspace_id': data.get('id', 'Unknown')
                        }
                    else:
                        return {
                            'success': False,
                            'error': f'HTTP {response.status}: {response_text}'
                        }
                        
        except Exception as e:
            bot_logger.error(f"Connection test failed: {e}")
            return {
                'success': False,
                'error': str(e)
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
plane_api = PlaneAPIClient()
