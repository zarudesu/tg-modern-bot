"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Plane –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö
"""
from typing import Dict, Any, Optional
from datetime import datetime
from pydantic import BaseModel, Field
from aiogram import Bot
from aiogram.enums import ParseMode

from ..utils.logger import bot_logger
from ..utils.formatters import escape_markdown
from ..config import settings


class PlaneIssue(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏ Plane"""
    id: str
    name: str
    description: Optional[str] = None
    state: str
    priority: str
    assignee: Optional[str] = None
    project: str
    created_by: str
    created_at: datetime
    updated_at: datetime
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class PlaneWebhookPayload(BaseModel):
    """–ú–æ–¥–µ–ª—å webhook payload –æ—Ç Plane"""
    event: str  # created, updated, deleted
    action: str
    issue: PlaneIssue
    changes: Optional[Dict[str, Any]] = None
    actor: Dict[str, str]  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –¥–µ–π—Å—Ç–≤–∏–µ


class PlaneNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Plane"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
        self.chat_id = getattr(settings, 'plane_chat_id', None)
        self.topic_id = getattr(settings, 'plane_topic_id', None)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        self.priority_emoji = {
            'urgent': 'üî¥',
            'high': 'üü†',
            'medium': 'üü°',
            'low': 'üü¢',
            'none': '‚ö™'
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        self.state_emoji = {
            'backlog': 'üìã',
            'todo': 'üìù',
            'in_progress': '‚ö°',
            'in_review': 'üëÄ',
            'done': '‚úÖ',
            'cancelled': '‚ùå'
        }
    
    async def process_webhook(self, payload: PlaneWebhookPayload) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Plane"""
        try:
            if not self.chat_id:
                bot_logger.warning("Plane chat_id not configured")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            if payload.event == "created":
                await self._send_issue_created(payload)
            elif payload.event == "updated":
                await self._send_issue_updated(payload)
            elif payload.event == "deleted":
                await self._send_issue_deleted(payload)
            else:
                bot_logger.info(f"Unknown Plane event: {payload.event}")
                return False
            
            return True
            
        except Exception as e:
            bot_logger.error(f"Error processing Plane webhook: {e}")
            return False
    
    async def _send_issue_created(self, payload: PlaneWebhookPayload):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        issue = payload.issue
        actor = payload.actor
        
        priority_emoji = self.priority_emoji.get(issue.priority.lower(), '‚ö™')
        state_emoji = self.state_emoji.get(issue.state.lower(), 'üìã')
        
        message = (
            f"üÜï *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞*\n\n"
            f"{priority_emoji} *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {escape_markdown(issue.priority.upper())}\n"
            f"{state_emoji} *–°—Ç–∞—Ç—É—Å:* {escape_markdown(issue.state.title())}\n"
            f"üìä *–ü—Ä–æ–µ–∫—Ç:* {escape_markdown(issue.project)}\n"
            f"üë§ *–°–æ–∑–¥–∞–ª:* {escape_markdown(actor.get('display_name', 'Unknown'))}\n"
        )
        
        if issue.assignee:
            message += f"üë®‚Äçüíª *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {escape_markdown(issue.assignee)}\n"
        
        message += f"\nüìù *{escape_markdown(issue.name)}*\n"
        
        if issue.description and len(issue.description.strip()) > 0:
            # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            desc = issue.description.strip()
            if len(desc) > 200:
                desc = desc[:200] + "..."
            message += f"\n_{escape_markdown(desc)}_\n"
        
        message += f"\nüîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É](https://plane\\.hhivp\\.com/projects/{escape_markdown(issue.project)}/issues/{escape_markdown(issue.id)})"
        
        await self._send_to_topic(message)
    
    async def _send_issue_updated(self, payload: PlaneWebhookPayload):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        issue = payload.issue
        actor = payload.actor
        changes = payload.changes or {}
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not changes or all(key in ['updated_at', 'description'] for key in changes.keys()):
            return
        
        state_emoji = self.state_emoji.get(issue.state.lower(), 'üìã')
        
        message = (
            f"üìù *–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞*\n\n"
            f"üìù *{escape_markdown(issue.name)}*\n"
            f"üë§ *–û–±–Ω–æ–≤–∏–ª:* {escape_markdown(actor.get('display_name', 'Unknown'))}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if 'state' in changes:
            old_state = changes['state'].get('old', 'Unknown')
            new_state = changes['state'].get('new', issue.state)
            old_emoji = self.state_emoji.get(old_state.lower(), 'üìã')
            new_emoji = self.state_emoji.get(new_state.lower(), 'üìã')
            message += f"{old_emoji} {escape_markdown(old_state)} ‚Üí {new_emoji} {escape_markdown(new_state)}\n"
        
        if 'priority' in changes:
            old_priority = changes['priority'].get('old', 'none')
            new_priority = changes['priority'].get('new', issue.priority)
            old_emoji = self.priority_emoji.get(old_priority.lower(), '‚ö™')
            new_emoji = self.priority_emoji.get(new_priority.lower(), '‚ö™')
            message += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {old_emoji} {escape_markdown(old_priority)} ‚Üí {new_emoji} {escape_markdown(new_priority)}\n"
        
        if 'assignee' in changes:
            old_assignee = changes['assignee'].get('old', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
            new_assignee = changes['assignee'].get('new', issue.assignee or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
            message += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {escape_markdown(old_assignee)} ‚Üí {escape_markdown(new_assignee)}\n"
        
        message += f"\nüîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É](https://plane\\.hhivp\\.com/projects/{escape_markdown(issue.project)}/issues/{escape_markdown(issue.id)})"
        
        await self._send_to_topic(message)
    
    async def _send_issue_deleted(self, payload: PlaneWebhookPayload):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        issue = payload.issue
        actor = payload.actor
        
        message = (
            f"üóëÔ∏è *–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞*\n\n"
            f"üìù *{escape_markdown(issue.name)}*\n"
            f"üë§ *–£–¥–∞–ª–∏–ª:* {escape_markdown(actor.get('display_name', 'Unknown'))}\n"
            f"üìä *–ü—Ä–æ–µ–∫—Ç:* {escape_markdown(issue.project)}\n"
        )
        
        await self._send_to_topic(message)
    
    async def _send_to_topic(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫"""
        try:
            kwargs = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': ParseMode.MARKDOWN_V2,
                'disable_web_page_preview': True
            }
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ø–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if self.topic_id:
                kwargs['message_thread_id'] = self.topic_id
            
            await self.bot.send_message(**kwargs)
            
            bot_logger.info(f"Plane notification sent to chat {self.chat_id}, topic {self.topic_id}")
            
        except Exception as e:
            bot_logger.error(f"Failed to send Plane notification: {e}")
            raise
