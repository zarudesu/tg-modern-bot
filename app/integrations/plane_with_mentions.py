"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Plane —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
"""
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime
from pydantic import BaseModel, Field
from aiogram import Bot
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from ..utils.logger import bot_logger
from ..utils.formatters import escape_markdown
from ..config import settings
from ..database.work_journal_models import WorkJournalWorker
from ..services.worker_mention_service import WorkerMentionService


class PlaneIssue(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏ Plane"""
    id: str
    name: str
    description: Optional[str] = None
    state: str
    priority: str
    assignee: Optional[str] = None  # –ü–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ Plane
    assignee_email: Optional[str] = None  # Email –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    project: str
    created_by: str
    created_at: datetime
    updated_at: datetime
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class PlaneWebhookPayload(BaseModel):
    """–ú–æ–¥–µ–ª—å webhook payload –æ—Ç Plane"""
    event: str  # created, updated, deleted
    action: str
    issue: PlaneIssue
    changes: Optional[Dict[str, Any]] = None
    actor: Dict[str, str]  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –¥–µ–π—Å—Ç–≤–∏–µ


class PlaneWorkerMapping:
    """–ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Plane –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    # –°—Ç–∞—Ç–∏—á–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω Plane –Ω–∞ –∏–º–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    PLANE_TO_WORKER_MAPPING = {
        "Dmitriy Gusev": "–ì—É—Å–µ–≤ –î–∏–º–∞",
        "Dmitry Gusev": "–ì—É—Å–µ–≤ –î–∏–º–∞", 
        "Dima Gusev": "–ì—É—Å–µ–≤ –î–∏–º–∞",
        "–¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤": "–¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤",
        "Timofeij Batyrev": "–¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤",
        "Konstantin Makeykin": "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ú–∞–∫–µ–π–∫–∏–Ω",
        "Kostya Makeykin": "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ú–∞–∫–µ–π–∫–∏–Ω",
    }
    
    async def _get_assignee_mention(self, plane_assignee: str) -> Tuple[str, Optional[Dict]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –õ–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Returns:
            Tuple[str, Optional[Dict]]: (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ_–∏–º—è, –¥–∞–Ω–Ω—ã–µ_–¥–ª—è_—É–ø–æ–º–∏–Ω–∞–Ω–∏—è)
        """
        if not plane_assignee:
            return "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω", None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –ë–î
        worker_mapping = PlaneWorkerMapping(self.session)
        worker_name = await worker_mapping.get_worker_name(plane_assignee)
        
        if not worker_name:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
            return escape_markdown(plane_assignee), None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        mentions = await self.mention_service.get_worker_mentions([worker_name])
        
        if mentions and len(mentions) > 0:
            mention_data = mentions[0]
            mention_text = mention_data["mention_text"]  # @username –∏–ª–∏ –∏–º—è
            return mention_text, mention_data
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            return escape_markdown(worker_name), None
    
    async def _send_issue_created(self, payload: PlaneWebhookPayload):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        issue = payload.issue
        actor = payload.actor
        
        priority_emoji = self.priority_emoji.get(issue.priority.lower(), '‚ö™')
        state_emoji = self.state_emoji.get(issue.state.lower(), 'üìã')
        
        # –ü–æ–ª—É—á–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        assignee_display, mention_data = await self._get_assignee_mention(issue.assignee)
        
        message = (
            f"‚ï≠‚îÄ üéØ *{escape_markdown(issue.id)}*\n"
            f"‚îú üìù {escape_markdown(issue.name)}\n"
            f"‚îú üìÅ {escape_markdown(issue.project)}\n"
            f"‚îú {priority_emoji} {escape_markdown(issue.priority.title())} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
            f"‚îú üìÖ {issue.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if issue.assignee:
            message += f"‚îú üë• {assignee_display}\n"
        
        message += (
            f"‚îú {state_emoji} {escape_markdown(issue.state.title())}\n"
            f"‚ï∞‚îÄ üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Plane](https://plane\\.hhivp\\.com/projects/{escape_markdown(issue.project)}/issues/{escape_markdown(issue.id)})"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        await self._send_to_topic(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if mention_data and mention_data.get("telegram_user_id"):
            await self._send_personal_task_notification(issue, mention_data, "–Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
    
    async def _send_issue_updated(self, payload: PlaneWebhookPayload):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        issue = payload.issue
        actor = payload.actor
        changes = payload.changes or {}
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not changes or all(key in ['updated_at', 'description'] for key in changes.keys()):
            return
        
        state_emoji = self.state_emoji.get(issue.state.lower(), 'üìã')
        priority_emoji = self.priority_emoji.get(issue.priority.lower(), '‚ö™')
        
        # –ü–æ–ª—É—á–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        assignee_display, mention_data = await self._get_assignee_mention(issue.assignee)
        
        message = (
            f"üìù *–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞*\n\n"
            f"‚ï≠‚îÄ üéØ *{escape_markdown(issue.id)}*\n"
            f"‚îú üìù {escape_markdown(issue.name)}\n"
            f"‚îú üìÅ {escape_markdown(issue.project)}\n"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes_text = []
        
        if 'state' in changes:
            old_state = changes['state'].get('old', 'Unknown')
            new_state = changes['state'].get('new', issue.state)
            old_emoji = self.state_emoji.get(old_state.lower(), 'üìã')
            new_emoji = self.state_emoji.get(new_state.lower(), 'üìã')
            changes_text.append(f"‚îú üìä {old_emoji} {escape_markdown(old_state)} ‚Üí {new_emoji} {escape_markdown(new_state)}")
        
        if 'priority' in changes:
            old_priority = changes['priority'].get('old', 'none')
            new_priority = changes['priority'].get('new', issue.priority)
            old_emoji = self.priority_emoji.get(old_priority.lower(), '‚ö™')
            new_emoji = self.priority_emoji.get(new_priority.lower(), '‚ö™')
            changes_text.append(f"‚îú {old_emoji} {escape_markdown(old_priority)} ‚Üí {new_emoji} {escape_markdown(new_priority)}")
        
        if 'assignee' in changes:
            old_assignee = changes['assignee'].get('old', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
            old_assignee_display, _ = await self._get_assignee_mention(old_assignee)
            changes_text.append(f"‚îú üë• {old_assignee_display} ‚Üí {assignee_display}")
        else:
            if issue.assignee:
                changes_text.append(f"‚îú üë• {assignee_display}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for change in changes_text:
            message += f"{change}\n"
        
        message += f"‚ï∞‚îÄ üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Plane](https://plane\\.hhivp\\.com/projects/{escape_markdown(issue.project)}/issues/{escape_markdown(issue.id)})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        await self._send_to_topic(message)
        
        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
        if 'assignee' in changes and mention_data and mention_data.get("telegram_user_id"):
            await self._send_personal_task_notification(issue, mention_data, "–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
    
    async def _send_issue_deleted(self, payload: PlaneWebhookPayload):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        issue = payload.issue
        actor = payload.actor
        
        message = (
            f"üóëÔ∏è *–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞*\n\n"
            f"üìù *{escape_markdown(issue.name)}*\n"
            f"üë§ *–£–¥–∞–ª–∏–ª:* {escape_markdown(actor.get('display_name', 'Unknown'))}\n"
            f"üìä *–ü—Ä–æ–µ–∫—Ç:* {escape_markdown(issue.project)}\n"
        )
        
        await self._send_to_topic(message)
    
    async def _send_personal_task_notification(
        self, 
        issue: PlaneIssue, 
        mention_data: Dict,
        action: str
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ –∑–∞–¥–∞—á–µ"""
        try:
            user_prefs = await self.mention_service.get_user_notification_preferences(
                mention_data["telegram_user_id"]
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_prefs and not user_prefs.enable_work_assignment_notifications:
                return
            
            priority_emoji = self.priority_emoji.get(issue.priority.lower(), '‚ö™')
            state_emoji = self.state_emoji.get(issue.state.lower(), 'üìù')
            
            personal_message = (
                f"üéØ **–í–∞–º {action} –∑–∞–¥–∞—á–∞**\n\n"
                f"üìù **{issue.name}**\n\n"
                f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {issue.project}\n"
                f"{priority_emoji} **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {issue.priority.title()}\n"
                f"{state_emoji} **–°—Ç–∞—Ç—É—Å:** {issue.state.title()}\n"
                f"üìÖ **–î–∞—Ç–∞:** {issue.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
            
            if issue.description and len(issue.description.strip()) > 0:
                desc = issue.description.strip()
                if len(desc) > 300:
                    desc = desc[:300] + "..."
                personal_message += f"üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{desc}\n\n"
            
            personal_message += (
                f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É](https://plane.hhivp.com/projects/{issue.project}/issues/{issue.id})\n\n"
                f"_–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings_"
            )
            
            await self.bot.send_message(
                chat_id=mention_data["telegram_user_id"],
                text=personal_message,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
            bot_logger.info(f"Personal Plane notification sent to {mention_data['name']} ({mention_data['telegram_user_id']})")
            
        except Exception as e:
            bot_logger.warning(f"Failed to send personal Plane notification to {mention_data['name']}: {str(e)}")
    
    async def _send_to_topic(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫"""
        try:
            kwargs = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': ParseMode.MARKDOWN_V2,
                'disable_web_page_preview': True
            }
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ø–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if self.topic_id:
                kwargs['message_thread_id'] = self.topic_id
            
            await self.bot.send_message(**kwargs)
            
            bot_logger.info(f"Plane notification sent to chat {self.chat_id}, topic {self.topic_id}")
            
        except Exception as e:
            bot_logger.error(f"Failed to send Plane notification: {e}")
            raise