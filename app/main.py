"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ HHIVP IT Management - –ü–û–õ–ù–ê–Ø –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import asyncio
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from sqlalchemy import text

from .config import settings
from .database.database import init_db, close_db
from .utils.logger import bot_logger, setup_logging
from .middleware.auth import AuthMiddleware
from .middleware.logging import LoggingMiddleware, GroupMonitoringMiddleware, PerformanceMiddleware
from .middleware.database import DatabaseSessionMiddleware
from .middleware.event_publisher import EventPublisherMiddleware

# Core —Å–∏—Å—Ç–µ–º—ã
from .core.events.event_bus import event_bus
from .core.plugins.plugin_manager import plugin_manager
from .core.ai.ai_manager import ai_manager

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´
from .handlers import start
from .handlers.start import COMMANDS_MENU


async def setup_bot_commands(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        await bot.set_my_commands(COMMANDS_MENU)
        bot_logger.info("Bot commands menu set successfully")
    except Exception as e:
        bot_logger.error(f"Failed to set bot commands: {e}")


async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    bot_logger.info("üöÄ Bot startup initiated - ENTERPRISE ARCHITECTURE")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        bot_logger.info("‚úÖ Database initialized")

        # –ó–∞–ø—É—Å–∫ webhook server –¥–ª—è n8n
        from .webhooks.server import WebhookServer
        global webhook_server
        webhook_server = WebhookServer(bot)
        webhook_port = getattr(settings, 'webhook_port', 8080)
        await webhook_server.start_server(host='0.0.0.0', port=webhook_port)
        bot_logger.info(f"‚úÖ Webhook server started on port {webhook_port}")

        # üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Manager (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏)
        ai_api_key = getattr(settings, 'openai_api_key', None)
        if ai_api_key:
            ai_manager.create_openai_provider(
                api_key=ai_api_key,
                model="gpt-4-turbo",
                set_as_default=True,
                temperature=0.7,
                max_tokens=2000
            )
            bot_logger.info("‚úÖ AI Manager initialized with OpenAI")
        else:
            bot_logger.warning("‚ö†Ô∏è AI features disabled: No API key found")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        from .services.daily_tasks_service import DailyTasksService
        from .services.scheduler import DailyTasksScheduler
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
        import app.services.daily_tasks_service as dts_module
        dts_module.daily_tasks_service = DailyTasksService(bot)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
        await dts_module.daily_tasks_service._load_admin_settings_from_db()
        bot_logger.info("Daily tasks service initialized and settings loaded from DB")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Å–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from .services.user_tasks_cache_service import user_tasks_cache_service
        user_tasks_cache_service.bot_instance = bot
        bot_logger.info("User tasks cache service bot instance set")
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        global scheduler
        scheduler = None
        try:
            scheduler = DailyTasksScheduler()
            if settings.daily_tasks_enabled:
                await scheduler.start()
                bot_logger.info("Daily tasks scheduler started")
        except Exception as e:
            bot_logger.error(f"Scheduler error: {e}")
            bot_logger.info("Daily tasks scheduler disabled due to error")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await setup_bot_commands(bot)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        bot_logger.info(f"Bot started: @{bot_info.username} (ID: {bot_info.id})")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
        from datetime import datetime
        escaped_time = datetime.now().strftime("%d\\.%m\\.%Y %H:%M:%S")
        escaped_username = bot_info.username.replace('_', '\\_')
        
        # –ü–æ–¥—Å—á—ë—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        event_types_count = len(event_bus.registered_event_types)
        plugins_count = plugin_manager.loaded_plugins_count
        ai_providers_count = ai_manager.providers_count

        startup_message = (
            "üü¢ *ENTERPRISE BOT –ó–ê–ü–£–©–ï–ù\\!*\n\n"
            f"ü§ñ *Username:* @{escaped_username}\n"
            f"üÜî *Bot ID:* {bot_info.id}\n"
            f"üìä *–í–µ—Ä—Å–∏—è:* v3\\.0 ENTERPRISE\n"
            f"üïê *–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:* {escaped_time}\n\n"
            f"üéØ *ENTERPRISE –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:*\n"
            f"üß† AI Assistant \\- {ai_providers_count} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n"
            f"üì° Event Bus \\- {event_types_count} —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π\n"
            f"üîå Plugin System \\- {plugins_count} –ø–ª–∞–≥–∏–Ω–æ–≤\n"
            f"üìß Email –∏–∑–æ–ª—è—Ü–∏—è –¥–ª—è daily\\_tasks\n"
            f"üìã Work journal —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
            f"üîß –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
            f"üëÄ Chat Monitor \\- —á—Ç–µ–Ω–∏–µ –≥—Ä—É–ø–ø\n"
            f"ü§ñ –ê–≤—Ç–æ\\-–∑–∞–¥–∞—á–∏ –∏–∑ —á–∞—Ç–æ–≤\n\n"
            f"‚úÖ *–°—Ç–∞—Ç—É—Å:* –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
        )
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        startup_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_menu")]
        ])

        for admin_id in settings.admin_user_id_list:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=startup_message,
                    reply_markup=startup_keyboard,
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                bot_logger.warning(f"Could not notify admin {admin_id} about startup: {e}")
            
    except Exception as e:
        bot_logger.error(f"Startup failed: {e}")
        raise


async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    bot_logger.info("Bot shutdown initiated")
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        shutdown_message = (
            "üî¥ *HHIVP IT Assistant Bot –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É\\.*\n\n"
            "üõë –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\\."
        )
        
        for admin_id in settings.admin_user_id_list:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=shutdown_message,
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                bot_logger.warning(f"Could not notify admin {admin_id} about shutdown: {e}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        global scheduler
        if scheduler and hasattr(scheduler, 'is_running') and scheduler.is_running():
            await scheduler.stop()
            bot_logger.info("Daily tasks scheduler stopped")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await close_db()
        bot_logger.info("Database connection closed")
        
    except Exception as e:
        bot_logger.error(f"Shutdown error: {e}")
    
    bot_logger.info("Bot shutdown completed")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    bot_logger.info("üöÄ Starting HHIVP IT Assistant Bot - REFACTORED VERSION")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ timeout –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        from aiohttp import ClientTimeout
        from aiogram.fsm.storage.memory import MemoryStorage

        bot = Bot(
            token=settings.telegram_token,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2),
            session=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ timeout
        )

        # FSM storage —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø (user_id + chat_id)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
        # 1. Database Session - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∏ —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑
        dp.message.middleware(DatabaseSessionMiddleware())
        dp.callback_query.middleware(DatabaseSessionMiddleware())
        
        # 2. Performance monitoring  
        dp.message.middleware(PerformanceMiddleware())
        dp.callback_query.middleware(PerformanceMiddleware())
        
        # 3. Logging (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç db_session)
        dp.message.middleware(LoggingMiddleware())
        dp.callback_query.middleware(LoggingMiddleware())
        
        # 4. Group monitoring
        dp.message.middleware(GroupMonitoringMiddleware())
        
        # 5. Auth (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç db_session)
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())

        # 6. Event Publisher - –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è Event Bus
        dp.message.middleware(EventPublisherMiddleware())
        dp.callback_query.middleware(EventPublisherMiddleware())

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û–ú –ø–æ—Ä—è–¥–∫–µ:
        
        # 1. –û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´ - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        dp.include_router(start.router)
        bot_logger.info("‚úÖ Common module loaded (start, help, profile)")
        
        # 2. DAILY TASKS - –ù–û–í–´–ï –ú–û–î–£–õ–ò —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º email —Ñ–∏–ª—å—Ç—Ä–æ–º
        from .modules.daily_tasks.router import router as daily_tasks_router
        dp.include_router(daily_tasks_router)
        bot_logger.info("‚úÖ Daily Tasks module loaded (NEW modular version with email priority)")
        
        # 3. WORK JOURNAL - –ù–û–í–´–ï –ú–û–î–£–õ–ò —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        from .modules.work_journal.router import router as work_journal_router
        dp.include_router(work_journal_router)
        bot_logger.info("‚úÖ Work Journal module loaded (NEW modular version with state filters)")
        
        # 4. Google Sheets Sync
        from .handlers import google_sheets_sync
        dp.include_router(google_sheets_sync.router)
        bot_logger.info("‚úÖ Google Sheets Sync module loaded")

        # 5. AI Assistant module - enterprise AI features
        from .modules.ai_assistant.router import router as ai_assistant_router
        dp.include_router(ai_assistant_router)
        bot_logger.info("‚úÖ AI Assistant module loaded")

        # 6. Chat Support module - simple request handling from groups (–ü–ï–†–ï–î chat_monitor!)
        from .modules.chat_support.router import router as chat_support_router
        dp.include_router(chat_support_router)
        bot_logger.info("‚úÖ Chat Support module loaded (simple /request flow)")

        # 7. Task Reports module - automated client reporting for completed tasks
        from .modules.task_reports.router import router as task_reports_router
        dp.include_router(task_reports_router)
        bot_logger.info("‚úÖ Task Reports module loaded (FSM-based report workflow)")

        # 8. Chat Monitor module - —á—Ç–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (–ü–û–°–õ–ï–î–ù–ò–ú - –ª–æ–≤–∏—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
        from .modules.chat_monitor.router import router as chat_monitor_router
        dp.include_router(chat_monitor_router)
        bot_logger.info("‚úÖ Chat Monitor module loaded")

        bot_logger.info("üéØ All modules loaded successfully with proper isolation")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        bot_logger.info("Bot configuration completed, starting polling...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(
            bot,
            allowed_updates=["message", "callback_query", "inline_query"],
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        bot_logger.info("Bot stopped by user")
    except Exception as e:
        bot_logger.error(f"Bot crashed: {e}")
        raise
    finally:
        bot_logger.info("Bot terminated")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• Bot crashed: {e}")
        sys.exit(1)


async def health_check():
    """Health check –¥–ª—è production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from .database.database import get_async_session
        async for session in get_async_session():
            await session.execute(text("SELECT 1"))
            break
        
        return True
    except Exception as e:
        bot_logger.error(f"Health check failed: {e}")
        return False
