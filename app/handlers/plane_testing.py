"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Plane –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession

from ..database.database import get_async_session
from ..integrations.plane_with_mentions import PlaneNotificationService, PlaneWebhookPayload, PlaneIssue
from ..utils.logger import bot_logger, log_user_action
from ..config import settings

router = Router()


@router.message(Command("test_plane"))
async def test_plane_notification(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Plane"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "test_plane")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_issue = PlaneIssue(
            id="HARZL-19",
            name="–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–Ω—Ç—Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫ –ø–µ—á–∞—Ç–∏",
            state="todo",
            priority="none",
            assignee="Dmitriy Gusev",  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ @strikerstr
            project="HarzLabs",
            created_by="Konstantin Makeykin",
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        test_payload = PlaneWebhookPayload(
            event="created",
            action="created",
            issue=test_issue,
            actor={"display_name": "Konstantin Makeykin", "email": "konstantin@example.com"}
        )
        
        async for session in get_async_session():
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            plane_service = PlaneNotificationService(message.bot, session)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chat_id –Ω–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            plane_service.chat_id = message.chat.id
            plane_service.topic_id = None
            
            success = await plane_service.process_webhook(test_payload)
            
            if success:
                await message.answer(
                    "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Plane –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                    "–î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º @strikerstr –≤–º–µ—Å—Ç–æ 'Dmitriy Gusev'"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
    except Exception as e:
        bot_logger.error(f"Error in test_plane_notification: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(Command("test_plane_update"))
async def test_plane_update_notification(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ Plane"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "test_plane_update")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        test_issue = PlaneIssue(
            id="HARZL-19",
            name="–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–Ω—Ç—Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫ –ø–µ—á–∞—Ç–∏",
            state="in_progress",  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
            priority="high",      # –ò–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            assignee="–¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤",  # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–ª–∏ –Ω–∞ –¢–∏–º–æ—Ñ–µ—è
            project="HarzLabs",
            created_by="Konstantin Makeykin",
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        test_changes = {
            "state": {
                "old": "todo",
                "new": "in_progress"
            },
            "priority": {
                "old": "none",
                "new": "high"
            },
            "assignee": {
                "old": "Dmitriy Gusev",
                "new": "–¢–∏–º–æ—Ñ–µ–π –ë–∞—Ç—ã—Ä–µ–≤"
            }
        }
        
        test_payload = PlaneWebhookPayload(
            event="updated",
            action="updated",
            issue=test_issue,
            changes=test_changes,
            actor={"display_name": "Konstantin Makeykin", "email": "konstantin@example.com"}
        )
        
        async for session in get_async_session():
            plane_service = PlaneNotificationService(message.bot, session)
            plane_service.chat_id = message.chat.id
            plane_service.topic_id = None
            
            success = await plane_service.process_webhook(test_payload)
            
            if success:
                await message.answer(
                    "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Plane –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                    "–î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å:\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: todo ‚Üí in_progress\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: none ‚Üí high\n"
                    "‚Ä¢ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: @strikerstr ‚Üí @spiritphoto"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
    except Exception as e:
        bot_logger.error(f"Error in test_plane_update_notification: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(Command("plane_workers"))
async def show_plane_workers_mapping(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Plane –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "plane_workers")
        
        async for session in get_async_session():
            from ..database.work_journal_models import WorkJournalWorker
            from sqlalchemy import select
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            result = await session.execute(
                select(WorkJournalWorker)
                .where(WorkJournalWorker.is_active == True)
                .order_by(WorkJournalWorker.display_order, WorkJournalWorker.name)
            )
            workers = result.scalars().all()
            
            if not workers:
                await message.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üë• **–ú–∞–ø–ø–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π Plane:**\n\n"
            
            for worker in workers:
                text += f"**{worker.name}**\n"
                text += f"‚îú Telegram: {worker.telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                text += f"‚îú User ID: {worker.telegram_user_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                text += f"‚îú –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'‚úÖ' if worker.mention_enabled else '‚ùå'}\n"
                
                if worker.plane_user_names:
                    try:
                        import json
                        plane_names = json.loads(worker.plane_user_names)
                        text += f"‚îî Plane –∏–º–µ–Ω–∞: {', '.join(plane_names)}\n"
                    except (json.JSONDecodeError, TypeError):
                        text += f"‚îî Plane –∏–º–µ–Ω–∞: –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞\n"
                else:
                    text += f"‚îî Plane –∏–º–µ–Ω–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
                    
                text += "\n"
            
            await message.answer(text, parse_mode="Markdown")
                
    except Exception as e:
        bot_logger.error(f"Error in show_plane_workers_mapping: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("test_plane_n8n"))
async def test_plane_n8n_notification(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Plane –æ—Ç n8n"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "test_plane_n8n")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç n8n
        test_data = {
            "source": "plane_n8n",
            "event_type": "plane_issue_created",
            "data": {
                "issue": {
                    "id": "HARZL-19",
                    "name": "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–Ω—Ç—Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É",
                    "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫ –ø–µ—á–∞—Ç–∏",
                    "state": "todo",
                    "priority": "none",
                    "assignee": "Dmitriy Gusev",  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ @strikerstr
                    "project": "HarzLabs",
                    "created_at": "2025-07-31T23:38:00Z"
                },
                "actor": {
                    "display_name": "Konstantin Makeykin"
                }
            }
        }
        
        async for session in get_async_session():
            from ..services.plane_n8n_handler import PlaneN8nHandler, PlaneWebhookData
            
            # –°–æ–∑–¥–∞–µ–º payload
            payload = PlaneWebhookData(**test_data)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            plane_handler = PlaneN8nHandler(message.bot, session)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chat_id –Ω–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            plane_handler.chat_id = message.chat.id
            plane_handler.topic_id = None
            
            success = await plane_handler.process_plane_webhook(payload)
            
            if success:
                await message.answer(
                    "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Plane –æ—Ç n8n –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                    "–î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚ï≠‚îÄ üéØ HARZL-19\n"
                    "‚îú üìù –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ...\n"
                    "‚îú üë• @strikerstr  ‚Üê –≤–º–µ—Å—Ç–æ 'Dmitriy Gusev'\n"
                    "‚ï∞‚îÄ üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Plane"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
    except Exception as e:
        bot_logger.error(f"Error in test_plane_n8n_notification: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(Command("plane_config"))
async def show_plane_config(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Plane –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "plane_config")
        
        config_text = "‚öôÔ∏è **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Plane –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        plane_chat_id = getattr(settings, 'plane_chat_id', None)
        plane_topic_id = getattr(settings, 'plane_topic_id', None)
        webhook_secret = getattr(settings, 'plane_webhook_secret', None)
        
        config_text += f"**Chat ID:** {plane_chat_id or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        config_text += f"**Topic ID:** {plane_topic_id or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        config_text += f"**Webhook Secret:** {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if webhook_secret else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        config_text += f"**–¢–µ–∫—É—â–∏–π —á–∞—Ç ID:** {message.chat.id}\n\n"
        
        config_text += "**–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n"
        config_text += "‚Ä¢ `/test_plane` - —Ç–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ webhook Plane\n"
        config_text += "‚Ä¢ `/test_plane_n8n` - —Ç–µ—Å—Ç webhook –æ—Ç n8n\n"
        config_text += "‚Ä¢ `/test_plane_update` - —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏\n"
        config_text += "‚Ä¢ `/plane_workers` - –º–∞–ø–ø–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
        config_text += "‚Ä¢ `/plane_config` - —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        
        await message.answer(config_text, parse_mode="Markdown")
        
    except Exception as e:
        bot_logger.error(f"Error in show_plane_config: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
