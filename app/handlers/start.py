"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from datetime import datetime

from ..database.database import get_async_session
from ..database.models import BotUser
from ..utils.formatters import format_help_message, format_user_profile, escape_markdown
from ..utils.logger import bot_logger, log_user_action
from ..config import settings

router = Router()


def create_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–∞—Å—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="start_journal"),
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç", callback_data="show_history")
        ],
        [
            InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç—ã", callback_data="show_reports"),
            InlineKeyboardButton(text="üè¢ –ö–æ–º–ø–∞–Ω–∏–∏", callback_data="manage_companies")
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Sheets", callback_data="sheets_sync_menu")
        ],
        [
            InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="show_help"),
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_or_create_user(session: AsyncSession, message: Message) -> BotUser:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    telegram_user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if not settings.is_admin(telegram_user_id):
        bot_logger.warning(f"Non-admin user {telegram_user_id} tried to register")
        return None
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(BotUser).where(BotUser.telegram_user_id == telegram_user_id)
    )
    user = result.scalar_one_or_none()
    
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
        await session.execute(
            update(BotUser)
            .where(BotUser.telegram_user_id == telegram_user_id)
            .values(last_seen=datetime.utcnow())
        )
        await session.commit()
        return user
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤)
    role = "admin"  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∞–º–∏
    
    new_user = BotUser(
        telegram_user_id=telegram_user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        role=role,
        language_code=message.from_user.language_code or "ru"
    )
    
    session.add(new_user)
    await session.commit()
    
    bot_logger.info(f"New admin user registered: {telegram_user_id} (@{message.from_user.username})")
    
    return new_user


@router.message(CommandStart())
async def start_command(message: Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ middleware
        db_session = kwargs.get('db_session')
        if not db_session:
            bot_logger.error("No database session available in start handler")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
                parse_mode="MarkdownV2"
            )
            return
            
        user = await get_or_create_user(db_session, message)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, get_or_create_user –≤–µ—Ä–Ω–µ—Ç None
        # –Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ AuthMiddleware –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–Ω—å—à–µ
        if not user:
            return
        
        log_user_action(user.telegram_user_id, "start")
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        username = escape_markdown(user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{username}*\\!\n\n"
        
        welcome_text += (
            "ü§ñ –Ø *HHIVP IT Assistant Bot* \\- –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é IT\\-—Ä–∞–±–æ—Ç–∞–º–∏\\.\n\n"
            "üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ üìã –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n"
            "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤\n\n"
            "üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã\\.*"
        )
        
        await message.answer(
            welcome_text, 
            parse_mode="MarkdownV2",
            reply_markup=create_main_menu_keyboard()
        )
            
    except Exception as e:
        bot_logger.error(f"Start command error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "help")
        
        help_text = format_help_message()
        await message.answer(help_text, parse_mode="MarkdownV2")
        
    except Exception as e:
        bot_logger.error(f"Help command error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("profile"))
async def profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    try:
        user_id = message.from_user.id
        
        async for session in get_async_session():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            result = await session.execute(
                select(BotUser).where(BotUser.telegram_user_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\\.",
                    parse_mode="MarkdownV2"
                )
                return
            
            log_user_action(user_id, "view_profile")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
            user_dict = {
                "username": user.username,
                "first_name": user.first_name,
                "role": user.role,
                "created_at": user.created_at,
                "last_seen": user.last_seen
            }
            
            profile_text = format_user_profile(user_dict)
            await message.answer(profile_text, parse_mode="MarkdownV2")
            
    except Exception as e:
        bot_logger.error(f"Profile command error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("ping"))
async def ping_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "ping")
        
        await message.answer("üèì Pong\\! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\\.", parse_mode="MarkdownV2")
        
    except Exception as e:
        bot_logger.error(f"Ping command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping\\.", parse_mode="MarkdownV2")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞
COMMANDS_MENU = [
    BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
    BotCommand(command="ping", description="üèì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"),
    BotCommand(command="journal", description="üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞–±–æ—Ç"),
    BotCommand(command="history", description="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç"),
    BotCommand(command="report", description="üìà –û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–∞–º"),
    BotCommand(command="companies", description="üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏"),
]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "start_journal")
async def callback_start_journal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å'"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    from aiogram.types import User
    fake_message = type('FakeMessage', (), {
        'from_user': callback.from_user,
        'answer': callback.message.answer,
        'text': '/journal'
    })()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂—É—Ä–Ω–∞–ª–∞
    from .work_journal import start_journal_entry
    await start_journal_entry(fake_message)


@router.callback_query(F.data == "show_history")
async def callback_show_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç'"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    fake_message = type('FakeMessage', (), {
        'from_user': callback.from_user,
        'answer': callback.message.answer,
        'text': '/history'
    })()
    
    from .work_journal import show_work_history
    await show_work_history(fake_message)


@router.callback_query(F.data == "show_reports")
async def callback_show_reports(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç—á–µ—Ç—ã'"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    fake_message = type('FakeMessage', (), {
        'from_user': callback.from_user,
        'answer': callback.message.answer,
        'text': '/report'
    })()
    
    from .work_journal import show_work_report
    await show_work_report(fake_message)


@router.callback_query(F.data == "manage_companies")
async def callback_manage_companies(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–º–ø–∞–Ω–∏–∏'"""
    await callback.answer()
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    fake_message = type('FakeMessage', (), {
        'from_user': callback.from_user,
        'answer': callback.message.answer,
        'text': '/companies'
    })()
    
    from .work_journal import manage_companies
    await manage_companies(fake_message)


@router.callback_query(F.data == "show_help")
async def callback_show_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø—Ä–∞–≤–∫–∞'"""
    await callback.answer()
    await callback.message.answer(
        format_help_message(),
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data == "show_profile")
async def callback_show_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'"""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        
        async for session in get_async_session():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            result = await session.execute(
                select(BotUser).where(BotUser.telegram_user_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await callback.message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\\.",
                    parse_mode="MarkdownV2"
                )
                return
            
            log_user_action(user_id, "view_profile")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
            user_dict = {
                "username": user.username,
                "first_name": user.first_name,
                "role": user.role,
                "created_at": user.created_at,
                "last_seen": user.last_seen
            }
            
            profile_text = format_user_profile(user_dict)
            await callback.message.answer(profile_text, parse_mode="MarkdownV2")
            
    except Exception as e:
        bot_logger.error(f"Profile callback error: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\\.",
            parse_mode="MarkdownV2"
        )
