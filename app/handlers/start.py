"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from datetime import datetime

from ..database.database import get_async_session
from ..database.models import BotUser
from ..utils.formatters import format_help_message, format_user_profile, escape_markdown
from ..utils.logger import bot_logger, log_user_action
from ..config import settings

router = Router()


def create_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–∞—Å—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="start_journal"),
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç", callback_data="show_history")
        ],
        [
            InlineKeyboardButton(text="‚úàÔ∏è –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="daily_tasks")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings"),
            InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="show_help")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_or_create_user(session: AsyncSession, message: Message) -> BotUser:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    telegram_user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if not settings.is_admin(telegram_user_id):
        bot_logger.warning(f"Non-admin user {telegram_user_id} tried to register")
        return None
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(BotUser).where(BotUser.telegram_user_id == telegram_user_id)
    )
    user = result.scalar_one_or_none()
    
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
        await session.execute(
            update(BotUser)
            .where(BotUser.telegram_user_id == telegram_user_id)
            .values(last_seen=datetime.utcnow())
        )
        await session.commit()
        return user
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤)
    role = "admin"  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∞–º–∏
    
    new_user = BotUser(
        telegram_user_id=telegram_user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        role=role,
        language_code=message.from_user.language_code or "ru"
    )
    
    session.add(new_user)
    await session.commit()
    
    bot_logger.info(f"New admin user registered: {telegram_user_id} (@{message.from_user.username})")
    
    return new_user


@router.message(CommandStart())
async def start_command(message: Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ middleware
        db_session = kwargs.get('db_session')
        if not db_session:
            bot_logger.error("No database session available in start handler")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
                parse_mode="MarkdownV2"
            )
            return
            
        user = await get_or_create_user(db_session, message)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, get_or_create_user –≤–µ—Ä–Ω–µ—Ç None
        # –Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ AuthMiddleware –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–Ω—å—à–µ
        if not user:
            return
        
        log_user_action(user.telegram_user_id, "start")
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        username = escape_markdown(user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{username}*\\!\n\n"
        
        welcome_text += (
            "ü§ñ –Ø *HHIVP IT Assistant Bot* \\- –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é IT\\-—Ä–∞–±–æ—Ç–∞–º–∏\\.\n\n"
            "üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ üìã –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n"
            "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤\n\n"
            "üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã\\.*"
        )
        
        await message.answer(
            welcome_text, 
            parse_mode="MarkdownV2",
            reply_markup=create_main_menu_keyboard()
        )
            
    except Exception as e:
        bot_logger.error(f"Start command error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


# –ö–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –º–æ–¥—É–ª–∏
# @router.message(Command("plane_test"))
# async def cmd_plane_test(message: Message):
#     """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /plane_test –≤ daily_tasks - –£–î–ê–õ–ï–ù–û, —Ç–µ–ø–µ—Ä—å –≤ –º–æ–¥—É–ª—è—Ö"""


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "help")
        
        help_text = format_help_message()
        await message.answer(help_text, parse_mode="MarkdownV2")
        
    except Exception as e:
        bot_logger.error(f"Help command error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("profile"))
async def profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    try:
        user_id = message.from_user.id
        
        async for session in get_async_session():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            result = await session.execute(
                select(BotUser).where(BotUser.telegram_user_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\\.",
                    parse_mode="MarkdownV2"
                )
                return
            
            log_user_action(user_id, "view_profile")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
            user_dict = {
                "username": user.username,
                "first_name": user.first_name,
                "role": user.role,
                "created_at": user.created_at,
                "last_seen": user.last_seen
            }
            
            profile_text = format_user_profile(user_dict)
            await message.answer(profile_text, parse_mode="MarkdownV2")
            
    except Exception as e:
        bot_logger.error(f"Profile command error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\\.",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "start_menu")
async def callback_main_menu(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = callback_query.from_user.id
        log_user_action(user_id, "main_menu")

        welcome_text = (
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HHIVP IT Assistant Bot\\!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )

        await callback_query.message.edit_text(
            welcome_text,
            reply_markup=create_main_menu_keyboard(),
            parse_mode="MarkdownV2"
        )
        await callback_query.answer()

    except Exception as e:
        bot_logger.error(f"Main menu callback error: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "show_settings")
async def callback_settings(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        user_id = callback_query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        async for session in get_async_session():
            result = await session.execute(
                select(BotUser).where(BotUser.telegram_user_id == user_id)
            )
            user = result.scalar_one_or_none()

            if not user:
                await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úàÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á –∏–∑ Plane", callback_data="daily_settings")],
                [InlineKeyboardButton(text="üè¢ –ö–æ–º–ø–∞–Ω–∏–∏", callback_data="manage_companies")],
                [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")]
            ])

            username = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
            role_emoji = "üëë" if user.role == "admin" else "üë§"

            settings_text = (
                f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
                f"{role_emoji} *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{username}\n"
                f"üé≠ *–†–æ–ª—å:* {user.role}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
            )

            await callback_query.message.edit_text(
                settings_text,
                reply_markup=settings_keyboard,
                parse_mode="MarkdownV2"
            )
            await callback_query.answer()

    except Exception as e:
        bot_logger.error(f"Settings callback error: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.message(Command("ping"))
async def ping_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "ping")
        
        await message.answer("üèì Pong\\! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\\.", parse_mode="MarkdownV2")
        
    except Exception as e:
        bot_logger.error(f"Ping command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping\\.", parse_mode="MarkdownV2")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
COMMANDS_MENU = [
    BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
    BotCommand(command="daily_tasks", description="‚úàÔ∏è –ú–æ–∏ –∑–∞–¥–∞—á–∏"),
    BotCommand(command="request", description="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (–≤ –≥—Ä—É–ø–ø–µ)"),
]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "start_journal")
async def callback_start_journal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å'"""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        log_user_action(user_id, "start_journal")
        
        async for session in get_async_session():
            from ..services.work_journal_service import WorkJournalService
            from ..utils.work_journal_constants import WorkJournalState, MESSAGE_TEMPLATES, EMOJI
            from ..utils.work_journal_keyboards import create_continue_keyboard
            from ..utils.work_journal_formatters import escape_markdown_v2, format_date_for_display
            from datetime import date
            
            service = WorkJournalService(session)
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ
            await service.set_user_state(
                user_id,
                WorkJournalState.SELECTING_DATE,
                draft_date=date.today()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            start_text = (
                f"{MESSAGE_TEMPLATES['start_entry']}\n\n"
                f"{EMOJI['date']} *–î–∞—Ç–∞:* {escape_markdown_v2(format_date_for_display(date.today()))}"
            )
            
            await callback.message.answer(
                start_text,
                reply_markup=create_continue_keyboard(),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error starting journal entry for user {user_id}: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "show_history")
async def callback_show_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç'"""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        log_user_action(user_id, "view_history")
        
        async for session in get_async_session():
            from ..services.work_journal_service import WorkJournalService
            from ..utils.work_journal_formatters import format_entries_list, format_error_message
            from ..utils.work_journal_keyboards import create_history_menu_keyboard
            from ..utils.work_journal_constants import EMOJI
            
            service = WorkJournalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            entries = await service.get_work_entries(
                telegram_user_id=user_id,
                limit=10
            )
            
            if entries:
                text = format_entries_list(entries, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
            else:
                text = f"*{EMOJI['history']} –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\\. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /journal\\."
            
            await callback.message.answer(
                text,
                reply_markup=create_history_menu_keyboard(),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error showing work history for user {user_id}: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "show_reports")
async def callback_show_reports(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç—á–µ—Ç—ã'"""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        log_user_action(user_id, "view_reports")
        
        async for session in get_async_session():
            from ..services.work_journal_service import WorkJournalService
            from ..utils.work_journal_formatters import format_statistics_report, format_error_message
            from ..utils.work_journal_keyboards import create_report_menu_keyboard
            from datetime import date, timedelta
            
            service = WorkJournalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            week_ago = date.today() - timedelta(days=7)
            stats = await service.get_statistics(
                telegram_user_id=user_id,
                date_from=week_ago
            )
            
            report_text = format_statistics_report(stats, "–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é")
            
            await callback.message.answer(
                report_text,
                reply_markup=create_report_menu_keyboard(),
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error showing work reports for user {user_id}: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "manage_companies")
async def callback_manage_companies(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–º–ø–∞–Ω–∏–∏'"""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        log_user_action(user_id, "manage_companies")
        
        async for session in get_async_session():
            from ..services.work_journal_service import WorkJournalService
            from ..utils.work_journal_formatters import escape_markdown_v2
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            service = WorkJournalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
            companies = await service.get_companies()
            
            if not companies:
                await callback.message.answer(
                    "üè¢ *–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø—É—Å—Ç*\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞–±–æ—Ç\\.",
                    parse_mode="MarkdownV2"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π
            companies_text = "üè¢ **–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π:**\n\n"
            
            for i, company in enumerate(companies, 1):
                companies_text += f"{i}\\. {escape_markdown_v2(company)}\n"
            
            companies_text += f"\n**–í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π:** {len(companies)}\n\n"
            companies_text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            companies_text += "`/delete_company –ù–∞–∑–≤–∞–Ω–∏–µ`"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="show_main_menu")]
            ])
            
            await callback.message.answer(
                companies_text,
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
            
    except Exception as e:
        bot_logger.error(f"Error managing companies for user {user_id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π\\.", parse_mode="MarkdownV2")


@router.callback_query(F.data == "show_help")
async def callback_show_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø—Ä–∞–≤–∫–∞'"""
    await callback.answer()
    await callback.message.answer(
        format_help_message(),
        parse_mode="MarkdownV2"
    )


@router.callback_query(F.data == "show_profile")
async def callback_show_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'"""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        
        async for session in get_async_session():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            result = await session.execute(
                select(BotUser).where(BotUser.telegram_user_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await callback.message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\\.",
                    parse_mode="MarkdownV2"
                )
                return
            
            log_user_action(user_id, "view_profile")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
            user_dict = {
                "username": user.username,
                "first_name": user.first_name,
                "role": user.role,
                "created_at": user.created_at,
                "last_seen": user.last_seen
            }
            
            profile_text = format_user_profile(user_dict)
            await callback.message.answer(profile_text, parse_mode="MarkdownV2")
            
    except Exception as e:
        bot_logger.error(f"Profile callback error: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\\.",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "daily_tasks")
async def callback_daily_tasks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Plane'"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    user_id = callback.from_user.id
    if not settings.is_admin(user_id):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á Plane")
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É daily_tasks
    from ..modules.daily_tasks.handlers import cmd_daily_tasks
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    fake_message = type('FakeMessage', (), {
        'from_user': callback.from_user,
        'reply': callback.message.answer,
        'answer': callback.message.answer
    })()
    
    await cmd_daily_tasks(fake_message)


@router.callback_query(F.data == "show_main_menu")
async def callback_show_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    try:
        user_id = callback.from_user.id
        
        async for session in get_async_session():
            user = await get_or_create_user(session, type('FakeMessage', (), {
                'from_user': callback.from_user
            })())
            
            if not user:
                return
            
            username = escape_markdown(user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            
            welcome_text = f"üëã *{username}*\\!\n\n"
            welcome_text += (
                "ü§ñ –Ø *HHIVP IT Assistant Bot* \\- –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é IT\\-—Ä–∞–±–æ—Ç–∞–º–∏\\.\n\n"
                "üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã\\.*"
            )
            
            await callback.message.edit_text(
                welcome_text, 
                parse_mode="MarkdownV2",
                reply_markup=create_main_menu_keyboard()
            )
            
    except Exception as e:
        bot_logger.error(f"Error showing main menu: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data == "sheets_sync_menu")
async def callback_sheets_sync_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Sheets'"""
    await callback.answer()
    
    try:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏–∑ google_sheets_sync
        from ..handlers.google_sheets_sync import cmd_sheets_sync_menu
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fake_message = type('FakeMessage', (), {
            'from_user': callback.from_user,
            'reply': callback.message.answer,
            'answer': callback.message.answer
        })()
        
        await cmd_sheets_sync_menu(fake_message)
        
    except Exception as e:
        bot_logger.error(f"Error in sheets sync menu: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\\.",
            parse_mode="MarkdownV2"
        )



@router.callback_query(F.data == "daily_settings")
async def callback_daily_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á'"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    user_id = callback.from_user.id
    if not settings.is_admin(user_id):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á Plane")
        return
    
    try:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É daily_settings
        from ..modules.daily_tasks.handlers import cmd_daily_settings
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fake_message = type('FakeMessage', (), {
            'from_user': callback.from_user,
            'reply': callback.message.answer,
            'answer': callback.message.answer
        })()
        
        await cmd_daily_settings(fake_message)
        
    except Exception as e:
        bot_logger.error(f"Error in daily settings: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫\\\\.",
            parse_mode="MarkdownV2"
        )
