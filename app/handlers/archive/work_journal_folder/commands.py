"""
Work Journal Commands - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/journal, /history, /report, /companies)
"""
from datetime import date, datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from ...utils.logger import bot_logger, log_user_action

router = Router()


@router.message(Command("journal", "work_journal"))
async def start_journal_entry(message: Message):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞–±–æ—Ç"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "start_journal")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        await message.answer(
            "üìã **–ñ—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç**\n\nüöß –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞ —á—Ç–æ",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error starting journal entry for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("history", "work_history"))
async def show_work_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–±–æ—Ç"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "view_history")
        
        await message.answer(
            "üìä **–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç**\n\nüöß –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error showing work history for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("report", "work_report"))
async def show_work_report(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–∞–º"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "view_reports")
        
        await message.answer(
            "üìà **–û—Ç—á–µ—Ç—ã**\n\nüöß –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error showing work reports for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )


@router.message(Command("companies", "manage_companies"))
async def manage_companies(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        log_user_action(user_id, "manage_companies")
        
        await message.answer(
            "üè¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏**\n\nüöß –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        bot_logger.error(f"Error managing companies for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.",
            parse_mode="MarkdownV2"
        )
