"""
–ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ Plane
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode

from ..middleware.auth import require_admin
from ..utils.logger import bot_logger
from ..config import settings

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in settings.admin_user_id_list


@router.message(Command("daily_tasks"))
async def cmd_daily_tasks(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∞ –∏–∑ Plane"""
    admin_id = message.from_user.id
    
    if not is_admin(admin_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
        
    bot_logger.info(f"Daily tasks command called by admin {admin_id}")
    
    loading_msg = await message.reply("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏ –∏–∑ Plane...")
    
    try:
        from ..services.daily_tasks_service import daily_tasks_service
        from ..integrations.plane_api import plane_api
        
        if not daily_tasks_service or not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        
        admin_email = admin_settings.get('plane_email')
        if not admin_email:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]
            ])
            
            await loading_msg.edit_text(
                "üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à email.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = await daily_tasks_service.get_admin_tasks(admin_id)
        
        if not tasks:
            await loading_msg.edit_text(
                f"üìã –ó–∞–¥–∞—á–∏ –∏–∑ Plane\n\n"
                f"üë§ Email: {admin_email}\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: 0\n\n"
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_text = f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Plane\n\n"
        tasks_text += f"üë§ Email: {admin_email}\n"
        tasks_text += f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}\n\n"
        
        for i, task in enumerate(tasks[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            status_icon = "‚úÖ" if task.state == "completed" else "üîÑ"
            tasks_text += f"{i}. {status_icon} {task.name}\n"
        
        if len(tasks) > 5:
            tasks_text += f"\n... –∏ –µ—â–µ {len(tasks) - 5} –∑–∞–¥–∞—á"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"daily_test_{admin_id}")]
        ])
        
        await loading_msg.edit_text(
            tasks_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        bot_logger.error(f"Error in daily_tasks command: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane"
        )


# –°–¢–ê–†–´–ô –ü–†–û–°–¢–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–î–ê–õ–ï–ù - –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –ü–û–õ–ù–´–ô –ù–ò–ñ–ï
# –ü–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ –≤ —Ñ–∞–π–ª–µ —Å–æ –≤—Å–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π


@router.message(Command("daily_settings"))  
async def cmd_daily_settings(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = message.from_user.id
    
    if not is_admin(admin_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from ..services.daily_tasks_service import daily_tasks_service
    
    current_email = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    current_time = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ" 
    notifications_enabled = False
    
    if daily_tasks_service:
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        
        if admin_settings.get('plane_email'):
            current_email = f"‚úÖ {admin_settings['plane_email']}"
        if admin_settings.get('notification_time'):
            current_time = f"‚úÖ {admin_settings['notification_time']}"
        notifications_enabled = admin_settings.get('enabled', False)
    
    status_icon = "‚úÖ" if notifications_enabled else "‚ùå"
    
    settings_text = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        f"üìß *Email:* {current_email}\n"
        f"üïò *–í—Ä–µ–º—è:* {current_time}\n"
        f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {status_icon} {'–≤–∫–ª—é—á–µ–Ω—ã' if notifications_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
        [InlineKeyboardButton(text="üïò –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="setup_time")],
        [InlineKeyboardButton(text="üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞", callback_data="test_send")]
    ])
    
    await message.reply(
        settings_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )


@router.callback_query(F.data == "setup_email")
async def handle_setup_email(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email"""
    admin_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–∂–∏–¥–∞–Ω–∏—è email
    from ..database.database import AsyncSessionLocal as async_session
    from ..database.models import UserSession
    from sqlalchemy import select
    
    try:
        async with async_session() as session:
            result = await session.execute(
                select(UserSession).where(UserSession.telegram_user_id == admin_id)
            )
            user_session = result.scalar_one_or_none()
            
            if user_session:
                user_session.last_command = "waiting_email"
                user_session.context = {"admin_id": admin_id}
            else:
                new_session = UserSession(
                    telegram_user_id=admin_id,
                    last_command="waiting_email", 
                    context={"admin_id": admin_id}
                )
                session.add(new_session)
            
            await session.commit()
    except Exception as e:
        bot_logger.error(f"Error setting email session: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_email")]
    ])
    
    await callback.message.edit_text(
        f"üìß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Email –¥–ª—è Plane*\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –∏–∑ Plane, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"`zarudesu@gmail.com`\n\n"
        f"–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=back_keyboard,
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer()


@router.callback_query(F.data == "setup_time")
async def handle_setup_time(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    from ..services.daily_tasks_service import daily_tasks_service
    current_time = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    if daily_tasks_service:
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        if admin_settings.get('notification_time'):
            current_time = admin_settings['notification_time']
    
    time_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üåÖ 08:00", callback_data="set_time_08:00"),
            InlineKeyboardButton(text="‚òÄÔ∏è 09:00", callback_data="set_time_09:00"),
            InlineKeyboardButton(text="üå§Ô∏è 10:00", callback_data="set_time_10:00")
        ],
        [
            InlineKeyboardButton(text="üåû 11:00", callback_data="set_time_11:00"),
            InlineKeyboardButton(text="üåÜ  12:00", callback_data="set_time_12:00"),
            InlineKeyboardButton(text="üåá  18:00", callback_data="set_time_18:00")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
    ])
    
    await callback.message.edit_text(
        f"üïò *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        f"üìÖ *–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* {current_time}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á:",
        reply_markup=time_keyboard,
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer()


@router.callback_query(F.data == "test_send")
async def handle_test_send(callback: CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    await callback.message.edit_text(
        f"üß™ *–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞*\n\n"
        f"‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n"
        f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤\n"
        f"‚úÖ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n"
        f"üéØ *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!*\n\n"
        f"–ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Plane API",
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer()


@require_admin
@router.message(Command("plane_test"))
async def cmd_plane_test(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API"""
    admin_id = message.from_user.id
    
    loading_msg = await message.reply("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Plane API...")
    
    try:
        from ..integrations.plane_api import plane_api
        from ..services.daily_tasks_service import daily_tasks_service
        
        if not plane_api.configured:
            await loading_msg.edit_text(
                "‚ùå *Plane API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env:\n"
                "‚Ä¢ `PLANE_API_URL`\n"
                "‚Ä¢ `PLANE_API_TOKEN`\n" 
                "‚Ä¢ `PLANE_WORKSPACE_SLUG`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = (
            f"üß™ *–¢–µ—Å—Ç Plane API*\n\n"
            f"üì° *URL:* {plane_api.api_url}\n"
            f"üîë *–¢–æ–∫–µ–Ω:* ‚úÖ –µ—Å—Ç—å\n"
            f"üè¢ *Workspace:* {plane_api.workspace_slug}\n\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email mapping
        email = None
        if daily_tasks_service:
            email = await daily_tasks_service.get_admin_email_mapping(admin_id)
        
        if not email:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å email", callback_data=f"setup_email_{admin_id}")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="daily_settings")]
            ])
            
            await loading_msg.edit_text(
                info_text + 
                "‚ö†Ô∏è *Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Plane –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à email –≤ —Å–∏—Å—Ç–µ–º–µ Plane.\n\n"
                "**–°—Ç–∞—Ç—É—Å:** –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email üîß",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
            return
        
        # Email –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        info_text += f"üìß *Email:* {email}\n\n"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏
        tasks = await plane_api.get_all_assigned_tasks_by_user_id(admin_id)
        
        if tasks:
            await loading_msg.edit_text(
                info_text +
                f"‚úÖ *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!*\n\n"
                f"üìã *–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:* {len(tasks)}\n"
                f"**–°—Ç–∞—Ç—É—Å:** –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üöÄ\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data=f"daily_test_{admin_id}")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="daily_settings")]
                ])
            )
        else:
            await loading_msg.edit_text(
                info_text +
                f"‚ö†Ô∏è *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Plane\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π email: `{email}`\n"
                f"‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n\n"
                f"**–°—Ç–∞—Ç—É—Å:** –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK, –Ω–æ –∑–∞–¥–∞—á –Ω–µ—Ç üìù",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data=f"setup_email_{admin_id}")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="daily_settings")]
                ])
            )
        
    except Exception as e:
        bot_logger.error(f"Plane API test error: {e}")
        await loading_msg.edit_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API*\n\n"
            f"–û—à–∏–±–∫–∞: `{str(e)}`\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ API\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Plane\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ workspace\n\n"
            f"üìã –°–º–æ—Ç—Ä–∏—Ç–µ PLANE_API_TOKEN_GUIDE.md –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
            parse_mode=ParseMode.MARKDOWN
        )


@require_admin
@router.message(Command("scheduler_status"))
async def cmd_scheduler_status(message: Message):
    """–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    admin_count = len(settings.admin_user_id_list)
    
    await message.reply(
        f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
        f"ü§ñ *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:* –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
        f"üë• *–ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:* {admin_count}\n"
        f"üóÑÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        f"‚úàÔ∏è *Plane API:* –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n"
        f"*–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!* üöÄ",
        parse_mode=ParseMode.MARKDOWN
    )


@router.callback_query(F.data.startswith("setup_email_"))
async def handle_setup_email(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É email –¥–ª—è Plane"""
    admin_id = int(callback.data.split('_')[2])
    
    if callback.from_user.id != admin_id:
        await callback.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π email")
        return
    
    await callback.message.edit_text(
        "üìß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –¥–ª—è Plane*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Plane.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `ivan@hhivp.com`\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
    from ..database.database import AsyncSessionLocal as async_session
    from ..database.models import UserSession
    from sqlalchemy import select, insert, update
    
    try:
        async with async_session() as session:
            result = await session.execute(
                select(UserSession).where(UserSession.telegram_user_id == admin_id)
            )
            user_session = result.scalar_one_or_none()
            
            if user_session:
                user_session.last_command = "waiting_email"
                user_session.context = {"admin_id": admin_id}
            else:
                new_session = UserSession(
                    telegram_user_id=admin_id,
                    last_command="waiting_email",
                    context={"admin_id": admin_id}
                )
                session.add(new_session)
            
            await session.commit()
            
    except Exception as e:
        bot_logger.error(f"Error setting session state: {e}")
    
    await callback.answer()


@router.message(F.text)
async def debug_all_messages(message: Message):
    """–í–†–ï–ú–ï–ù–ù–´–ô DEBUG - –ª–æ–≥–∏—Ä—É–µ–º –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    import re
    text = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    is_email = re.match(email_regex, text)
    
    bot_logger.info(f"DEBUG ALL MESSAGES: User {user_id} sent: '{text}' | Is email: {bool(is_email)}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ email - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if is_email and is_admin(user_id):
        await handle_email_input_manual(message)


@router.message(F.text.regexp(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'))
async def handle_email_input_original(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    admin_id = message.from_user.id
    email = message.text.strip().lower()
    
    bot_logger.info(f"EMAIL HANDLER TRIGGERED: Email input received from user {admin_id}: {email}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if not is_admin(admin_id):
        bot_logger.info(f"Email ignored - user {admin_id} is not admin")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º email –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    
    # –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await handle_email_input_manual(message)


async def handle_email_input_manual(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    admin_id = message.from_user.id
    email = message.text.strip().lower()
    
    bot_logger.info(f"EMAIL HANDLER TRIGGERED: Email input received from user {admin_id}: {email}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if not is_admin(admin_id):
        bot_logger.info(f"Email ignored - user {admin_id} is not admin")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º email –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ email –ò–õ–ò –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª email
    from ..database.database import AsyncSessionLocal as async_session
    from ..database.models import UserSession
    from ..services.daily_tasks_service import daily_tasks_service
    from sqlalchemy import select
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–∂–∏–¥–∞–Ω–∏—è email
        waiting_for_email = False
        async with async_session() as session:
            result = await session.execute(
                select(UserSession).where(UserSession.telegram_user_id == admin_id)
            )
            user_session = result.scalar_one_or_none()
            
            if user_session and user_session.last_command == "waiting_email":
                waiting_for_email = True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email (–∏ –µ—Å–ª–∏ –æ–∂–∏–¥–∞–ª–∏, –∏ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª–∏)
        if daily_tasks_service:
            success = await daily_tasks_service.set_admin_email_mapping(admin_id, email)
            
            if success:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                success_msg = (
                    f"‚úÖ *Email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω*\n\n"
                    f"üìß *–í–∞—à email:* `{email}`\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Plane!\n\n"
                    f"üöÄ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n"
                    f"‚Ä¢ `/daily_tasks` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
                    f"‚Ä¢ `/daily_settings` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data=f"daily_test_{admin_id}")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="daily_settings")]
                ])
                
                await message.reply(success_msg, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email")
        else:
            await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª–æ
        if waiting_for_email:
            async with async_session() as session:
                if user_session:
                    user_session.last_command = None
                    user_session.context = {}
                    await session.commit()
                    
    except Exception as e:
        bot_logger.error(f"Error handling email input: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email")


@router.message(Command("cancel"))
async def cmd_cancel(message: Message):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    admin_id = message.from_user.id
    
    from ..database.database import AsyncSessionLocal as async_session
    from ..database.models import UserSession
    from sqlalchemy import select
    
    try:
        async with async_session() as session:
            result = await session.execute(
                select(UserSession).where(UserSession.telegram_user_id == admin_id)
            )
            user_session = result.scalar_one_or_none()
            
            if user_session and user_session.last_command:
                user_session.last_command = None
                user_session.context = {}
                await session.commit()
                await message.reply("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                await message.reply("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                
    except Exception as e:
        bot_logger.error(f"Error canceling operation: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏")

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ daily_tasks.py –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@router.callback_query(F.data.startswith("set_time_"))
async def handle_set_time(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    admin_id = callback.from_user.id
    time_str = callback.data.replace("set_time_", "")
    
    from ..services.daily_tasks_service import daily_tasks_service
    
    if daily_tasks_service:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
        success = await daily_tasks_service.set_admin_notification_time(admin_id, time_str)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ *–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ*\n\n"
                f"üïò *–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:* {time_str}\n\n" 
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")],
                    [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="test_send")]
                ]),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                ])
            )
    
    await callback.answer()


@router.callback_query(F.data == "back_to_settings")
async def handle_back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    admin_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from ..services.daily_tasks_service import daily_tasks_service
    
    current_email = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    current_time = "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ" 
    notifications_enabled = False
    
    if daily_tasks_service:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await daily_tasks_service._load_admin_settings_from_db()
        admin_settings = daily_tasks_service.admin_settings.get(admin_id, {})
        if admin_settings.get('plane_email'):
            current_email = f"‚úÖ {admin_settings['plane_email']}"
        if admin_settings.get('notification_time'):
            current_time = f"‚úÖ {admin_settings['notification_time']}"
        notifications_enabled = admin_settings.get('enabled', False)
    
    status_icon = "‚úÖ" if notifications_enabled else "‚ùå"
    
    settings_text = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        f"üìß *Email:* {current_email}\n"
        f"üïò *–í—Ä–µ–º—è:* {current_time}\n"
        f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {status_icon} {'–≤–∫–ª—é—á–µ–Ω—ã' if notifications_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Email", callback_data="setup_email")],
        [InlineKeyboardButton(text="üïò –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="setup_time")],
        [InlineKeyboardButton(text="üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞", callback_data="test_send")]
    ])
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_email")
async def handle_cancel_email(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ email"""
    admin_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –æ–∂–∏–¥–∞–Ω–∏—è
    from ..database.database import AsyncSessionLocal as async_session
    from ..database.models import UserSession
    from sqlalchemy import select
    
    try:
        async with async_session() as session:
            result = await session.execute(
                select(UserSession).where(UserSession.telegram_user_id == admin_id)
            )
            user_session = result.scalar_one_or_none()
            
            if user_session:
                user_session.last_command = None
                user_session.context = {}
                await session.commit()
    except Exception as e:
        bot_logger.error(f"Error canceling email session: {e}")
    
    await callback.message.edit_text(
        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def handle_toggle_notifications(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    admin_id = callback.from_user.id
    
    from ..services.daily_tasks_service import daily_tasks_service
    
    if daily_tasks_service:
        current_status = daily_tasks_service.admin_settings.get(admin_id, {}).get('notifications_enabled', False)
        new_status = not current_status
        
        success = await daily_tasks_service.set_admin_notifications_enabled(admin_id, new_status)
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            status_icon = "‚úÖ" if new_status else "‚ùå"
            
            await callback.message.edit_text(
                f"{status_icon} *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}*\n\n"
                f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                ]),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
                ])
            )
    
    await callback.answer()
# –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
