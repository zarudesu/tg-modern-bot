"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–∏—Å–∫–∞ –≤ NetBox
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from typing import List, Dict, Any

from ..services.netbox_service import NetBoxService
from ..utils.formatters import (
    format_device_info, format_site_info, format_search_results, 
    format_error_message, escape_markdown
)
from ..utils.logger import bot_logger, log_user_action

router = Router()
netbox_service = NetBoxService()


def create_devices_keyboard(devices: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
    keyboard = []
    for device in devices[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_name = device.get('name', f"Device {device.get('id', 'N/A')}")
        keyboard.append([
            InlineKeyboardButton(
                text=f"üñ•Ô∏è {device_name}",
                callback_data=f"device:{device.get('id')}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_sites_keyboard(sites: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–∞–π—Ç–∞–º–∏"""
    keyboard = []
    for site in sites[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–∞–π—Ç–æ–≤
        site_name = site.get('name', f"Site {site.get('id', 'N/A')}")
        keyboard.append([
            InlineKeyboardButton(
                text=f"üè¢ {site_name}",
                callback_data=f"site:{site.get('id')}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(Command("search"))
async def search_command(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        if not command.args:
            await message.answer(
                "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/search <–∑–∞–ø—Ä–æ—Å>`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/search server` \\- –ø–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤\n" 
                "‚Ä¢ `/search switch` \\- –ø–æ–∏—Å–∫ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤\n"
                "‚Ä¢ `/search core` \\- –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
                parse_mode="MarkdownV2"
            )
            return
        
        query = command.args.strip()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(user_id, "search", {"query": query})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        search_msg = await message.answer(
            f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{escape_markdown(query)}*\\.\\.\\.",
            parse_mode="MarkdownV2"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await netbox_service.search_global(query, user_id=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_found = sum(len(items) for items in results.values())
        
        if total_found == 0:
            await search_msg.edit_text(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É *{escape_markdown(query)}* –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.",
                parse_mode="MarkdownV2"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_results = format_search_results(results, query)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        devices = results.get('devices', [])
        if devices:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(devices)})",
                    callback_data=f"show_devices:{query}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç—ã
        sites = results.get('sites', [])
        if sites:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üè¢ –°–∞–π—Ç—ã ({len(sites)})",
                    callback_data=f"show_sites:{query}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º IP –∞–¥—Ä–µ—Å–∞
        ip_addresses = results.get('ip_addresses', [])
        if ip_addresses:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üåê IP –∞–¥—Ä–µ—Å–∞ ({len(ip_addresses)})",
                    callback_data=f"show_ips:{query}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
        
        await search_msg.edit_text(
            formatted_results,
            parse_mode="MarkdownV2",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        bot_logger.error(f"Search command error: {e}")
        await message.answer(
            format_error_message("api_error", str(e)),
            parse_mode="MarkdownV2"
        )


@router.callback_query(F.data.startswith("show_devices:"))
async def show_devices_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        query = callback.data.split(":", 1)[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        devices_result = await netbox_service.get_devices(
            search=query, 
            limit=20, 
            user_id=user_id
        )
        
        devices = devices_result.get('results', [])
        
        if not devices:
            await callback.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        keyboard = create_devices_keyboard(devices)
        
        message_text = f"üñ•Ô∏è *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* {escape_markdown(query)}\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        
        await callback.message.edit_text(
            message_text,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.error(f"Show devices callback error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", show_alert=True)


@router.callback_query(F.data.startswith("show_sites:"))
async def show_sites_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤"""
    try:
        query = callback.data.split(":", 1)[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–π—Ç—ã
        sites_result = await netbox_service.get_sites(
            search=query,
            limit=20,
            user_id=user_id
        )
        
        sites = sites_result.get('results', [])
        
        if not sites:
            await callback.answer("–°–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        keyboard = create_sites_keyboard(sites)
        
        message_text = f"üè¢ *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É:* {escape_markdown(query)}\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        
        await callback.message.edit_text(
            message_text,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.error(f"Show sites callback error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∞–π—Ç–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("device:"))
async def device_info_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    try:
        device_id = int(callback.data.split(":", 1)[1])
        user_id = callback.from_user.id
        
        log_user_action(user_id, "view_device", {"device_id": device_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device = await netbox_service.get_device_by_id(device_id, user_id=user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        device_info = format_device_info(device)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üîå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
                    callback_data=f"interfaces:{device_id}"
                ),
                InlineKeyboardButton(
                    text="üåê NetBox",
                    url=device.get('display_url', '')
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                    callback_data="back_to_search"
                )
            ]
        ]
        
        await callback.message.edit_text(
            device_info,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        await callback.answer()
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", show_alert=True)
    except Exception as e:
        bot_logger.error(f"Device info callback error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", show_alert=True)


@router.callback_query(F.data.startswith("site:"))
async def site_info_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ"""
    try:
        site_id = int(callback.data.split(":", 1)[1])
        user_id = callback.from_user.id
        
        log_user_action(user_id, "view_site", {"site_id": site_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
        site = await netbox_service.get_site_by_id(site_id, user_id=user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        site_info = format_site_info(site)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–∞–π—Ç–∞",
                    callback_data=f"site_devices:{site_id}"
                ),
                InlineKeyboardButton(
                    text="üèóÔ∏è –°—Ç–æ–π–∫–∏",
                    callback_data=f"site_racks:{site_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåê NetBox",
                    url=site.get('display_url', '')
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                    callback_data="back_to_search"
                )
            ]
        ]
        
        await callback.message.edit_text(
            site_info,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        await callback.answer()
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–∞–π—Ç–∞", show_alert=True)
    except Exception as e:
        bot_logger.error(f"Site info callback error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–π—Ç–µ", show_alert=True)


@router.message(Command("sites"))
async def sites_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sites - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã"""
    user_id = message.from_user.id
    
    try:
        log_user_action(user_id, "list_sites")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∞–π—Ç—ã
        sites_result = await netbox_service.get_sites(user_id=user_id)
        sites = sites_result.get('results', [])
        
        if not sites:
            await message.answer(
                "üè¢ –°–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.",
                parse_mode="MarkdownV2"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ —Å–∞–π—Ç–∞–º–∏
        keyboard = create_sites_keyboard(sites)
        
        message_text = f"üè¢ *–í—Å–µ —Å–∞–π—Ç—ã \\({len(sites)}\\):*\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        
        await message.answer(
            message_text,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        
    except Exception as e:
        bot_logger.error(f"Sites command error: {e}")
        await message.answer(
            format_error_message("api_error", str(e)),
            parse_mode="MarkdownV2"
        )


@router.message(Command("device"))
async def device_command(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /device <ID>"""
    user_id = message.from_user.id
    
    try:
        if not command.args:
            await message.answer(
                "üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/device <ID>`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/device 2`",
                parse_mode="MarkdownV2"
            )
            return
        
        try:
            device_id = int(command.args.strip())
        except ValueError:
            await message.answer(
                "‚ùå ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º\\.",
                parse_mode="MarkdownV2"
            )
            return
        
        log_user_action(user_id, "view_device_direct", {"device_id": device_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device = await netbox_service.get_device_by_id(device_id, user_id=user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        device_info = format_device_info(device)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üîå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
                    callback_data=f"interfaces:{device_id}"
                ),
                InlineKeyboardButton(
                    text="üåê NetBox",
                    url=device.get('display_url', '')
                )
            ]
        ]
        
        await message.answer(
            device_info,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        bot_logger.error(f"Device command error: {e}")
        await message.answer(
            format_error_message("not_found" if "404" in str(e) else "api_error", str(e)),
            parse_mode="MarkdownV2"
        )
