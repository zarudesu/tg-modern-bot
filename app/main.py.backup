"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ HHIVP IT Management
"""
import asyncio
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from sqlalchemy import text

from .config import settings
from .database.database import init_db, close_db
from .utils.logger import bot_logger, setup_logging
from .middleware.auth import AuthMiddleware
from .middleware.logging import LoggingMiddleware, GroupMonitoringMiddleware, PerformanceMiddleware
from .middleware.database import DatabaseSessionMiddleware

# –ù–û–í–´–ï –ú–û–î–£–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´
from .modules.common import start
from .modules.daily_tasks import router as daily_tasks_router
from .modules.work_journal import router as work_journal_router

# –°–¢–ê–†–´–ï –ò–ú–ü–û–†–¢–´ - —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
# from .handlers import start
# from .handlers import work_journal
# from .handlers import daily_tasks  # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

from .services.daily_tasks_service import init_daily_tasks_service
from .services.scheduler import scheduler
# from .handlers import google_sheets_sync  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π gspread
# from .handlers import plane_testing  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
from .modules.common.start import COMMANDS_MENU


async def setup_bot_commands(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        await bot.set_my_commands(COMMANDS_MENU)
        bot_logger.info("Bot commands menu set successfully")
    except Exception as e:
        bot_logger.error(f"Failed to set bot commands: {e}")


async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    bot_logger.info("Bot startup initiated")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        bot_logger.info("Database initialized")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        await init_daily_tasks_service(bot)
        bot_logger.info("Daily tasks service initialized")
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if settings.daily_tasks_enabled:
            await scheduler.start()
            bot_logger.info("Daily tasks scheduler started")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await setup_bot_commands(bot)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        bot_logger.info(f"Bot started: @{bot_info.username} (ID: {bot_info.id})")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
        from datetime import datetime
        escaped_time = datetime.now().strftime("%d\\.%m\\.%Y %H:%M:%S")
        escaped_username = bot_info.username.replace('_', '\\_')
        
        startup_message = (
            "üü¢ *HHIVP IT Assistant Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ\\!*\n\n"
            f"ü§ñ *Username:* @{escaped_username}\n"
            f"üÜî *Bot ID:* {bot_info.id}\n"
            f"üìä *–í–µ—Ä—Å–∏—è:* 1\\.1\\.0\n"
            f"üïê *–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:* {escaped_time}\n\n"
            f"üöÄ *–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\\!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞\\."
        )
        
        for admin_id in settings.admin_user_id_list:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=startup_message,
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                bot_logger.warning(f"Could not notify admin {admin_id} about startup: {e}")
            
    except Exception as e:
        bot_logger.error(f"Startup failed: {e}")
        raise


async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    bot_logger.info("Bot shutdown initiated")
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        shutdown_message = (
            "üî¥ *HHIVP IT Assistant Bot –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É\\.*\n\n"
            "üõë –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\\."
        )
        
        for admin_id in settings.admin_user_id_list:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=shutdown_message,
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                bot_logger.warning(f"Could not notify admin {admin_id} about shutdown: {e}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if scheduler.is_running():
            await scheduler.stop()
            bot_logger.info("Daily tasks scheduler stopped")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await close_db()
        bot_logger.info("Database connection closed")
        
    except Exception as e:
        bot_logger.error(f"Shutdown error: {e}")
    
    bot_logger.info("Bot shutdown completed")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    bot_logger.info("Starting HHIVP IT Assistant Bot")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(
            token=settings.telegram_token,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2)
        )
        
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
        # 1. Database Session - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
        dp.message.middleware(DatabaseSessionMiddleware())
        dp.callback_query.middleware(DatabaseSessionMiddleware())
        
        # 2. Performance monitoring
        dp.message.middleware(PerformanceMiddleware())
        dp.callback_query.middleware(PerformanceMiddleware())
        
        # 3. Logging (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç db_session)
        dp.message.middleware(LoggingMiddleware())
        dp.callback_query.middleware(LoggingMiddleware())
        
        # 4. Group monitoring
        dp.message.middleware(GroupMonitoringMiddleware())
        
        # 5. Auth (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç db_session)
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û–ú –ø–æ—Ä—è–¥–∫–µ:
        
        # 1. –û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´ - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        dp.include_router(start.router)
        bot_logger.info("‚úÖ Common module loaded (start, help, profile)")
        
        # 2. DAILY TASKS - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ email)
        dp.include_router(daily_tasks_router.router)
        bot_logger.info("‚úÖ Daily Tasks module loaded (PRIORITY: email handlers)")
        
        # 3. WORK JOURNAL - –ù–ò–ó–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö)
        dp.include_router(work_journal_router.router)
        bot_logger.info("‚úÖ Work Journal module loaded (filtered by active states)")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        # dp.include_router(google_sheets_sync.router)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        # dp.include_router(plane_testing.router)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        
        bot_logger.info("üéØ All modules loaded successfully with proper isolation")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        bot_logger.info("Bot configuration completed, starting polling...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(
            bot,
            allowed_updates=["message", "callback_query", "inline_query"],
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        bot_logger.info("Bot stopped by user")
    except Exception as e:
        bot_logger.error(f"Bot crashed: {e}")
        raise
    finally:
        bot_logger.info("Bot terminated")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• Bot crashed: {e}")
        sys.exit(1)

async def health_check():
    """Health check –¥–ª—è production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from .database.database import get_async_session
        async for session in get_async_session():
            await session.execute(text("SELECT 1"))
            break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É Redis
        
        return True
    except Exception as e:
        bot_logger.error(f"Health check failed: {e}")
        return False
