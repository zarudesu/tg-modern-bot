#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –º–æ–¥—É–ª–µ–π –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ:
1. Work Journal –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
2. Daily Tasks —Ä–∞–±–æ—Ç–∞–µ—Ç —Å email –∏–∑–æ–ª—è—Ü–∏–µ–π  
3. –ú–æ–¥—É–ª–∏ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.database.database import init_db, get_async_session
from app.services.work_journal_service import WorkJournalService
from app.services.daily_tasks_service import DailyTasksService
from app.utils.work_journal_constants import WorkJournalState
from app.modules.work_journal.filters import IsWorkJournalActiveFilter
from app.modules.daily_tasks.filters import IsAdminEmailFilter


async def test_work_journal_filters():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ work_journal"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã Work Journal...")
    
    async for session in get_async_session():
        service = WorkJournalService(session)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π user ID
        test_user_id = 12345
        
        # 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å IDLE (–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ)
        user_state = await service.get_user_state(test_user_id)
        print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state.current_state if user_state else 'None'}")
        
        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await service.set_user_state(test_user_id, WorkJournalState.SELECTING_DATE)
        user_state = await service.get_user_state(test_user_id)
        print(f"   –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state.current_state}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        # –°–æ–∑–¥–∞–µ–º mock Message –æ–±—ä–µ–∫—Ç
        class MockMessage:
            def __init__(self, user_id):
                self.from_user = type('MockUser', (), {'id': user_id})()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
        active_filter = IsWorkJournalActiveFilter()
        is_active = await active_filter(MockMessage(test_user_id))
        print(f"   –§–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {is_active} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True)")
        
        # 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ IDLE
        await service.set_user_state(test_user_id, WorkJournalState.IDLE)
        is_active_idle = await active_filter(MockMessage(test_user_id))
        print(f"   –§–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ IDLE: {is_active_idle} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False)")
        
        # 5. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await service.clear_user_state(test_user_id)
        is_active_cleared = await active_filter(MockMessage(test_user_id))
        print(f"   –§–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {is_active_cleared} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False)")
        
        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ async for
    
    print("‚úÖ Work Journal —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")


async def test_daily_tasks_email_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ daily_tasks –ø–æ email"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é Daily Tasks –ø–æ email...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockMessage:
            def __init__(self, user_id, text):
                self.from_user = type('MockUser', (), {'id': user_id})()
                self.text = text
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä daily_tasks
        daily_filter = IsAdminEmailFilter()
        
        # Email —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ - –¥–æ–ª–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
        email_message = MockMessage(28795547, "zarudesu@gmail.com")  # –¢–≤–æ–π admin ID
        is_email_active = await daily_filter(email_message)
        print(f"   Admin Email —Ñ–∏–ª—å—Ç—Ä: {is_email_active} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True)")
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ù–ï –¥–æ–ª–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä  
        regular_message = MockMessage(28795547, "–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
        is_regular_active = await daily_filter(regular_message)
        print(f"   –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä: {is_regular_active} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False)")
        
        # Email –æ—Ç –ù–ï-–∞–¥–º–∏–Ω–∞ - –ù–ï –¥–æ–ª–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
        non_admin_email = MockMessage(12345, "test@example.com")  # –ù–ï admin ID
        is_non_admin_active = await daily_filter(non_admin_email)
        print(f"   –ù–ï-admin Email —Ñ–∏–ª—å—Ç—Ä: {is_non_admin_active} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False)")
        
        print("‚úÖ Daily Tasks email –∏–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ú–æ–¥—É–ª—å daily_tasks —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        print("   (–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)")


async def test_module_independence():
    """–¢–µ—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π...")
    
    async for session in get_async_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
        
        # 1. Work Journal —Å–µ—Ä–≤–∏—Å
        wj_service = WorkJournalService(session)
        companies = await wj_service.get_companies()
        print(f"   Work Journal: {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –≤ –ë–î")
        
        # 2. Daily Tasks —Å–µ—Ä–≤–∏—Å  
        dt_service = DailyTasksService()
        print(f"   Daily Tasks: —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        break
    
    print("‚úÖ –ú–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ú–û–î–£–õ–ï–ô –ü–û–°–õ–ï –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        await test_work_journal_filters()
        print()
        
        await test_daily_tasks_email_isolation()
        print()
        
        await test_module_independence()
        print()
        
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ú–æ–¥—É–ª—å–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
