#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API
"""
import asyncio
import aiohttp
import os
from datetime import datetime

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
PLANE_API_TOKEN = os.getenv("PLANE_API_TOKEN", "")
PLANE_BASE_URL = os.getenv("PLANE_API_URL", "")
PLANE_WORKSPACE_SLUG = os.getenv("PLANE_WORKSPACE_SLUG", "")

if not all([PLANE_API_TOKEN, PLANE_BASE_URL, PLANE_WORKSPACE_SLUG]):
    print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PLANE_API_TOKEN, PLANE_API_URL, PLANE_WORKSPACE_SLUG")
    exit(1)


async def test_plane_api():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plane API"""
    headers = {
        "Authorization": f"Bearer {PLANE_API_TOKEN}",
        "Content-Type": "application/json"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            async with session.get(
                f"{PLANE_BASE_URL}/api/users/me/",
                headers=headers
            ) as response:
                if response.status == 200:
                    user_data = await response.json()
                    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {user_data.get('email', 'N/A')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status}")
                    return False
            
            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ workspace
            async with session.get(
                f"{PLANE_BASE_URL}/api/workspaces/{PLANE_WORKSPACE_SLUG}/",
                headers=headers
            ) as response:
                if response.status == 200:
                    workspace_data = await response.json()
                    print(f"‚úÖ Workspace –Ω–∞–π–¥–µ–Ω: {workspace_data.get('name', 'N/A')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workspace: {response.status}")
                    return False
            
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
            async with session.get(
                f"{PLANE_BASE_URL}/api/workspaces/{PLANE_WORKSPACE_SLUG}/projects/",
                headers=headers
            ) as response:
                if response.status == 200:
                    projects_data = await response.json()
                    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(projects_data.get('results', []))} —à—Ç.")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status}")
                    return False
                    
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


async def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Plane API...")
    print(f"üåê URL: {PLANE_BASE_URL}")
    print(f"üè¢ Workspace: {PLANE_WORKSPACE_SLUG}")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 50)
    
    success = await test_plane_api()
    
    print("-" * 50)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
        exit(1)


if __name__ == "__main__":
    asyncio.run(main())
