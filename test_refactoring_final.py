            not text_to_wj            # Text ‚â† work_journal ‚úÖ
        )
        
        if correct_isolation:
            print("  ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return True
        else:
            print("  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –º–æ–¥—É–ª–µ–π")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞        no_old_ok = True
        for old_imp in old_imports:
            found = old_imp in content
            print(f"    {'‚ùå' if found else '‚úÖ'} {old_imp.split()[-1]}: {'–ù–ê–ô–î–ï–ù (–ü–õ–û–•–û)' if found else '–û–¢–°–£–¢–°–¢–í–£–ï–¢ ‚úÖ'}")
            if found:
                no_old_ok = False
        
        return imports_ok and includes_ok and no_old_ok
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è main.py: {e}")
        return False

async def test_module_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –º–æ–¥—É–ª–µ–π"""
    print("\nüîí –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ú–û–î–£–õ–ï–ô")
    print("-" * 40)
    
    try:
        from app.modules.daily_tasks.filters import IsAdminEmailFilter
        from app.modules.work_journal.filters import IsWorkJournalActiveFilter
        from app.config import settings
        
        # –ú–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        class MockUser:
            def __init__(self, user_id):
                self.id = user_id
        
        class MockMessage:
            def __init__(self, text, user_id):
                self.text = text
                self.from_user = MockUser(user_id)
        
        admin_id = 28795547
        test_email = "zarudesu@gmail.com"
        
        email_msg = MockMessage(test_email, admin_id)
        text_msg = MockMessage("–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", admin_id)
        non_admin_email = MockMessage(test_email, 999999)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        email_filter = IsAdminEmailFilter()
        wj_filter = IsWorkJournalActiveFilter()
        
        # Email —Ç–µ—Å—Ç—ã
        admin_email_to_daily = await email_filter(email_msg)
        non_admin_email_to_daily = await email_filter(non_admin_email)
        text_to_daily = await email_filter(text_msg)
        
        # Work journal —Ç–µ—Å—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å False –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π)
        email_to_wj = await wj_filter(email_msg)
        text_to_wj = await wj_filter(text_msg)
        
        print("  üìß Daily Tasks (email —Ñ–∏–ª—å—Ç—Ä):")
        print(f"    ‚úÖ –ê–¥–º–∏–Ω email: {admin_email_to_daily}")
        print(f"    ‚ùå –ù–µ-–∞–¥–º–∏–Ω email: {non_admin_email_to_daily}")
        print(f"    ‚ùå –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_to_daily}")
        
        print("  üìù Work Journal (—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä):")
        print(f"    ‚ùå Email –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {email_to_wj}")
        print(f"    ‚ùå –¢–µ–∫—Å—Ç –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {text_to_wj}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–∑–æ–ª—è—Ü–∏—é
        isolation_correct = (
            admin_email_to_daily and          # –ê–¥–º–∏–Ω email ‚Üí daily_tasks ‚úÖ
            not non_admin_email_to_daily and  # –ù–µ-–∞–¥–º–∏–Ω email ‚â† daily_tasks ‚úÖ
            not text_to_daily and             # –¢–µ–∫—Å—Ç ‚â† daily_tasks ‚úÖ
            not email_to_wj and               # Email ‚â† work_journal ‚úÖ
            not text_to_wj                    # –¢–µ–∫—Å—Ç ‚â† work_journal ‚úÖ
        )
        
        print(f"\n  üéØ –ò–∑–æ–ª—è—Ü–∏—è –º–æ–¥—É–ª–µ–π: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if isolation_correct else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}")
        
        return isolation_correct
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è main.py", test_main_py_config),
        ("–ò–∑–æ–ª—è—Ü–∏—è –º–æ–¥—É–ª–µ–π", test_module_isolation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
        print("  üì¶ –°—Ç–∞—Ä—ã–µ handlers –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        print("  üéØ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∞")
        print("  üìß Email –∏–∑–æ–ª—è—Ü–∏—è –¥–ª—è daily_tasks —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  üìù Work journal —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("  üîß Main.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏")
        
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è:")
        print("  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –≤ app/modules/")
        print("  ‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∏—á")
        print("  ‚Ä¢ –î–µ–ø–ª–æ—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
        
        print(f"\nüìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:")
        print("  ‚Ä¢ DEV_GUIDE_NEW.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
        print("  ‚Ä¢ MODULAR_QUICK_REF.md - –±—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞")
        print("  ‚Ä¢ README.md - –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        
    else:
        print("\n‚ö†Ô∏è –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        print("\n–ü—Ä–æ–±–ª–µ–º—ã:")
        for test_name, result in results:
            if not result:
                print(f"  ‚ùå {test_name}")
    
    return passed == total

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
